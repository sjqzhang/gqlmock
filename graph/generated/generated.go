// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/sjqzhang/gqlmock/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CommonEnum struct {
		Code       func(childComplexity int) int
		StatusName func(childComplexity int) int
	}

	DataChangeHistory struct {
		CreateBy  func(childComplexity int) int
		Ctime     func(childComplexity int) int
		FieldName func(childComplexity int) int
		NewValue  func(childComplexity int) int
		OldValue  func(childComplexity int) int
		OperType  func(childComplexity int) int
		RecordID  func(childComplexity int) int
		TabName   func(childComplexity int) int
	}

	EarmakedPrjTaskInfo struct {
		DepartID   func(childComplexity int) int
		DepartName func(childComplexity int) int
		TaskList   func(childComplexity int) int
	}

	EarmakedTaskInfo struct {
		Info            func(childComplexity int) int
		RelatedTaskList func(childComplexity int) int
		SubtaskList     func(childComplexity int) int
	}

	EnumsResult struct {
		MilestoneState     func(childComplexity int) int
		PrjFlowCloseRemark func(childComplexity int) int
		PrjFlowStatus      func(childComplexity int) int
		PrjMemberRole      func(childComplexity int) int
		PrjProgress        func(childComplexity int) int
		PrjRisk            func(childComplexity int) int
		PrjState           func(childComplexity int) int
		PrjType            func(childComplexity int) int
		ReqPriority        func(childComplexity int) int
		ReqType            func(childComplexity int) int
		SubtaskJiraStatus  func(childComplexity int) int
	}

	FlowRelationInfo struct {
		FlowID    func(childComplexity int) int
		FlowState func(childComplexity int) int
		GroupID   func(childComplexity int) int
		JiraID    func(childComplexity int) int
		JiraKey   func(childComplexity int) int
	}

	GanttGroupDetail struct {
		DepartmentID func(childComplexity int) int
		Desc         func(childComplexity int) int
		GroupKeyID   func(childComplexity int) int
		ID           func(childComplexity int) int
		MemberList   func(childComplexity int) int
		Name         func(childComplexity int) int
		Owner        func(childComplexity int) int
	}

	GanttGroupInfo struct {
		Desc  func(childComplexity int) int
		ID    func(childComplexity int) int
		Name  func(childComplexity int) int
		Owner func(childComplexity int) int
	}

	GanttGroupMembersPagerInfo struct {
		GanttGroupMemberList func(childComplexity int) int
		Total                func(childComplexity int) int
	}

	GanttGroupTaskInfo struct {
		MemberList  func(childComplexity int) int
		SubtaskList func(childComplexity int) int
		TaskList    func(childComplexity int) int
	}

	GanttGroupsPagerInfo struct {
		GanttGroupList func(childComplexity int) int
		Total          func(childComplexity int) int
	}

	JiraKeyJiraIdInfo struct {
		JiraID  func(childComplexity int) int
		JiraKey func(childComplexity int) int
	}

	MilestoneInfo struct {
		Desc        func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		OrderNum    func(childComplexity int) int
		Owner       func(childComplexity int) int
		PlanEndTime func(childComplexity int) int
		ProjectID   func(childComplexity int) int
		RealEndTime func(childComplexity int) int
		State       func(childComplexity int) int
	}

	MilestonePagerInfo struct {
		MilestoneList func(childComplexity int) int
		Total         func(childComplexity int) int
	}

	Mutation struct {
		BizAddGanttGroupMembers            func(childComplexity int, input *model.GanttGroupMemberInput) int
		BizAddProjectMembers               func(childComplexity int, input *model.AddProjectMemberInput) int
		BizCreateGanttGroup                func(childComplexity int, input model.GanttGroupInput) int
		BizCreateMilestone                 func(childComplexity int, projectID int, input model.MilestoneInput) int
		BizCreateMilestoneTpl              func(childComplexity int, projectID int) int
		BizCreateProject                   func(childComplexity int, input model.ProjectInput) int
		BizCreateRisk                      func(childComplexity int, projectID int, input model.RiskAddInput) int
		BizCreateSubtask                   func(childComplexity int, input model.PrjSubtaskAddInput) int
		BizCreateTask                      func(childComplexity int, input model.ReqPoolTaskAddInput) int
		BizDeleteGanttGroup                func(childComplexity int, ganttGroupID int) int
		BizDeleteGanttGroupMembers         func(childComplexity int, input *model.DeleteGanttGroupMembersInput) int
		BizDeleteMilestone                 func(childComplexity int, projectID int, milestoneID int) int
		BizDeleteProject                   func(childComplexity int, projectID int) int
		BizDeleteProjectMembers            func(childComplexity int, input *model.DeleteProjectMemberInput) int
		BizEarmakedCreateTask              func(childComplexity int, input model.ReqPoolTaskAddInput) int
		BizEarmakedDeleteTask              func(childComplexity int, projectID int, jiraKey string) int
		BizEarmakedImportTaskList          func(childComplexity int, projectID int, jiraKeyList []string) int
		BizUpdateGanttGroup                func(childComplexity int, ganttGroupID int, input model.GanttGroupInput) int
		BizUpdateMilestone                 func(childComplexity int, milestoneID int, input model.UpdateMilestoneInput) int
		BizUpdateProject                   func(childComplexity int, projectID int, input model.UpdateProjectInput) int
		BizUpdateProjectMember             func(childComplexity int, input *model.UpdateProjectMemberInput) int
		BizUpdateProjectState              func(childComplexity int, projectID int, input model.UpdateProjectStateInput) int
		BizUpdateRisk                      func(childComplexity int, projectID int, input model.RiskUpdateInput) int
		BizUpdateSubtask                   func(childComplexity int, input []*model.PrjSubtaskEditInput) int
		BizUpdateTask                      func(childComplexity int, input []*model.ReqPoolTaskEditInput) int
		CreatePrjChangeRecordTab           func(childComplexity int, input model.PrjChangeRecordTabInput) int
		CreatePrjGanttGroupDepartmentTab   func(childComplexity int, input model.PrjGanttGroupDepartmentTabInput) int
		CreatePrjGanttGroupMemberTab       func(childComplexity int, input model.PrjGanttGroupMemberTabInput) int
		CreatePrjGanttGroupTab             func(childComplexity int, input model.PrjGanttGroupTabInput) int
		CreatePrjMilestoneTab              func(childComplexity int, input model.PrjMilestoneTabInput) int
		CreatePrjProjectDepartmentTab      func(childComplexity int, input model.PrjProjectDepartmentTabInput) int
		CreatePrjProjectTab                func(childComplexity int, input model.PrjProjectTabInput) int
		CreatePrjProjectUserTab            func(childComplexity int, input model.PrjProjectUserTabInput) int
		CreatePrjReqFlowTab                func(childComplexity int, input model.PrjReqFlowTabInput) int
		CreatePrjRequirementRelatedTab     func(childComplexity int, input model.PrjRequirementRelatedTabInput) int
		CreatePrjRequirementTab            func(childComplexity int, input model.PrjRequirementTabInput) int
		CreatePrjRiskTab                   func(childComplexity int, input model.PrjRiskTabInput) int
		CreatePrjUserTaskdetailTemplateTab func(childComplexity int, input model.PrjUserTaskdetailTemplateTabInput) int
		UpdatePrjChangeRecordTab           func(childComplexity int, id int, input model.PrjChangeRecordTabInput) int
		UpdatePrjGanttGroupDepartmentTab   func(childComplexity int, id int, input model.PrjGanttGroupDepartmentTabInput) int
		UpdatePrjGanttGroupMemberTab       func(childComplexity int, id int, input model.PrjGanttGroupMemberTabInput) int
		UpdatePrjGanttGroupTab             func(childComplexity int, id int, input model.PrjGanttGroupTabInput) int
		UpdatePrjMilestoneTab              func(childComplexity int, id int, input model.PrjMilestoneTabInput) int
		UpdatePrjProjectDepartmentTab      func(childComplexity int, id int, input model.PrjProjectDepartmentTabInput) int
		UpdatePrjProjectTab                func(childComplexity int, id int, input model.PrjProjectTabInput) int
		UpdatePrjProjectUserTab            func(childComplexity int, id int, input model.PrjProjectUserTabInput) int
		UpdatePrjReqFlowTab                func(childComplexity int, id int, input model.PrjReqFlowTabInput) int
		UpdatePrjRequirementRelatedTab     func(childComplexity int, id int, input model.PrjRequirementRelatedTabInput) int
		UpdatePrjRequirementTab            func(childComplexity int, id int, input model.PrjRequirementTabInput) int
		UpdatePrjRiskTab                   func(childComplexity int, id int, input model.PrjRiskTabInput) int
		UpdatePrjUserTaskdetailTemplateTab func(childComplexity int, id int, input model.PrjUserTaskdetailTemplateTabInput) int
	}

	PrjChangeRecordTab struct {
		CreateBy  func(childComplexity int) int
		Ctime     func(childComplexity int) int
		FieldName func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Mtime     func(childComplexity int) int
		NewValue  func(childComplexity int) int
		OldValue  func(childComplexity int) int
		OperType  func(childComplexity int) int
		RecordID  func(childComplexity int) int
		TabName   func(childComplexity int) int
		UpdateBy  func(childComplexity int) int
	}

	PrjChangeRecordTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjGanttGroupDepartmentTab struct {
		CreateBy     func(childComplexity int) int
		Ctime        func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		GanttGroupID func(childComplexity int) int
		GroupKeyID   func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		Mtime        func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	PrjGanttGroupDepartmentTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjGanttGroupMemberTab struct {
		CreateBy     func(childComplexity int) int
		Ctime        func(childComplexity int) int
		GanttGroupID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		Mtime        func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
		UserEmail    func(childComplexity int) int
	}

	PrjGanttGroupMemberTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjGanttGroupTab struct {
		CreateBy  func(childComplexity int) int
		Ctime     func(childComplexity int) int
		GanttName func(childComplexity int) int
		GenttDesc func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Mtime     func(childComplexity int) int
		Owner     func(childComplexity int) int
		UpdateBy  func(childComplexity int) int
	}

	PrjGanttGroupTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjMilestoneTab struct {
		CreateBy    func(childComplexity int) int
		Ctime       func(childComplexity int) int
		Desc        func(childComplexity int) int
		EndTime     func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDeleted   func(childComplexity int) int
		Mtime       func(childComplexity int) int
		Name        func(childComplexity int) int
		OrderNum    func(childComplexity int) int
		Owner       func(childComplexity int) int
		PlanEndTime func(childComplexity int) int
		ProjectID   func(childComplexity int) int
		RealEndTime func(childComplexity int) int
		StartTime   func(childComplexity int) int
		State       func(childComplexity int) int
		UpdateBy    func(childComplexity int) int
	}

	PrjMilestoneTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjProjectDepartmentTab struct {
		CreateBy        func(childComplexity int) int
		Ctime           func(childComplexity int) int
		DepartmentKeyID func(childComplexity int) int
		GroupKeyID      func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDeleted       func(childComplexity int) int
		Mtime           func(childComplexity int) int
		ProjectID       func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	PrjProjectDepartmentTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjProjectTab struct {
		CreateBy    func(childComplexity int) int
		Ctime       func(childComplexity int) int
		Description func(childComplexity int) int
		EndTime     func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDeleted   func(childComplexity int) int
		Mtime       func(childComplexity int) int
		Name        func(childComplexity int) int
		Owner       func(childComplexity int) int
		PrjType     func(childComplexity int) int
		Progress    func(childComplexity int) int
		Risk        func(childComplexity int) int
		StartTime   func(childComplexity int) int
		State       func(childComplexity int) int
		StateDesc   func(childComplexity int) int
		UpdateBy    func(childComplexity int) int
	}

	PrjProjectTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjProjectUserTab struct {
		CreateBy    func(childComplexity int) int
		Ctime       func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDeleted   func(childComplexity int) int
		Mtime       func(childComplexity int) int
		ProjectID   func(childComplexity int) int
		ProjectRole func(childComplexity int) int
		UpdateBy    func(childComplexity int) int
		UserEmail   func(childComplexity int) int
	}

	PrjProjectUserTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjReqFlowTab struct {
		CreateBy   func(childComplexity int) int
		Ctime      func(childComplexity int) int
		FlowID     func(childComplexity int) int
		GroupID    func(childComplexity int) int
		GroupKeyID func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDeleted  func(childComplexity int) int
		JiraID     func(childComplexity int) int
		JiraKey    func(childComplexity int) int
		Mtime      func(childComplexity int) int
		UpdateBy   func(childComplexity int) int
	}

	PrjReqFlowTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjRequirementRelatedTab struct {
		CreateBy       func(childComplexity int) int
		Ctime          func(childComplexity int) int
		ID             func(childComplexity int) int
		IsDeleted      func(childComplexity int) int
		JiraID         func(childComplexity int) int
		JiraKey        func(childComplexity int) int
		Mtime          func(childComplexity int) int
		RelatedJiraID  func(childComplexity int) int
		RelatedJiraKey func(childComplexity int) int
		RelatedReqID   func(childComplexity int) int
		ReqID          func(childComplexity int) int
		UpdateBy       func(childComplexity int) int
	}

	PrjRequirementRelatedTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjRequirementTab struct {
		Assignee            func(childComplexity int) int
		Be                  func(childComplexity int) int
		BeExpectDuration    func(childComplexity int) int
		Checklist           func(childComplexity int) int
		CreateBy            func(childComplexity int) int
		Creator             func(childComplexity int) int
		Ctime               func(childComplexity int) int
		Description         func(childComplexity int) int
		Dev                 func(childComplexity int) int
		DmsFlowState        func(childComplexity int) int
		EndTime             func(childComplexity int) int
		ExpectLiveDate      func(childComplexity int) int
		ExpectPrdDate       func(childComplexity int) int
		ExpectUatDate       func(childComplexity int) int
		Fe                  func(childComplexity int) int
		FeExpectDuration    func(childComplexity int) int
		Fixversions         func(childComplexity int) int
		ID                  func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		JiraBoard           func(childComplexity int) int
		JiraID              func(childComplexity int) int
		JiraKey             func(childComplexity int) int
		JiraType            func(childComplexity int) int
		Labels              func(childComplexity int) int
		Mtime               func(childComplexity int) int
		Other               func(childComplexity int) int
		OtherExpectDuration func(childComplexity int) int
		ParentJiraID        func(childComplexity int) int
		ParentJiraKey       func(childComplexity int) int
		Pd                  func(childComplexity int) int
		PdExpectDuration    func(childComplexity int) int
		Priority            func(childComplexity int) int
		PrjFlowState        func(childComplexity int) int
		ProjectID           func(childComplexity int) int
		Qa                  func(childComplexity int) int
		QaExpectDuration    func(childComplexity int) int
		RelatedPerson       func(childComplexity int) int
		Remark              func(childComplexity int) int
		Reporter            func(childComplexity int) int
		Reports             func(childComplexity int) int
		ReqProcess          func(childComplexity int) int
		ReqType             func(childComplexity int) int
		StartTime           func(childComplexity int) int
		Status              func(childComplexity int) int
		Storypoint          func(childComplexity int) int
		SubtaskType         func(childComplexity int) int
		SyncJiraTime        func(childComplexity int) int
		TaskParentJiraID    func(childComplexity int) int
		TaskParentJiraKey   func(childComplexity int) int
		Title               func(childComplexity int) int
		UpdateBy            func(childComplexity int) int
	}

	PrjRequirementTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjRiskTab struct {
		CreateBy  func(childComplexity int) int
		Ctime     func(childComplexity int) int
		EndTime   func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Mtime     func(childComplexity int) int
		Owner     func(childComplexity int) int
		PreRiskID func(childComplexity int) int
		ProjectID func(childComplexity int) int
		Remark    func(childComplexity int) int
		RiskLevel func(childComplexity int) int
		RiskType  func(childComplexity int) int
		Solution  func(childComplexity int) int
		State     func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdateBy  func(childComplexity int) int
	}

	PrjRiskTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PrjSubtaskInfo struct {
		Assignee     func(childComplexity int) int
		Creator      func(childComplexity int) int
		Description  func(childComplexity int) int
		DueDate      func(childComplexity int) int
		FixVersion   func(childComplexity int) int
		GroupKeyID   func(childComplexity int) int
		ID           func(childComplexity int) int
		JiraID       func(childComplexity int) int
		JiraKey      func(childComplexity int) int
		Label        func(childComplexity int) int
		OperRet      func(childComplexity int) int
		ParentJiraID func(childComplexity int) int
		ParentKey    func(childComplexity int) int
		Priority     func(childComplexity int) int
		Reporter     func(childComplexity int) int
		StartDate    func(childComplexity int) int
		Status       func(childComplexity int) int
		StoryPoints  func(childComplexity int) int
		SubtaskType  func(childComplexity int) int
		TaskType     func(childComplexity int) int
		Title        func(childComplexity int) int
	}

	PrjUserTaskdetailTemplateTab struct {
		Conf      func(childComplexity int) int
		CreateBy  func(childComplexity int) int
		Ctime     func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Mtime     func(childComplexity int) int
		UpdateBy  func(childComplexity int) int
		UserEmail func(childComplexity int) int
	}

	PrjUserTaskdetailTemplateTabPagerInfo struct {
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ProjectChangeRecord struct {
		ChangeRemark func(childComplexity int) int
		ChangeTime   func(childComplexity int) int
		NewRisk      func(childComplexity int) int
		NewState     func(childComplexity int) int
		NewStateDesc func(childComplexity int) int
		OldRisk      func(childComplexity int) int
		OldState     func(childComplexity int) int
		OldStateDesc func(childComplexity int) int
		Operator     func(childComplexity int) int
	}

	ProjectDetail struct {
		DepartmentID  func(childComplexity int) int
		Desc          func(childComplexity int) int
		GroupKeyIds   func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Owner         func(childComplexity int) int
		PlanEndDate   func(childComplexity int) int
		PlanStartDate func(childComplexity int) int
		Progress      func(childComplexity int) int
		Risk          func(childComplexity int) int
		State         func(childComplexity int) int
		StateDesc     func(childComplexity int) int
		StateHistory  func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	ProjectInfo struct {
		Desc          func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Owner         func(childComplexity int) int
		PlanEndDate   func(childComplexity int) int
		PlanStartDate func(childComplexity int) int
		Progress      func(childComplexity int) int
		Risk          func(childComplexity int) int
		State         func(childComplexity int) int
	}

	ProjectMemberInfo struct {
		ProductLine func(childComplexity int) int
		ProjectRole func(childComplexity int) int
		Role        func(childComplexity int) int
		Team        func(childComplexity int) int
		UserEmail   func(childComplexity int) int
		UserName    func(childComplexity int) int
	}

	ProjectMemberPagerInfo struct {
		MemberList func(childComplexity int) int
		Total      func(childComplexity int) int
	}

	ProjectMenuInfo struct {
		MenuList func(childComplexity int) int
	}

	ProjectsPagerInfo struct {
		ProjectList func(childComplexity int) int
		Total       func(childComplexity int) int
	}

	Query struct {
		BizEarmakedGetTaskLit                    func(childComplexity int, projectID int) int
		BizGetDmsFlowID                          func(childComplexity int, input []*model.FlowRelationInput) int
		BizGetEnumsList                          func(childComplexity int) int
		BizGetGanttGroup                         func(childComplexity int, ganttGroupID int) int
		BizGetGanttGroupList                     func(childComplexity int, departmentID string, pager model.PagerFrontInput) int
		BizGetGanttScheduledSubtaskList          func(childComplexity int, ganttGroupID int, startTime string, endTime string) int
		BizGetGanttTaskList                      func(childComplexity int, ganttGroupID int, jiraKey *string, pageno int, count int) int
		BizGetGanttUnScheduledSubtaskList        func(childComplexity int, userEmail string) int
		BizGetGanttUnScheduledSubtaskNum         func(childComplexity int, ganttGroupID int) int
		BizGetGroupTaskList                      func(childComplexity int, input model.ReqPoolTaskInput) int
		BizGetJiraBoardsTaskList                 func(childComplexity int, input *model.JiraBoardsTaskInput) int
		BizGetKanBoardTaskList                   func(childComplexity int, input model.ReqPoolTasKanBoardInput) int
		BizGetMilestoneChangeHistory             func(childComplexity int, projectID int) int
		BizGetMilestoneList                      func(childComplexity int, projectID int) int
		BizGetProjectDetail                      func(childComplexity int, projectID int) int
		BizGetProjectList                        func(childComplexity int, departmentID string, query model.QueryProjectInput, pager model.PagerFrontInput) int
		BizGetProjectMemberList                  func(childComplexity int, projectID int, query model.QueryProjectMemberInput, pager model.PagerFrontInput) int
		BizGetProjectMenu                        func(childComplexity int, projectID int) int
		BizGetRiskList                           func(childComplexity int, projectID int) int
		BizGetVersions                           func(childComplexity int) int
		BizGetVersionsByBoards                   func(childComplexity int, jiraBoards []string) int
		GetPrjChangeRecordTab                    func(childComplexity int, id *int, query *model.PrjChangeRecordTabInput) int
		GetPrjChangeRecordTabs                   func(childComplexity int, query *model.PrjChangeRecordTabInput, pager model.PagerInput, order *string) int
		GetPrjChangeRecordTabsForPager           func(childComplexity int, query *model.PrjChangeRecordTabInput, pager model.PagerInput, order *string) int
		GetPrjGanttGroupDepartmentTab            func(childComplexity int, id *int, query *model.PrjGanttGroupDepartmentTabInput) int
		GetPrjGanttGroupDepartmentTabs           func(childComplexity int, query *model.PrjGanttGroupDepartmentTabInput, pager model.PagerInput, order *string) int
		GetPrjGanttGroupDepartmentTabsForPager   func(childComplexity int, query *model.PrjGanttGroupDepartmentTabInput, pager model.PagerInput, order *string) int
		GetPrjGanttGroupMemberTab                func(childComplexity int, id *int, query *model.PrjGanttGroupMemberTabInput) int
		GetPrjGanttGroupMemberTabs               func(childComplexity int, query *model.PrjGanttGroupMemberTabInput, pager model.PagerInput, order *string) int
		GetPrjGanttGroupMemberTabsForPager       func(childComplexity int, query *model.PrjGanttGroupMemberTabInput, pager model.PagerInput, order *string) int
		GetPrjGanttGroupTab                      func(childComplexity int, id *int, query *model.PrjGanttGroupTabInput) int
		GetPrjGanttGroupTabs                     func(childComplexity int, query *model.PrjGanttGroupTabInput, pager model.PagerInput, order *string) int
		GetPrjGanttGroupTabsForPager             func(childComplexity int, query *model.PrjGanttGroupTabInput, pager model.PagerInput, order *string) int
		GetPrjMilestoneTab                       func(childComplexity int, id *int, query *model.PrjMilestoneTabInput) int
		GetPrjMilestoneTabs                      func(childComplexity int, query *model.PrjMilestoneTabInput, pager model.PagerInput, order *string) int
		GetPrjMilestoneTabsForPager              func(childComplexity int, query *model.PrjMilestoneTabInput, pager model.PagerInput, order *string) int
		GetPrjProjectDepartmentTab               func(childComplexity int, id *int, query *model.PrjProjectDepartmentTabInput) int
		GetPrjProjectDepartmentTabs              func(childComplexity int, query *model.PrjProjectDepartmentTabInput, pager model.PagerInput, order *string) int
		GetPrjProjectDepartmentTabsForPager      func(childComplexity int, query *model.PrjProjectDepartmentTabInput, pager model.PagerInput, order *string) int
		GetPrjProjectTab                         func(childComplexity int, id *int, query *model.PrjProjectTabInput) int
		GetPrjProjectTabs                        func(childComplexity int, query *model.PrjProjectTabInput, pager model.PagerInput, order *string) int
		GetPrjProjectTabsForPager                func(childComplexity int, query *model.PrjProjectTabInput, pager model.PagerInput, order *string) int
		GetPrjProjectUserTab                     func(childComplexity int, id *int, query *model.PrjProjectUserTabInput) int
		GetPrjProjectUserTabs                    func(childComplexity int, query *model.PrjProjectUserTabInput, pager model.PagerInput, order *string) int
		GetPrjProjectUserTabsForPager            func(childComplexity int, query *model.PrjProjectUserTabInput, pager model.PagerInput, order *string) int
		GetPrjReqFlowTab                         func(childComplexity int, id *int, query *model.PrjReqFlowTabInput) int
		GetPrjReqFlowTabs                        func(childComplexity int, query *model.PrjReqFlowTabInput, pager model.PagerInput, order *string) int
		GetPrjReqFlowTabsForPager                func(childComplexity int, query *model.PrjReqFlowTabInput, pager model.PagerInput, order *string) int
		GetPrjRequirementRelatedTab              func(childComplexity int, id *int, query *model.PrjRequirementRelatedTabInput) int
		GetPrjRequirementRelatedTabs             func(childComplexity int, query *model.PrjRequirementRelatedTabInput, pager model.PagerInput, order *string) int
		GetPrjRequirementRelatedTabsForPager     func(childComplexity int, query *model.PrjRequirementRelatedTabInput, pager model.PagerInput, order *string) int
		GetPrjRequirementTab                     func(childComplexity int, id *int, query *model.PrjRequirementTabInput) int
		GetPrjRequirementTabs                    func(childComplexity int, query *model.PrjRequirementTabInput, pager model.PagerInput, order *string) int
		GetPrjRequirementTabsForPager            func(childComplexity int, query *model.PrjRequirementTabInput, pager model.PagerInput, order *string) int
		GetPrjRiskTab                            func(childComplexity int, id *int, query *model.PrjRiskTabInput) int
		GetPrjRiskTabs                           func(childComplexity int, query *model.PrjRiskTabInput, pager model.PagerInput, order *string) int
		GetPrjRiskTabsForPager                   func(childComplexity int, query *model.PrjRiskTabInput, pager model.PagerInput, order *string) int
		GetPrjUserTaskdetailTemplateTab          func(childComplexity int, id *int, query *model.PrjUserTaskdetailTemplateTabInput) int
		GetPrjUserTaskdetailTemplateTabs         func(childComplexity int, query *model.PrjUserTaskdetailTemplateTabInput, pager model.PagerInput, order *string) int
		GetPrjUserTaskdetailTemplateTabsForPager func(childComplexity int, query *model.PrjUserTaskdetailTemplateTabInput, pager model.PagerInput, order *string) int
	}

	ReqPoolTaskData struct {
		TaskList func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	ReqPoolTaskInfo struct {
		Assignee            func(childComplexity int) int
		Be                  func(childComplexity int) int
		BeExpectDuration    func(childComplexity int) int
		Ctime               func(childComplexity int) int
		Description         func(childComplexity int) int
		DueDate             func(childComplexity int) int
		Fe                  func(childComplexity int) int
		FeExpectDuration    func(childComplexity int) int
		FixVersion          func(childComplexity int) int
		FlowState           func(childComplexity int) int
		ID                  func(childComplexity int) int
		JiraBoard           func(childComplexity int) int
		JiraID              func(childComplexity int) int
		JiraKey             func(childComplexity int) int
		JiraType            func(childComplexity int) int
		Labels              func(childComplexity int) int
		Mtime               func(childComplexity int) int
		Other               func(childComplexity int) int
		OtherExpectDuration func(childComplexity int) int
		Pd                  func(childComplexity int) int
		PdExpectDuration    func(childComplexity int) int
		Priority            func(childComplexity int) int
		ProjectID           func(childComplexity int) int
		Qa                  func(childComplexity int) int
		QaExpectDuration    func(childComplexity int) int
		RelatedTask         func(childComplexity int) int
		Remark              func(childComplexity int) int
		Reporter            func(childComplexity int) int
		ReqType             func(childComplexity int) int
		SonTask             func(childComplexity int) int
		StartDate           func(childComplexity int) int
		StoryPoints         func(childComplexity int) int
		SubtaskStorypoints  func(childComplexity int) int
		Summary             func(childComplexity int) int
		TaskParentJiraID    func(childComplexity int) int
		TaskParentJiraKey   func(childComplexity int) int
	}

	RiskInfo struct {
		EndTime   func(childComplexity int) int
		Owner     func(childComplexity int) int
		PreRiskID func(childComplexity int) int
		ProjectID func(childComplexity int) int
		Remark    func(childComplexity int) int
		RiskLevel func(childComplexity int) int
		RiskType  func(childComplexity int) int
		Solution  func(childComplexity int) int
		State     func(childComplexity int) int
		Title     func(childComplexity int) int
	}

	User struct {
		ProductLine func(childComplexity int) int
		Role        func(childComplexity int) int
		Team        func(childComplexity int) int
		UserEmail   func(childComplexity int) int
		UserName    func(childComplexity int) int
	}

	UserTaskNumInfo struct {
		UnscheduledSubtasknum func(childComplexity int) int
		UserEmail             func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreatePrjChangeRecordTab(ctx context.Context, input model.PrjChangeRecordTabInput) (*model.PrjChangeRecordTab, error)
	UpdatePrjChangeRecordTab(ctx context.Context, id int, input model.PrjChangeRecordTabInput) (*model.PrjChangeRecordTab, error)
	CreatePrjGanttGroupDepartmentTab(ctx context.Context, input model.PrjGanttGroupDepartmentTabInput) (*model.PrjGanttGroupDepartmentTab, error)
	UpdatePrjGanttGroupDepartmentTab(ctx context.Context, id int, input model.PrjGanttGroupDepartmentTabInput) (*model.PrjGanttGroupDepartmentTab, error)
	CreatePrjGanttGroupMemberTab(ctx context.Context, input model.PrjGanttGroupMemberTabInput) (*model.PrjGanttGroupMemberTab, error)
	UpdatePrjGanttGroupMemberTab(ctx context.Context, id int, input model.PrjGanttGroupMemberTabInput) (*model.PrjGanttGroupMemberTab, error)
	CreatePrjGanttGroupTab(ctx context.Context, input model.PrjGanttGroupTabInput) (*model.PrjGanttGroupTab, error)
	UpdatePrjGanttGroupTab(ctx context.Context, id int, input model.PrjGanttGroupTabInput) (*model.PrjGanttGroupTab, error)
	CreatePrjMilestoneTab(ctx context.Context, input model.PrjMilestoneTabInput) (*model.PrjMilestoneTab, error)
	UpdatePrjMilestoneTab(ctx context.Context, id int, input model.PrjMilestoneTabInput) (*model.PrjMilestoneTab, error)
	CreatePrjProjectDepartmentTab(ctx context.Context, input model.PrjProjectDepartmentTabInput) (*model.PrjProjectDepartmentTab, error)
	UpdatePrjProjectDepartmentTab(ctx context.Context, id int, input model.PrjProjectDepartmentTabInput) (*model.PrjProjectDepartmentTab, error)
	CreatePrjProjectTab(ctx context.Context, input model.PrjProjectTabInput) (*model.PrjProjectTab, error)
	UpdatePrjProjectTab(ctx context.Context, id int, input model.PrjProjectTabInput) (*model.PrjProjectTab, error)
	CreatePrjProjectUserTab(ctx context.Context, input model.PrjProjectUserTabInput) (*model.PrjProjectUserTab, error)
	UpdatePrjProjectUserTab(ctx context.Context, id int, input model.PrjProjectUserTabInput) (*model.PrjProjectUserTab, error)
	CreatePrjRequirementRelatedTab(ctx context.Context, input model.PrjRequirementRelatedTabInput) (*model.PrjRequirementRelatedTab, error)
	UpdatePrjRequirementRelatedTab(ctx context.Context, id int, input model.PrjRequirementRelatedTabInput) (*model.PrjRequirementRelatedTab, error)
	CreatePrjRequirementTab(ctx context.Context, input model.PrjRequirementTabInput) (*model.PrjRequirementTab, error)
	UpdatePrjRequirementTab(ctx context.Context, id int, input model.PrjRequirementTabInput) (*model.PrjRequirementTab, error)
	CreatePrjReqFlowTab(ctx context.Context, input model.PrjReqFlowTabInput) (*model.PrjReqFlowTab, error)
	UpdatePrjReqFlowTab(ctx context.Context, id int, input model.PrjReqFlowTabInput) (*model.PrjReqFlowTab, error)
	CreatePrjRiskTab(ctx context.Context, input model.PrjRiskTabInput) (*model.PrjRiskTab, error)
	UpdatePrjRiskTab(ctx context.Context, id int, input model.PrjRiskTabInput) (*model.PrjRiskTab, error)
	CreatePrjUserTaskdetailTemplateTab(ctx context.Context, input model.PrjUserTaskdetailTemplateTabInput) (*model.PrjUserTaskdetailTemplateTab, error)
	UpdatePrjUserTaskdetailTemplateTab(ctx context.Context, id int, input model.PrjUserTaskdetailTemplateTabInput) (*model.PrjUserTaskdetailTemplateTab, error)
	BizCreateMilestone(ctx context.Context, projectID int, input model.MilestoneInput) (*bool, error)
	BizUpdateMilestone(ctx context.Context, milestoneID int, input model.UpdateMilestoneInput) (*bool, error)
	BizDeleteMilestone(ctx context.Context, projectID int, milestoneID int) (*bool, error)
	BizCreateMilestoneTpl(ctx context.Context, projectID int) (*bool, error)
	BizCreateTask(ctx context.Context, input model.ReqPoolTaskAddInput) (*bool, error)
	BizUpdateTask(ctx context.Context, input []*model.ReqPoolTaskEditInput) (*bool, error)
	BizCreateRisk(ctx context.Context, projectID int, input model.RiskAddInput) (*bool, error)
	BizUpdateRisk(ctx context.Context, projectID int, input model.RiskUpdateInput) (*bool, error)
	BizCreateProject(ctx context.Context, input model.ProjectInput) (*bool, error)
	BizUpdateProject(ctx context.Context, projectID int, input model.UpdateProjectInput) (*bool, error)
	BizUpdateProjectState(ctx context.Context, projectID int, input model.UpdateProjectStateInput) (*bool, error)
	BizDeleteProject(ctx context.Context, projectID int) (*bool, error)
	BizAddProjectMembers(ctx context.Context, input *model.AddProjectMemberInput) (*bool, error)
	BizUpdateProjectMember(ctx context.Context, input *model.UpdateProjectMemberInput) (*bool, error)
	BizDeleteProjectMembers(ctx context.Context, input *model.DeleteProjectMemberInput) (*bool, error)
	BizEarmakedImportTaskList(ctx context.Context, projectID int, jiraKeyList []string) (*bool, error)
	BizEarmakedCreateTask(ctx context.Context, input model.ReqPoolTaskAddInput) (*bool, error)
	BizEarmakedDeleteTask(ctx context.Context, projectID int, jiraKey string) (*bool, error)
	BizCreateGanttGroup(ctx context.Context, input model.GanttGroupInput) (*bool, error)
	BizUpdateGanttGroup(ctx context.Context, ganttGroupID int, input model.GanttGroupInput) (*model.GanttGroupDetail, error)
	BizDeleteGanttGroup(ctx context.Context, ganttGroupID int) (*model.GanttGroupDetail, error)
	BizAddGanttGroupMembers(ctx context.Context, input *model.GanttGroupMemberInput) ([]*model.PrjGanttGroupMemberTab, error)
	BizDeleteGanttGroupMembers(ctx context.Context, input *model.DeleteGanttGroupMembersInput) ([]string, error)
	BizCreateSubtask(ctx context.Context, input model.PrjSubtaskAddInput) (*model.PrjSubtaskInfo, error)
	BizUpdateSubtask(ctx context.Context, input []*model.PrjSubtaskEditInput) ([]*model.PrjSubtaskInfo, error)
}
type QueryResolver interface {
	GetPrjChangeRecordTabsForPager(ctx context.Context, query *model.PrjChangeRecordTabInput, pager model.PagerInput, order *string) (*model.PrjChangeRecordTabPagerInfo, error)
	GetPrjChangeRecordTabs(ctx context.Context, query *model.PrjChangeRecordTabInput, pager model.PagerInput, order *string) ([]*model.PrjChangeRecordTab, error)
	GetPrjChangeRecordTab(ctx context.Context, id *int, query *model.PrjChangeRecordTabInput) (*model.PrjChangeRecordTab, error)
	GetPrjGanttGroupDepartmentTabsForPager(ctx context.Context, query *model.PrjGanttGroupDepartmentTabInput, pager model.PagerInput, order *string) (*model.PrjGanttGroupDepartmentTabPagerInfo, error)
	GetPrjGanttGroupDepartmentTabs(ctx context.Context, query *model.PrjGanttGroupDepartmentTabInput, pager model.PagerInput, order *string) ([]*model.PrjGanttGroupDepartmentTab, error)
	GetPrjGanttGroupDepartmentTab(ctx context.Context, id *int, query *model.PrjGanttGroupDepartmentTabInput) (*model.PrjGanttGroupDepartmentTab, error)
	GetPrjGanttGroupMemberTabsForPager(ctx context.Context, query *model.PrjGanttGroupMemberTabInput, pager model.PagerInput, order *string) (*model.PrjGanttGroupMemberTabPagerInfo, error)
	GetPrjGanttGroupMemberTabs(ctx context.Context, query *model.PrjGanttGroupMemberTabInput, pager model.PagerInput, order *string) ([]*model.PrjGanttGroupMemberTab, error)
	GetPrjGanttGroupMemberTab(ctx context.Context, id *int, query *model.PrjGanttGroupMemberTabInput) (*model.PrjGanttGroupMemberTab, error)
	GetPrjGanttGroupTabsForPager(ctx context.Context, query *model.PrjGanttGroupTabInput, pager model.PagerInput, order *string) (*model.PrjGanttGroupTabPagerInfo, error)
	GetPrjGanttGroupTabs(ctx context.Context, query *model.PrjGanttGroupTabInput, pager model.PagerInput, order *string) ([]*model.PrjGanttGroupTab, error)
	GetPrjGanttGroupTab(ctx context.Context, id *int, query *model.PrjGanttGroupTabInput) (*model.PrjGanttGroupTab, error)
	GetPrjMilestoneTabsForPager(ctx context.Context, query *model.PrjMilestoneTabInput, pager model.PagerInput, order *string) (*model.PrjMilestoneTabPagerInfo, error)
	GetPrjMilestoneTabs(ctx context.Context, query *model.PrjMilestoneTabInput, pager model.PagerInput, order *string) ([]*model.PrjMilestoneTab, error)
	GetPrjMilestoneTab(ctx context.Context, id *int, query *model.PrjMilestoneTabInput) (*model.PrjMilestoneTab, error)
	GetPrjProjectDepartmentTabsForPager(ctx context.Context, query *model.PrjProjectDepartmentTabInput, pager model.PagerInput, order *string) (*model.PrjProjectDepartmentTabPagerInfo, error)
	GetPrjProjectDepartmentTabs(ctx context.Context, query *model.PrjProjectDepartmentTabInput, pager model.PagerInput, order *string) ([]*model.PrjProjectDepartmentTab, error)
	GetPrjProjectDepartmentTab(ctx context.Context, id *int, query *model.PrjProjectDepartmentTabInput) (*model.PrjProjectDepartmentTab, error)
	GetPrjProjectTabsForPager(ctx context.Context, query *model.PrjProjectTabInput, pager model.PagerInput, order *string) (*model.PrjProjectTabPagerInfo, error)
	GetPrjProjectTabs(ctx context.Context, query *model.PrjProjectTabInput, pager model.PagerInput, order *string) ([]*model.PrjProjectTab, error)
	GetPrjProjectTab(ctx context.Context, id *int, query *model.PrjProjectTabInput) (*model.PrjProjectTab, error)
	GetPrjProjectUserTabsForPager(ctx context.Context, query *model.PrjProjectUserTabInput, pager model.PagerInput, order *string) (*model.PrjProjectUserTabPagerInfo, error)
	GetPrjProjectUserTabs(ctx context.Context, query *model.PrjProjectUserTabInput, pager model.PagerInput, order *string) ([]*model.PrjProjectUserTab, error)
	GetPrjProjectUserTab(ctx context.Context, id *int, query *model.PrjProjectUserTabInput) (*model.PrjProjectUserTab, error)
	GetPrjRequirementRelatedTabsForPager(ctx context.Context, query *model.PrjRequirementRelatedTabInput, pager model.PagerInput, order *string) (*model.PrjRequirementRelatedTabPagerInfo, error)
	GetPrjRequirementRelatedTabs(ctx context.Context, query *model.PrjRequirementRelatedTabInput, pager model.PagerInput, order *string) ([]*model.PrjRequirementRelatedTab, error)
	GetPrjRequirementRelatedTab(ctx context.Context, id *int, query *model.PrjRequirementRelatedTabInput) (*model.PrjRequirementRelatedTab, error)
	GetPrjRequirementTabsForPager(ctx context.Context, query *model.PrjRequirementTabInput, pager model.PagerInput, order *string) (*model.PrjRequirementTabPagerInfo, error)
	GetPrjRequirementTabs(ctx context.Context, query *model.PrjRequirementTabInput, pager model.PagerInput, order *string) ([]*model.PrjRequirementTab, error)
	GetPrjRequirementTab(ctx context.Context, id *int, query *model.PrjRequirementTabInput) (*model.PrjRequirementTab, error)
	GetPrjReqFlowTabsForPager(ctx context.Context, query *model.PrjReqFlowTabInput, pager model.PagerInput, order *string) (*model.PrjReqFlowTabPagerInfo, error)
	GetPrjReqFlowTabs(ctx context.Context, query *model.PrjReqFlowTabInput, pager model.PagerInput, order *string) ([]*model.PrjReqFlowTab, error)
	GetPrjReqFlowTab(ctx context.Context, id *int, query *model.PrjReqFlowTabInput) (*model.PrjReqFlowTab, error)
	GetPrjRiskTabsForPager(ctx context.Context, query *model.PrjRiskTabInput, pager model.PagerInput, order *string) (*model.PrjRiskTabPagerInfo, error)
	GetPrjRiskTabs(ctx context.Context, query *model.PrjRiskTabInput, pager model.PagerInput, order *string) ([]*model.PrjRiskTab, error)
	GetPrjRiskTab(ctx context.Context, id *int, query *model.PrjRiskTabInput) (*model.PrjRiskTab, error)
	GetPrjUserTaskdetailTemplateTabsForPager(ctx context.Context, query *model.PrjUserTaskdetailTemplateTabInput, pager model.PagerInput, order *string) (*model.PrjUserTaskdetailTemplateTabPagerInfo, error)
	GetPrjUserTaskdetailTemplateTabs(ctx context.Context, query *model.PrjUserTaskdetailTemplateTabInput, pager model.PagerInput, order *string) ([]*model.PrjUserTaskdetailTemplateTab, error)
	GetPrjUserTaskdetailTemplateTab(ctx context.Context, id *int, query *model.PrjUserTaskdetailTemplateTabInput) (*model.PrjUserTaskdetailTemplateTab, error)
	BizGetEnumsList(ctx context.Context) (*model.EnumsResult, error)
	BizGetMilestoneList(ctx context.Context, projectID int) (*model.MilestonePagerInfo, error)
	BizGetMilestoneChangeHistory(ctx context.Context, projectID int) ([]*model.DataChangeHistory, error)
	BizGetVersions(ctx context.Context) ([]string, error)
	BizGetVersionsByBoards(ctx context.Context, jiraBoards []string) ([]string, error)
	BizGetGroupTaskList(ctx context.Context, input model.ReqPoolTaskInput) (*model.ReqPoolTaskData, error)
	BizGetKanBoardTaskList(ctx context.Context, input model.ReqPoolTasKanBoardInput) (*model.ReqPoolTaskData, error)
	BizGetDmsFlowID(ctx context.Context, input []*model.FlowRelationInput) ([]*model.FlowRelationInfo, error)
	BizGetJiraBoardsTaskList(ctx context.Context, input *model.JiraBoardsTaskInput) ([]*model.ReqPoolTaskInfo, error)
	BizGetRiskList(ctx context.Context, projectID int) ([]*model.RiskInfo, error)
	BizGetProjectDetail(ctx context.Context, projectID int) (*model.ProjectDetail, error)
	BizGetProjectList(ctx context.Context, departmentID string, query model.QueryProjectInput, pager model.PagerFrontInput) (*model.ProjectsPagerInfo, error)
	BizGetProjectMemberList(ctx context.Context, projectID int, query model.QueryProjectMemberInput, pager model.PagerFrontInput) (*model.ProjectMemberPagerInfo, error)
	BizGetProjectMenu(ctx context.Context, projectID int) (*model.ProjectMenuInfo, error)
	BizEarmakedGetTaskLit(ctx context.Context, projectID int) ([]*model.EarmakedPrjTaskInfo, error)
	BizGetGanttGroup(ctx context.Context, ganttGroupID int) (*model.GanttGroupDetail, error)
	BizGetGanttGroupList(ctx context.Context, departmentID string, pager model.PagerFrontInput) (*model.GanttGroupsPagerInfo, error)
	BizGetGanttScheduledSubtaskList(ctx context.Context, ganttGroupID int, startTime string, endTime string) (*model.GanttGroupTaskInfo, error)
	BizGetGanttUnScheduledSubtaskList(ctx context.Context, userEmail string) (*model.GanttGroupTaskInfo, error)
	BizGetGanttTaskList(ctx context.Context, ganttGroupID int, jiraKey *string, pageno int, count int) ([]*model.PrjSubtaskInfo, error)
	BizGetGanttUnScheduledSubtaskNum(ctx context.Context, ganttGroupID int) ([]*model.UserTaskNumInfo, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "CommonEnum.code":
		if e.complexity.CommonEnum.Code == nil {
			break
		}

		return e.complexity.CommonEnum.Code(childComplexity), true

	case "CommonEnum.status_name":
		if e.complexity.CommonEnum.StatusName == nil {
			break
		}

		return e.complexity.CommonEnum.StatusName(childComplexity), true

	case "DataChangeHistory.create_by":
		if e.complexity.DataChangeHistory.CreateBy == nil {
			break
		}

		return e.complexity.DataChangeHistory.CreateBy(childComplexity), true

	case "DataChangeHistory.ctime":
		if e.complexity.DataChangeHistory.Ctime == nil {
			break
		}

		return e.complexity.DataChangeHistory.Ctime(childComplexity), true

	case "DataChangeHistory.field_name":
		if e.complexity.DataChangeHistory.FieldName == nil {
			break
		}

		return e.complexity.DataChangeHistory.FieldName(childComplexity), true

	case "DataChangeHistory.new_value":
		if e.complexity.DataChangeHistory.NewValue == nil {
			break
		}

		return e.complexity.DataChangeHistory.NewValue(childComplexity), true

	case "DataChangeHistory.old_value":
		if e.complexity.DataChangeHistory.OldValue == nil {
			break
		}

		return e.complexity.DataChangeHistory.OldValue(childComplexity), true

	case "DataChangeHistory.oper_type":
		if e.complexity.DataChangeHistory.OperType == nil {
			break
		}

		return e.complexity.DataChangeHistory.OperType(childComplexity), true

	case "DataChangeHistory.record_id":
		if e.complexity.DataChangeHistory.RecordID == nil {
			break
		}

		return e.complexity.DataChangeHistory.RecordID(childComplexity), true

	case "DataChangeHistory.tab_name":
		if e.complexity.DataChangeHistory.TabName == nil {
			break
		}

		return e.complexity.DataChangeHistory.TabName(childComplexity), true

	case "EarmakedPrjTaskInfo.depart_id":
		if e.complexity.EarmakedPrjTaskInfo.DepartID == nil {
			break
		}

		return e.complexity.EarmakedPrjTaskInfo.DepartID(childComplexity), true

	case "EarmakedPrjTaskInfo.depart_name":
		if e.complexity.EarmakedPrjTaskInfo.DepartName == nil {
			break
		}

		return e.complexity.EarmakedPrjTaskInfo.DepartName(childComplexity), true

	case "EarmakedPrjTaskInfo.task_list":
		if e.complexity.EarmakedPrjTaskInfo.TaskList == nil {
			break
		}

		return e.complexity.EarmakedPrjTaskInfo.TaskList(childComplexity), true

	case "EarmakedTaskInfo.info":
		if e.complexity.EarmakedTaskInfo.Info == nil {
			break
		}

		return e.complexity.EarmakedTaskInfo.Info(childComplexity), true

	case "EarmakedTaskInfo.related_task_list":
		if e.complexity.EarmakedTaskInfo.RelatedTaskList == nil {
			break
		}

		return e.complexity.EarmakedTaskInfo.RelatedTaskList(childComplexity), true

	case "EarmakedTaskInfo.subtask_list":
		if e.complexity.EarmakedTaskInfo.SubtaskList == nil {
			break
		}

		return e.complexity.EarmakedTaskInfo.SubtaskList(childComplexity), true

	case "EnumsResult.milestone_state":
		if e.complexity.EnumsResult.MilestoneState == nil {
			break
		}

		return e.complexity.EnumsResult.MilestoneState(childComplexity), true

	case "EnumsResult.prj_flow_close_remark":
		if e.complexity.EnumsResult.PrjFlowCloseRemark == nil {
			break
		}

		return e.complexity.EnumsResult.PrjFlowCloseRemark(childComplexity), true

	case "EnumsResult.prj_flow_status":
		if e.complexity.EnumsResult.PrjFlowStatus == nil {
			break
		}

		return e.complexity.EnumsResult.PrjFlowStatus(childComplexity), true

	case "EnumsResult.prj_member_role":
		if e.complexity.EnumsResult.PrjMemberRole == nil {
			break
		}

		return e.complexity.EnumsResult.PrjMemberRole(childComplexity), true

	case "EnumsResult.prj_progress":
		if e.complexity.EnumsResult.PrjProgress == nil {
			break
		}

		return e.complexity.EnumsResult.PrjProgress(childComplexity), true

	case "EnumsResult.prj_risk":
		if e.complexity.EnumsResult.PrjRisk == nil {
			break
		}

		return e.complexity.EnumsResult.PrjRisk(childComplexity), true

	case "EnumsResult.prj_state":
		if e.complexity.EnumsResult.PrjState == nil {
			break
		}

		return e.complexity.EnumsResult.PrjState(childComplexity), true

	case "EnumsResult.prj_type":
		if e.complexity.EnumsResult.PrjType == nil {
			break
		}

		return e.complexity.EnumsResult.PrjType(childComplexity), true

	case "EnumsResult.req_priority":
		if e.complexity.EnumsResult.ReqPriority == nil {
			break
		}

		return e.complexity.EnumsResult.ReqPriority(childComplexity), true

	case "EnumsResult.req_type":
		if e.complexity.EnumsResult.ReqType == nil {
			break
		}

		return e.complexity.EnumsResult.ReqType(childComplexity), true

	case "EnumsResult.subtask_jira_status":
		if e.complexity.EnumsResult.SubtaskJiraStatus == nil {
			break
		}

		return e.complexity.EnumsResult.SubtaskJiraStatus(childComplexity), true

	case "FlowRelationInfo.flow_id":
		if e.complexity.FlowRelationInfo.FlowID == nil {
			break
		}

		return e.complexity.FlowRelationInfo.FlowID(childComplexity), true

	case "FlowRelationInfo.flow_state":
		if e.complexity.FlowRelationInfo.FlowState == nil {
			break
		}

		return e.complexity.FlowRelationInfo.FlowState(childComplexity), true

	case "FlowRelationInfo.group_id":
		if e.complexity.FlowRelationInfo.GroupID == nil {
			break
		}

		return e.complexity.FlowRelationInfo.GroupID(childComplexity), true

	case "FlowRelationInfo.jira_id":
		if e.complexity.FlowRelationInfo.JiraID == nil {
			break
		}

		return e.complexity.FlowRelationInfo.JiraID(childComplexity), true

	case "FlowRelationInfo.jira_key":
		if e.complexity.FlowRelationInfo.JiraKey == nil {
			break
		}

		return e.complexity.FlowRelationInfo.JiraKey(childComplexity), true

	case "GanttGroupDetail.department_id":
		if e.complexity.GanttGroupDetail.DepartmentID == nil {
			break
		}

		return e.complexity.GanttGroupDetail.DepartmentID(childComplexity), true

	case "GanttGroupDetail.desc":
		if e.complexity.GanttGroupDetail.Desc == nil {
			break
		}

		return e.complexity.GanttGroupDetail.Desc(childComplexity), true

	case "GanttGroupDetail.group_key_id":
		if e.complexity.GanttGroupDetail.GroupKeyID == nil {
			break
		}

		return e.complexity.GanttGroupDetail.GroupKeyID(childComplexity), true

	case "GanttGroupDetail.id":
		if e.complexity.GanttGroupDetail.ID == nil {
			break
		}

		return e.complexity.GanttGroupDetail.ID(childComplexity), true

	case "GanttGroupDetail.member_list":
		if e.complexity.GanttGroupDetail.MemberList == nil {
			break
		}

		return e.complexity.GanttGroupDetail.MemberList(childComplexity), true

	case "GanttGroupDetail.name":
		if e.complexity.GanttGroupDetail.Name == nil {
			break
		}

		return e.complexity.GanttGroupDetail.Name(childComplexity), true

	case "GanttGroupDetail.owner":
		if e.complexity.GanttGroupDetail.Owner == nil {
			break
		}

		return e.complexity.GanttGroupDetail.Owner(childComplexity), true

	case "GanttGroupInfo.desc":
		if e.complexity.GanttGroupInfo.Desc == nil {
			break
		}

		return e.complexity.GanttGroupInfo.Desc(childComplexity), true

	case "GanttGroupInfo.id":
		if e.complexity.GanttGroupInfo.ID == nil {
			break
		}

		return e.complexity.GanttGroupInfo.ID(childComplexity), true

	case "GanttGroupInfo.name":
		if e.complexity.GanttGroupInfo.Name == nil {
			break
		}

		return e.complexity.GanttGroupInfo.Name(childComplexity), true

	case "GanttGroupInfo.owner":
		if e.complexity.GanttGroupInfo.Owner == nil {
			break
		}

		return e.complexity.GanttGroupInfo.Owner(childComplexity), true

	case "GanttGroupMembersPagerInfo.gantt_group_member_list":
		if e.complexity.GanttGroupMembersPagerInfo.GanttGroupMemberList == nil {
			break
		}

		return e.complexity.GanttGroupMembersPagerInfo.GanttGroupMemberList(childComplexity), true

	case "GanttGroupMembersPagerInfo.total":
		if e.complexity.GanttGroupMembersPagerInfo.Total == nil {
			break
		}

		return e.complexity.GanttGroupMembersPagerInfo.Total(childComplexity), true

	case "GanttGroupTaskInfo.member_list":
		if e.complexity.GanttGroupTaskInfo.MemberList == nil {
			break
		}

		return e.complexity.GanttGroupTaskInfo.MemberList(childComplexity), true

	case "GanttGroupTaskInfo.subtask_list":
		if e.complexity.GanttGroupTaskInfo.SubtaskList == nil {
			break
		}

		return e.complexity.GanttGroupTaskInfo.SubtaskList(childComplexity), true

	case "GanttGroupTaskInfo.task_list":
		if e.complexity.GanttGroupTaskInfo.TaskList == nil {
			break
		}

		return e.complexity.GanttGroupTaskInfo.TaskList(childComplexity), true

	case "GanttGroupsPagerInfo.gantt_group_list":
		if e.complexity.GanttGroupsPagerInfo.GanttGroupList == nil {
			break
		}

		return e.complexity.GanttGroupsPagerInfo.GanttGroupList(childComplexity), true

	case "GanttGroupsPagerInfo.total":
		if e.complexity.GanttGroupsPagerInfo.Total == nil {
			break
		}

		return e.complexity.GanttGroupsPagerInfo.Total(childComplexity), true

	case "JiraKeyJiraIdInfo.jira_id":
		if e.complexity.JiraKeyJiraIdInfo.JiraID == nil {
			break
		}

		return e.complexity.JiraKeyJiraIdInfo.JiraID(childComplexity), true

	case "JiraKeyJiraIdInfo.jira_key":
		if e.complexity.JiraKeyJiraIdInfo.JiraKey == nil {
			break
		}

		return e.complexity.JiraKeyJiraIdInfo.JiraKey(childComplexity), true

	case "MilestoneInfo.desc":
		if e.complexity.MilestoneInfo.Desc == nil {
			break
		}

		return e.complexity.MilestoneInfo.Desc(childComplexity), true

	case "MilestoneInfo.id":
		if e.complexity.MilestoneInfo.ID == nil {
			break
		}

		return e.complexity.MilestoneInfo.ID(childComplexity), true

	case "MilestoneInfo.name":
		if e.complexity.MilestoneInfo.Name == nil {
			break
		}

		return e.complexity.MilestoneInfo.Name(childComplexity), true

	case "MilestoneInfo.order_num":
		if e.complexity.MilestoneInfo.OrderNum == nil {
			break
		}

		return e.complexity.MilestoneInfo.OrderNum(childComplexity), true

	case "MilestoneInfo.owner":
		if e.complexity.MilestoneInfo.Owner == nil {
			break
		}

		return e.complexity.MilestoneInfo.Owner(childComplexity), true

	case "MilestoneInfo.plan_end_time":
		if e.complexity.MilestoneInfo.PlanEndTime == nil {
			break
		}

		return e.complexity.MilestoneInfo.PlanEndTime(childComplexity), true

	case "MilestoneInfo.project_id":
		if e.complexity.MilestoneInfo.ProjectID == nil {
			break
		}

		return e.complexity.MilestoneInfo.ProjectID(childComplexity), true

	case "MilestoneInfo.real_end_time":
		if e.complexity.MilestoneInfo.RealEndTime == nil {
			break
		}

		return e.complexity.MilestoneInfo.RealEndTime(childComplexity), true

	case "MilestoneInfo.state":
		if e.complexity.MilestoneInfo.State == nil {
			break
		}

		return e.complexity.MilestoneInfo.State(childComplexity), true

	case "MilestonePagerInfo.milestone_list":
		if e.complexity.MilestonePagerInfo.MilestoneList == nil {
			break
		}

		return e.complexity.MilestonePagerInfo.MilestoneList(childComplexity), true

	case "MilestonePagerInfo.total":
		if e.complexity.MilestonePagerInfo.Total == nil {
			break
		}

		return e.complexity.MilestonePagerInfo.Total(childComplexity), true

	case "Mutation.BizAddGanttGroupMembers":
		if e.complexity.Mutation.BizAddGanttGroupMembers == nil {
			break
		}

		args, err := ec.field_Mutation_BizAddGanttGroupMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizAddGanttGroupMembers(childComplexity, args["input"].(*model.GanttGroupMemberInput)), true

	case "Mutation.BizAddProjectMembers":
		if e.complexity.Mutation.BizAddProjectMembers == nil {
			break
		}

		args, err := ec.field_Mutation_BizAddProjectMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizAddProjectMembers(childComplexity, args["input"].(*model.AddProjectMemberInput)), true

	case "Mutation.BizCreateGanttGroup":
		if e.complexity.Mutation.BizCreateGanttGroup == nil {
			break
		}

		args, err := ec.field_Mutation_BizCreateGanttGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizCreateGanttGroup(childComplexity, args["input"].(model.GanttGroupInput)), true

	case "Mutation.BizCreateMilestone":
		if e.complexity.Mutation.BizCreateMilestone == nil {
			break
		}

		args, err := ec.field_Mutation_BizCreateMilestone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizCreateMilestone(childComplexity, args["project_id"].(int), args["input"].(model.MilestoneInput)), true

	case "Mutation.BizCreateMilestoneTpl":
		if e.complexity.Mutation.BizCreateMilestoneTpl == nil {
			break
		}

		args, err := ec.field_Mutation_BizCreateMilestoneTpl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizCreateMilestoneTpl(childComplexity, args["project_id"].(int)), true

	case "Mutation.BizCreateProject":
		if e.complexity.Mutation.BizCreateProject == nil {
			break
		}

		args, err := ec.field_Mutation_BizCreateProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizCreateProject(childComplexity, args["input"].(model.ProjectInput)), true

	case "Mutation.BizCreateRisk":
		if e.complexity.Mutation.BizCreateRisk == nil {
			break
		}

		args, err := ec.field_Mutation_BizCreateRisk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizCreateRisk(childComplexity, args["project_id"].(int), args["input"].(model.RiskAddInput)), true

	case "Mutation.BizCreateSubtask":
		if e.complexity.Mutation.BizCreateSubtask == nil {
			break
		}

		args, err := ec.field_Mutation_BizCreateSubtask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizCreateSubtask(childComplexity, args["input"].(model.PrjSubtaskAddInput)), true

	case "Mutation.BizCreateTask":
		if e.complexity.Mutation.BizCreateTask == nil {
			break
		}

		args, err := ec.field_Mutation_BizCreateTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizCreateTask(childComplexity, args["input"].(model.ReqPoolTaskAddInput)), true

	case "Mutation.BizDeleteGanttGroup":
		if e.complexity.Mutation.BizDeleteGanttGroup == nil {
			break
		}

		args, err := ec.field_Mutation_BizDeleteGanttGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizDeleteGanttGroup(childComplexity, args["gantt_group_id"].(int)), true

	case "Mutation.BizDeleteGanttGroupMembers":
		if e.complexity.Mutation.BizDeleteGanttGroupMembers == nil {
			break
		}

		args, err := ec.field_Mutation_BizDeleteGanttGroupMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizDeleteGanttGroupMembers(childComplexity, args["input"].(*model.DeleteGanttGroupMembersInput)), true

	case "Mutation.BizDeleteMilestone":
		if e.complexity.Mutation.BizDeleteMilestone == nil {
			break
		}

		args, err := ec.field_Mutation_BizDeleteMilestone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizDeleteMilestone(childComplexity, args["project_id"].(int), args["milestone_id"].(int)), true

	case "Mutation.BizDeleteProject":
		if e.complexity.Mutation.BizDeleteProject == nil {
			break
		}

		args, err := ec.field_Mutation_BizDeleteProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizDeleteProject(childComplexity, args["project_id"].(int)), true

	case "Mutation.BizDeleteProjectMembers":
		if e.complexity.Mutation.BizDeleteProjectMembers == nil {
			break
		}

		args, err := ec.field_Mutation_BizDeleteProjectMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizDeleteProjectMembers(childComplexity, args["input"].(*model.DeleteProjectMemberInput)), true

	case "Mutation.BizEarmakedCreateTask":
		if e.complexity.Mutation.BizEarmakedCreateTask == nil {
			break
		}

		args, err := ec.field_Mutation_BizEarmakedCreateTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizEarmakedCreateTask(childComplexity, args["input"].(model.ReqPoolTaskAddInput)), true

	case "Mutation.BizEarmakedDeleteTask":
		if e.complexity.Mutation.BizEarmakedDeleteTask == nil {
			break
		}

		args, err := ec.field_Mutation_BizEarmakedDeleteTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizEarmakedDeleteTask(childComplexity, args["project_id"].(int), args["jira_key"].(string)), true

	case "Mutation.BizEarmakedImportTaskList":
		if e.complexity.Mutation.BizEarmakedImportTaskList == nil {
			break
		}

		args, err := ec.field_Mutation_BizEarmakedImportTaskList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizEarmakedImportTaskList(childComplexity, args["project_id"].(int), args["jira_key_list"].([]string)), true

	case "Mutation.BizUpdateGanttGroup":
		if e.complexity.Mutation.BizUpdateGanttGroup == nil {
			break
		}

		args, err := ec.field_Mutation_BizUpdateGanttGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizUpdateGanttGroup(childComplexity, args["gantt_group_id"].(int), args["input"].(model.GanttGroupInput)), true

	case "Mutation.BizUpdateMilestone":
		if e.complexity.Mutation.BizUpdateMilestone == nil {
			break
		}

		args, err := ec.field_Mutation_BizUpdateMilestone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizUpdateMilestone(childComplexity, args["milestone_id"].(int), args["input"].(model.UpdateMilestoneInput)), true

	case "Mutation.BizUpdateProject":
		if e.complexity.Mutation.BizUpdateProject == nil {
			break
		}

		args, err := ec.field_Mutation_BizUpdateProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizUpdateProject(childComplexity, args["project_id"].(int), args["input"].(model.UpdateProjectInput)), true

	case "Mutation.BizUpdateProjectMember":
		if e.complexity.Mutation.BizUpdateProjectMember == nil {
			break
		}

		args, err := ec.field_Mutation_BizUpdateProjectMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizUpdateProjectMember(childComplexity, args["input"].(*model.UpdateProjectMemberInput)), true

	case "Mutation.BizUpdateProjectState":
		if e.complexity.Mutation.BizUpdateProjectState == nil {
			break
		}

		args, err := ec.field_Mutation_BizUpdateProjectState_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizUpdateProjectState(childComplexity, args["project_id"].(int), args["input"].(model.UpdateProjectStateInput)), true

	case "Mutation.BizUpdateRisk":
		if e.complexity.Mutation.BizUpdateRisk == nil {
			break
		}

		args, err := ec.field_Mutation_BizUpdateRisk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizUpdateRisk(childComplexity, args["project_id"].(int), args["input"].(model.RiskUpdateInput)), true

	case "Mutation.BizUpdateSubtask":
		if e.complexity.Mutation.BizUpdateSubtask == nil {
			break
		}

		args, err := ec.field_Mutation_BizUpdateSubtask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizUpdateSubtask(childComplexity, args["input"].([]*model.PrjSubtaskEditInput)), true

	case "Mutation.BizUpdateTask":
		if e.complexity.Mutation.BizUpdateTask == nil {
			break
		}

		args, err := ec.field_Mutation_BizUpdateTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BizUpdateTask(childComplexity, args["input"].([]*model.ReqPoolTaskEditInput)), true

	case "Mutation.createPrjChangeRecordTab":
		if e.complexity.Mutation.CreatePrjChangeRecordTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjChangeRecordTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjChangeRecordTab(childComplexity, args["input"].(model.PrjChangeRecordTabInput)), true

	case "Mutation.createPrjGanttGroupDepartmentTab":
		if e.complexity.Mutation.CreatePrjGanttGroupDepartmentTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjGanttGroupDepartmentTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjGanttGroupDepartmentTab(childComplexity, args["input"].(model.PrjGanttGroupDepartmentTabInput)), true

	case "Mutation.createPrjGanttGroupMemberTab":
		if e.complexity.Mutation.CreatePrjGanttGroupMemberTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjGanttGroupMemberTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjGanttGroupMemberTab(childComplexity, args["input"].(model.PrjGanttGroupMemberTabInput)), true

	case "Mutation.createPrjGanttGroupTab":
		if e.complexity.Mutation.CreatePrjGanttGroupTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjGanttGroupTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjGanttGroupTab(childComplexity, args["input"].(model.PrjGanttGroupTabInput)), true

	case "Mutation.createPrjMilestoneTab":
		if e.complexity.Mutation.CreatePrjMilestoneTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjMilestoneTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjMilestoneTab(childComplexity, args["input"].(model.PrjMilestoneTabInput)), true

	case "Mutation.createPrjProjectDepartmentTab":
		if e.complexity.Mutation.CreatePrjProjectDepartmentTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjProjectDepartmentTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjProjectDepartmentTab(childComplexity, args["input"].(model.PrjProjectDepartmentTabInput)), true

	case "Mutation.createPrjProjectTab":
		if e.complexity.Mutation.CreatePrjProjectTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjProjectTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjProjectTab(childComplexity, args["input"].(model.PrjProjectTabInput)), true

	case "Mutation.createPrjProjectUserTab":
		if e.complexity.Mutation.CreatePrjProjectUserTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjProjectUserTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjProjectUserTab(childComplexity, args["input"].(model.PrjProjectUserTabInput)), true

	case "Mutation.createPrjReqFlowTab":
		if e.complexity.Mutation.CreatePrjReqFlowTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjReqFlowTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjReqFlowTab(childComplexity, args["input"].(model.PrjReqFlowTabInput)), true

	case "Mutation.createPrjRequirementRelatedTab":
		if e.complexity.Mutation.CreatePrjRequirementRelatedTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjRequirementRelatedTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjRequirementRelatedTab(childComplexity, args["input"].(model.PrjRequirementRelatedTabInput)), true

	case "Mutation.createPrjRequirementTab":
		if e.complexity.Mutation.CreatePrjRequirementTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjRequirementTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjRequirementTab(childComplexity, args["input"].(model.PrjRequirementTabInput)), true

	case "Mutation.createPrjRiskTab":
		if e.complexity.Mutation.CreatePrjRiskTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjRiskTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjRiskTab(childComplexity, args["input"].(model.PrjRiskTabInput)), true

	case "Mutation.createPrjUserTaskdetailTemplateTab":
		if e.complexity.Mutation.CreatePrjUserTaskdetailTemplateTab == nil {
			break
		}

		args, err := ec.field_Mutation_createPrjUserTaskdetailTemplateTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePrjUserTaskdetailTemplateTab(childComplexity, args["input"].(model.PrjUserTaskdetailTemplateTabInput)), true

	case "Mutation.updatePrjChangeRecordTab":
		if e.complexity.Mutation.UpdatePrjChangeRecordTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjChangeRecordTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjChangeRecordTab(childComplexity, args["id"].(int), args["input"].(model.PrjChangeRecordTabInput)), true

	case "Mutation.updatePrjGanttGroupDepartmentTab":
		if e.complexity.Mutation.UpdatePrjGanttGroupDepartmentTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjGanttGroupDepartmentTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjGanttGroupDepartmentTab(childComplexity, args["id"].(int), args["input"].(model.PrjGanttGroupDepartmentTabInput)), true

	case "Mutation.updatePrjGanttGroupMemberTab":
		if e.complexity.Mutation.UpdatePrjGanttGroupMemberTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjGanttGroupMemberTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjGanttGroupMemberTab(childComplexity, args["id"].(int), args["input"].(model.PrjGanttGroupMemberTabInput)), true

	case "Mutation.updatePrjGanttGroupTab":
		if e.complexity.Mutation.UpdatePrjGanttGroupTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjGanttGroupTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjGanttGroupTab(childComplexity, args["id"].(int), args["input"].(model.PrjGanttGroupTabInput)), true

	case "Mutation.updatePrjMilestoneTab":
		if e.complexity.Mutation.UpdatePrjMilestoneTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjMilestoneTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjMilestoneTab(childComplexity, args["id"].(int), args["input"].(model.PrjMilestoneTabInput)), true

	case "Mutation.updatePrjProjectDepartmentTab":
		if e.complexity.Mutation.UpdatePrjProjectDepartmentTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjProjectDepartmentTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjProjectDepartmentTab(childComplexity, args["id"].(int), args["input"].(model.PrjProjectDepartmentTabInput)), true

	case "Mutation.updatePrjProjectTab":
		if e.complexity.Mutation.UpdatePrjProjectTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjProjectTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjProjectTab(childComplexity, args["id"].(int), args["input"].(model.PrjProjectTabInput)), true

	case "Mutation.updatePrjProjectUserTab":
		if e.complexity.Mutation.UpdatePrjProjectUserTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjProjectUserTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjProjectUserTab(childComplexity, args["id"].(int), args["input"].(model.PrjProjectUserTabInput)), true

	case "Mutation.updatePrjReqFlowTab":
		if e.complexity.Mutation.UpdatePrjReqFlowTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjReqFlowTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjReqFlowTab(childComplexity, args["id"].(int), args["input"].(model.PrjReqFlowTabInput)), true

	case "Mutation.updatePrjRequirementRelatedTab":
		if e.complexity.Mutation.UpdatePrjRequirementRelatedTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjRequirementRelatedTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjRequirementRelatedTab(childComplexity, args["id"].(int), args["input"].(model.PrjRequirementRelatedTabInput)), true

	case "Mutation.updatePrjRequirementTab":
		if e.complexity.Mutation.UpdatePrjRequirementTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjRequirementTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjRequirementTab(childComplexity, args["id"].(int), args["input"].(model.PrjRequirementTabInput)), true

	case "Mutation.updatePrjRiskTab":
		if e.complexity.Mutation.UpdatePrjRiskTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjRiskTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjRiskTab(childComplexity, args["id"].(int), args["input"].(model.PrjRiskTabInput)), true

	case "Mutation.updatePrjUserTaskdetailTemplateTab":
		if e.complexity.Mutation.UpdatePrjUserTaskdetailTemplateTab == nil {
			break
		}

		args, err := ec.field_Mutation_updatePrjUserTaskdetailTemplateTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePrjUserTaskdetailTemplateTab(childComplexity, args["id"].(int), args["input"].(model.PrjUserTaskdetailTemplateTabInput)), true

	case "PrjChangeRecordTab.create_by":
		if e.complexity.PrjChangeRecordTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.CreateBy(childComplexity), true

	case "PrjChangeRecordTab.ctime":
		if e.complexity.PrjChangeRecordTab.Ctime == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.Ctime(childComplexity), true

	case "PrjChangeRecordTab.field_name":
		if e.complexity.PrjChangeRecordTab.FieldName == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.FieldName(childComplexity), true

	case "PrjChangeRecordTab.id":
		if e.complexity.PrjChangeRecordTab.ID == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.ID(childComplexity), true

	case "PrjChangeRecordTab.is_deleted":
		if e.complexity.PrjChangeRecordTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.IsDeleted(childComplexity), true

	case "PrjChangeRecordTab.mtime":
		if e.complexity.PrjChangeRecordTab.Mtime == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.Mtime(childComplexity), true

	case "PrjChangeRecordTab.new_value":
		if e.complexity.PrjChangeRecordTab.NewValue == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.NewValue(childComplexity), true

	case "PrjChangeRecordTab.old_value":
		if e.complexity.PrjChangeRecordTab.OldValue == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.OldValue(childComplexity), true

	case "PrjChangeRecordTab.oper_type":
		if e.complexity.PrjChangeRecordTab.OperType == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.OperType(childComplexity), true

	case "PrjChangeRecordTab.record_id":
		if e.complexity.PrjChangeRecordTab.RecordID == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.RecordID(childComplexity), true

	case "PrjChangeRecordTab.tab_name":
		if e.complexity.PrjChangeRecordTab.TabName == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.TabName(childComplexity), true

	case "PrjChangeRecordTab.update_by":
		if e.complexity.PrjChangeRecordTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjChangeRecordTab.UpdateBy(childComplexity), true

	case "PrjChangeRecordTabPagerInfo.items":
		if e.complexity.PrjChangeRecordTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjChangeRecordTabPagerInfo.Items(childComplexity), true

	case "PrjChangeRecordTabPagerInfo.total":
		if e.complexity.PrjChangeRecordTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjChangeRecordTabPagerInfo.Total(childComplexity), true

	case "PrjGanttGroupDepartmentTab.create_by":
		if e.complexity.PrjGanttGroupDepartmentTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjGanttGroupDepartmentTab.CreateBy(childComplexity), true

	case "PrjGanttGroupDepartmentTab.ctime":
		if e.complexity.PrjGanttGroupDepartmentTab.Ctime == nil {
			break
		}

		return e.complexity.PrjGanttGroupDepartmentTab.Ctime(childComplexity), true

	case "PrjGanttGroupDepartmentTab.department_id":
		if e.complexity.PrjGanttGroupDepartmentTab.DepartmentID == nil {
			break
		}

		return e.complexity.PrjGanttGroupDepartmentTab.DepartmentID(childComplexity), true

	case "PrjGanttGroupDepartmentTab.gantt_group_id":
		if e.complexity.PrjGanttGroupDepartmentTab.GanttGroupID == nil {
			break
		}

		return e.complexity.PrjGanttGroupDepartmentTab.GanttGroupID(childComplexity), true

	case "PrjGanttGroupDepartmentTab.group_key_id":
		if e.complexity.PrjGanttGroupDepartmentTab.GroupKeyID == nil {
			break
		}

		return e.complexity.PrjGanttGroupDepartmentTab.GroupKeyID(childComplexity), true

	case "PrjGanttGroupDepartmentTab.id":
		if e.complexity.PrjGanttGroupDepartmentTab.ID == nil {
			break
		}

		return e.complexity.PrjGanttGroupDepartmentTab.ID(childComplexity), true

	case "PrjGanttGroupDepartmentTab.is_deleted":
		if e.complexity.PrjGanttGroupDepartmentTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjGanttGroupDepartmentTab.IsDeleted(childComplexity), true

	case "PrjGanttGroupDepartmentTab.mtime":
		if e.complexity.PrjGanttGroupDepartmentTab.Mtime == nil {
			break
		}

		return e.complexity.PrjGanttGroupDepartmentTab.Mtime(childComplexity), true

	case "PrjGanttGroupDepartmentTab.update_by":
		if e.complexity.PrjGanttGroupDepartmentTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjGanttGroupDepartmentTab.UpdateBy(childComplexity), true

	case "PrjGanttGroupDepartmentTabPagerInfo.items":
		if e.complexity.PrjGanttGroupDepartmentTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjGanttGroupDepartmentTabPagerInfo.Items(childComplexity), true

	case "PrjGanttGroupDepartmentTabPagerInfo.total":
		if e.complexity.PrjGanttGroupDepartmentTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjGanttGroupDepartmentTabPagerInfo.Total(childComplexity), true

	case "PrjGanttGroupMemberTab.create_by":
		if e.complexity.PrjGanttGroupMemberTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjGanttGroupMemberTab.CreateBy(childComplexity), true

	case "PrjGanttGroupMemberTab.ctime":
		if e.complexity.PrjGanttGroupMemberTab.Ctime == nil {
			break
		}

		return e.complexity.PrjGanttGroupMemberTab.Ctime(childComplexity), true

	case "PrjGanttGroupMemberTab.gantt_group_id":
		if e.complexity.PrjGanttGroupMemberTab.GanttGroupID == nil {
			break
		}

		return e.complexity.PrjGanttGroupMemberTab.GanttGroupID(childComplexity), true

	case "PrjGanttGroupMemberTab.id":
		if e.complexity.PrjGanttGroupMemberTab.ID == nil {
			break
		}

		return e.complexity.PrjGanttGroupMemberTab.ID(childComplexity), true

	case "PrjGanttGroupMemberTab.is_deleted":
		if e.complexity.PrjGanttGroupMemberTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjGanttGroupMemberTab.IsDeleted(childComplexity), true

	case "PrjGanttGroupMemberTab.mtime":
		if e.complexity.PrjGanttGroupMemberTab.Mtime == nil {
			break
		}

		return e.complexity.PrjGanttGroupMemberTab.Mtime(childComplexity), true

	case "PrjGanttGroupMemberTab.update_by":
		if e.complexity.PrjGanttGroupMemberTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjGanttGroupMemberTab.UpdateBy(childComplexity), true

	case "PrjGanttGroupMemberTab.user_email":
		if e.complexity.PrjGanttGroupMemberTab.UserEmail == nil {
			break
		}

		return e.complexity.PrjGanttGroupMemberTab.UserEmail(childComplexity), true

	case "PrjGanttGroupMemberTabPagerInfo.items":
		if e.complexity.PrjGanttGroupMemberTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjGanttGroupMemberTabPagerInfo.Items(childComplexity), true

	case "PrjGanttGroupMemberTabPagerInfo.total":
		if e.complexity.PrjGanttGroupMemberTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjGanttGroupMemberTabPagerInfo.Total(childComplexity), true

	case "PrjGanttGroupTab.create_by":
		if e.complexity.PrjGanttGroupTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjGanttGroupTab.CreateBy(childComplexity), true

	case "PrjGanttGroupTab.ctime":
		if e.complexity.PrjGanttGroupTab.Ctime == nil {
			break
		}

		return e.complexity.PrjGanttGroupTab.Ctime(childComplexity), true

	case "PrjGanttGroupTab.gantt_name":
		if e.complexity.PrjGanttGroupTab.GanttName == nil {
			break
		}

		return e.complexity.PrjGanttGroupTab.GanttName(childComplexity), true

	case "PrjGanttGroupTab.gentt_desc":
		if e.complexity.PrjGanttGroupTab.GenttDesc == nil {
			break
		}

		return e.complexity.PrjGanttGroupTab.GenttDesc(childComplexity), true

	case "PrjGanttGroupTab.id":
		if e.complexity.PrjGanttGroupTab.ID == nil {
			break
		}

		return e.complexity.PrjGanttGroupTab.ID(childComplexity), true

	case "PrjGanttGroupTab.is_deleted":
		if e.complexity.PrjGanttGroupTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjGanttGroupTab.IsDeleted(childComplexity), true

	case "PrjGanttGroupTab.mtime":
		if e.complexity.PrjGanttGroupTab.Mtime == nil {
			break
		}

		return e.complexity.PrjGanttGroupTab.Mtime(childComplexity), true

	case "PrjGanttGroupTab.owner":
		if e.complexity.PrjGanttGroupTab.Owner == nil {
			break
		}

		return e.complexity.PrjGanttGroupTab.Owner(childComplexity), true

	case "PrjGanttGroupTab.update_by":
		if e.complexity.PrjGanttGroupTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjGanttGroupTab.UpdateBy(childComplexity), true

	case "PrjGanttGroupTabPagerInfo.items":
		if e.complexity.PrjGanttGroupTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjGanttGroupTabPagerInfo.Items(childComplexity), true

	case "PrjGanttGroupTabPagerInfo.total":
		if e.complexity.PrjGanttGroupTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjGanttGroupTabPagerInfo.Total(childComplexity), true

	case "PrjMilestoneTab.create_by":
		if e.complexity.PrjMilestoneTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.CreateBy(childComplexity), true

	case "PrjMilestoneTab.ctime":
		if e.complexity.PrjMilestoneTab.Ctime == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.Ctime(childComplexity), true

	case "PrjMilestoneTab.desc":
		if e.complexity.PrjMilestoneTab.Desc == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.Desc(childComplexity), true

	case "PrjMilestoneTab.end_time":
		if e.complexity.PrjMilestoneTab.EndTime == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.EndTime(childComplexity), true

	case "PrjMilestoneTab.id":
		if e.complexity.PrjMilestoneTab.ID == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.ID(childComplexity), true

	case "PrjMilestoneTab.is_deleted":
		if e.complexity.PrjMilestoneTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.IsDeleted(childComplexity), true

	case "PrjMilestoneTab.mtime":
		if e.complexity.PrjMilestoneTab.Mtime == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.Mtime(childComplexity), true

	case "PrjMilestoneTab.name":
		if e.complexity.PrjMilestoneTab.Name == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.Name(childComplexity), true

	case "PrjMilestoneTab.order_num":
		if e.complexity.PrjMilestoneTab.OrderNum == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.OrderNum(childComplexity), true

	case "PrjMilestoneTab.owner":
		if e.complexity.PrjMilestoneTab.Owner == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.Owner(childComplexity), true

	case "PrjMilestoneTab.plan_end_time":
		if e.complexity.PrjMilestoneTab.PlanEndTime == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.PlanEndTime(childComplexity), true

	case "PrjMilestoneTab.project_id":
		if e.complexity.PrjMilestoneTab.ProjectID == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.ProjectID(childComplexity), true

	case "PrjMilestoneTab.real_end_time":
		if e.complexity.PrjMilestoneTab.RealEndTime == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.RealEndTime(childComplexity), true

	case "PrjMilestoneTab.start_time":
		if e.complexity.PrjMilestoneTab.StartTime == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.StartTime(childComplexity), true

	case "PrjMilestoneTab.state":
		if e.complexity.PrjMilestoneTab.State == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.State(childComplexity), true

	case "PrjMilestoneTab.update_by":
		if e.complexity.PrjMilestoneTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjMilestoneTab.UpdateBy(childComplexity), true

	case "PrjMilestoneTabPagerInfo.items":
		if e.complexity.PrjMilestoneTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjMilestoneTabPagerInfo.Items(childComplexity), true

	case "PrjMilestoneTabPagerInfo.total":
		if e.complexity.PrjMilestoneTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjMilestoneTabPagerInfo.Total(childComplexity), true

	case "PrjProjectDepartmentTab.create_by":
		if e.complexity.PrjProjectDepartmentTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjProjectDepartmentTab.CreateBy(childComplexity), true

	case "PrjProjectDepartmentTab.ctime":
		if e.complexity.PrjProjectDepartmentTab.Ctime == nil {
			break
		}

		return e.complexity.PrjProjectDepartmentTab.Ctime(childComplexity), true

	case "PrjProjectDepartmentTab.department_key_id":
		if e.complexity.PrjProjectDepartmentTab.DepartmentKeyID == nil {
			break
		}

		return e.complexity.PrjProjectDepartmentTab.DepartmentKeyID(childComplexity), true

	case "PrjProjectDepartmentTab.group_key_id":
		if e.complexity.PrjProjectDepartmentTab.GroupKeyID == nil {
			break
		}

		return e.complexity.PrjProjectDepartmentTab.GroupKeyID(childComplexity), true

	case "PrjProjectDepartmentTab.id":
		if e.complexity.PrjProjectDepartmentTab.ID == nil {
			break
		}

		return e.complexity.PrjProjectDepartmentTab.ID(childComplexity), true

	case "PrjProjectDepartmentTab.is_deleted":
		if e.complexity.PrjProjectDepartmentTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjProjectDepartmentTab.IsDeleted(childComplexity), true

	case "PrjProjectDepartmentTab.mtime":
		if e.complexity.PrjProjectDepartmentTab.Mtime == nil {
			break
		}

		return e.complexity.PrjProjectDepartmentTab.Mtime(childComplexity), true

	case "PrjProjectDepartmentTab.project_id":
		if e.complexity.PrjProjectDepartmentTab.ProjectID == nil {
			break
		}

		return e.complexity.PrjProjectDepartmentTab.ProjectID(childComplexity), true

	case "PrjProjectDepartmentTab.update_by":
		if e.complexity.PrjProjectDepartmentTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjProjectDepartmentTab.UpdateBy(childComplexity), true

	case "PrjProjectDepartmentTabPagerInfo.items":
		if e.complexity.PrjProjectDepartmentTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjProjectDepartmentTabPagerInfo.Items(childComplexity), true

	case "PrjProjectDepartmentTabPagerInfo.total":
		if e.complexity.PrjProjectDepartmentTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjProjectDepartmentTabPagerInfo.Total(childComplexity), true

	case "PrjProjectTab.create_by":
		if e.complexity.PrjProjectTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjProjectTab.CreateBy(childComplexity), true

	case "PrjProjectTab.ctime":
		if e.complexity.PrjProjectTab.Ctime == nil {
			break
		}

		return e.complexity.PrjProjectTab.Ctime(childComplexity), true

	case "PrjProjectTab.description":
		if e.complexity.PrjProjectTab.Description == nil {
			break
		}

		return e.complexity.PrjProjectTab.Description(childComplexity), true

	case "PrjProjectTab.end_time":
		if e.complexity.PrjProjectTab.EndTime == nil {
			break
		}

		return e.complexity.PrjProjectTab.EndTime(childComplexity), true

	case "PrjProjectTab.id":
		if e.complexity.PrjProjectTab.ID == nil {
			break
		}

		return e.complexity.PrjProjectTab.ID(childComplexity), true

	case "PrjProjectTab.is_deleted":
		if e.complexity.PrjProjectTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjProjectTab.IsDeleted(childComplexity), true

	case "PrjProjectTab.mtime":
		if e.complexity.PrjProjectTab.Mtime == nil {
			break
		}

		return e.complexity.PrjProjectTab.Mtime(childComplexity), true

	case "PrjProjectTab.name":
		if e.complexity.PrjProjectTab.Name == nil {
			break
		}

		return e.complexity.PrjProjectTab.Name(childComplexity), true

	case "PrjProjectTab.owner":
		if e.complexity.PrjProjectTab.Owner == nil {
			break
		}

		return e.complexity.PrjProjectTab.Owner(childComplexity), true

	case "PrjProjectTab.prj_type":
		if e.complexity.PrjProjectTab.PrjType == nil {
			break
		}

		return e.complexity.PrjProjectTab.PrjType(childComplexity), true

	case "PrjProjectTab.progress":
		if e.complexity.PrjProjectTab.Progress == nil {
			break
		}

		return e.complexity.PrjProjectTab.Progress(childComplexity), true

	case "PrjProjectTab.risk":
		if e.complexity.PrjProjectTab.Risk == nil {
			break
		}

		return e.complexity.PrjProjectTab.Risk(childComplexity), true

	case "PrjProjectTab.start_time":
		if e.complexity.PrjProjectTab.StartTime == nil {
			break
		}

		return e.complexity.PrjProjectTab.StartTime(childComplexity), true

	case "PrjProjectTab.state":
		if e.complexity.PrjProjectTab.State == nil {
			break
		}

		return e.complexity.PrjProjectTab.State(childComplexity), true

	case "PrjProjectTab.state_desc":
		if e.complexity.PrjProjectTab.StateDesc == nil {
			break
		}

		return e.complexity.PrjProjectTab.StateDesc(childComplexity), true

	case "PrjProjectTab.update_by":
		if e.complexity.PrjProjectTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjProjectTab.UpdateBy(childComplexity), true

	case "PrjProjectTabPagerInfo.items":
		if e.complexity.PrjProjectTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjProjectTabPagerInfo.Items(childComplexity), true

	case "PrjProjectTabPagerInfo.total":
		if e.complexity.PrjProjectTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjProjectTabPagerInfo.Total(childComplexity), true

	case "PrjProjectUserTab.create_by":
		if e.complexity.PrjProjectUserTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjProjectUserTab.CreateBy(childComplexity), true

	case "PrjProjectUserTab.ctime":
		if e.complexity.PrjProjectUserTab.Ctime == nil {
			break
		}

		return e.complexity.PrjProjectUserTab.Ctime(childComplexity), true

	case "PrjProjectUserTab.id":
		if e.complexity.PrjProjectUserTab.ID == nil {
			break
		}

		return e.complexity.PrjProjectUserTab.ID(childComplexity), true

	case "PrjProjectUserTab.is_deleted":
		if e.complexity.PrjProjectUserTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjProjectUserTab.IsDeleted(childComplexity), true

	case "PrjProjectUserTab.mtime":
		if e.complexity.PrjProjectUserTab.Mtime == nil {
			break
		}

		return e.complexity.PrjProjectUserTab.Mtime(childComplexity), true

	case "PrjProjectUserTab.project_id":
		if e.complexity.PrjProjectUserTab.ProjectID == nil {
			break
		}

		return e.complexity.PrjProjectUserTab.ProjectID(childComplexity), true

	case "PrjProjectUserTab.project_role":
		if e.complexity.PrjProjectUserTab.ProjectRole == nil {
			break
		}

		return e.complexity.PrjProjectUserTab.ProjectRole(childComplexity), true

	case "PrjProjectUserTab.update_by":
		if e.complexity.PrjProjectUserTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjProjectUserTab.UpdateBy(childComplexity), true

	case "PrjProjectUserTab.user_email":
		if e.complexity.PrjProjectUserTab.UserEmail == nil {
			break
		}

		return e.complexity.PrjProjectUserTab.UserEmail(childComplexity), true

	case "PrjProjectUserTabPagerInfo.items":
		if e.complexity.PrjProjectUserTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjProjectUserTabPagerInfo.Items(childComplexity), true

	case "PrjProjectUserTabPagerInfo.total":
		if e.complexity.PrjProjectUserTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjProjectUserTabPagerInfo.Total(childComplexity), true

	case "PrjReqFlowTab.create_by":
		if e.complexity.PrjReqFlowTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjReqFlowTab.CreateBy(childComplexity), true

	case "PrjReqFlowTab.ctime":
		if e.complexity.PrjReqFlowTab.Ctime == nil {
			break
		}

		return e.complexity.PrjReqFlowTab.Ctime(childComplexity), true

	case "PrjReqFlowTab.flow_id":
		if e.complexity.PrjReqFlowTab.FlowID == nil {
			break
		}

		return e.complexity.PrjReqFlowTab.FlowID(childComplexity), true

	case "PrjReqFlowTab.group_id":
		if e.complexity.PrjReqFlowTab.GroupID == nil {
			break
		}

		return e.complexity.PrjReqFlowTab.GroupID(childComplexity), true

	case "PrjReqFlowTab.group_key_id":
		if e.complexity.PrjReqFlowTab.GroupKeyID == nil {
			break
		}

		return e.complexity.PrjReqFlowTab.GroupKeyID(childComplexity), true

	case "PrjReqFlowTab.id":
		if e.complexity.PrjReqFlowTab.ID == nil {
			break
		}

		return e.complexity.PrjReqFlowTab.ID(childComplexity), true

	case "PrjReqFlowTab.is_deleted":
		if e.complexity.PrjReqFlowTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjReqFlowTab.IsDeleted(childComplexity), true

	case "PrjReqFlowTab.jira_id":
		if e.complexity.PrjReqFlowTab.JiraID == nil {
			break
		}

		return e.complexity.PrjReqFlowTab.JiraID(childComplexity), true

	case "PrjReqFlowTab.jira_key":
		if e.complexity.PrjReqFlowTab.JiraKey == nil {
			break
		}

		return e.complexity.PrjReqFlowTab.JiraKey(childComplexity), true

	case "PrjReqFlowTab.mtime":
		if e.complexity.PrjReqFlowTab.Mtime == nil {
			break
		}

		return e.complexity.PrjReqFlowTab.Mtime(childComplexity), true

	case "PrjReqFlowTab.update_by":
		if e.complexity.PrjReqFlowTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjReqFlowTab.UpdateBy(childComplexity), true

	case "PrjReqFlowTabPagerInfo.items":
		if e.complexity.PrjReqFlowTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjReqFlowTabPagerInfo.Items(childComplexity), true

	case "PrjReqFlowTabPagerInfo.total":
		if e.complexity.PrjReqFlowTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjReqFlowTabPagerInfo.Total(childComplexity), true

	case "PrjRequirementRelatedTab.create_by":
		if e.complexity.PrjRequirementRelatedTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.CreateBy(childComplexity), true

	case "PrjRequirementRelatedTab.ctime":
		if e.complexity.PrjRequirementRelatedTab.Ctime == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.Ctime(childComplexity), true

	case "PrjRequirementRelatedTab.id":
		if e.complexity.PrjRequirementRelatedTab.ID == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.ID(childComplexity), true

	case "PrjRequirementRelatedTab.is_deleted":
		if e.complexity.PrjRequirementRelatedTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.IsDeleted(childComplexity), true

	case "PrjRequirementRelatedTab.jira_id":
		if e.complexity.PrjRequirementRelatedTab.JiraID == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.JiraID(childComplexity), true

	case "PrjRequirementRelatedTab.jira_key":
		if e.complexity.PrjRequirementRelatedTab.JiraKey == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.JiraKey(childComplexity), true

	case "PrjRequirementRelatedTab.mtime":
		if e.complexity.PrjRequirementRelatedTab.Mtime == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.Mtime(childComplexity), true

	case "PrjRequirementRelatedTab.related_jira_id":
		if e.complexity.PrjRequirementRelatedTab.RelatedJiraID == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.RelatedJiraID(childComplexity), true

	case "PrjRequirementRelatedTab.related_jira_key":
		if e.complexity.PrjRequirementRelatedTab.RelatedJiraKey == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.RelatedJiraKey(childComplexity), true

	case "PrjRequirementRelatedTab.related_req_id":
		if e.complexity.PrjRequirementRelatedTab.RelatedReqID == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.RelatedReqID(childComplexity), true

	case "PrjRequirementRelatedTab.req_id":
		if e.complexity.PrjRequirementRelatedTab.ReqID == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.ReqID(childComplexity), true

	case "PrjRequirementRelatedTab.update_by":
		if e.complexity.PrjRequirementRelatedTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTab.UpdateBy(childComplexity), true

	case "PrjRequirementRelatedTabPagerInfo.items":
		if e.complexity.PrjRequirementRelatedTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTabPagerInfo.Items(childComplexity), true

	case "PrjRequirementRelatedTabPagerInfo.total":
		if e.complexity.PrjRequirementRelatedTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjRequirementRelatedTabPagerInfo.Total(childComplexity), true

	case "PrjRequirementTab.assignee":
		if e.complexity.PrjRequirementTab.Assignee == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Assignee(childComplexity), true

	case "PrjRequirementTab.be":
		if e.complexity.PrjRequirementTab.Be == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Be(childComplexity), true

	case "PrjRequirementTab.be_expect_duration":
		if e.complexity.PrjRequirementTab.BeExpectDuration == nil {
			break
		}

		return e.complexity.PrjRequirementTab.BeExpectDuration(childComplexity), true

	case "PrjRequirementTab.checklist":
		if e.complexity.PrjRequirementTab.Checklist == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Checklist(childComplexity), true

	case "PrjRequirementTab.create_by":
		if e.complexity.PrjRequirementTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjRequirementTab.CreateBy(childComplexity), true

	case "PrjRequirementTab.creator":
		if e.complexity.PrjRequirementTab.Creator == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Creator(childComplexity), true

	case "PrjRequirementTab.ctime":
		if e.complexity.PrjRequirementTab.Ctime == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Ctime(childComplexity), true

	case "PrjRequirementTab.description":
		if e.complexity.PrjRequirementTab.Description == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Description(childComplexity), true

	case "PrjRequirementTab.dev":
		if e.complexity.PrjRequirementTab.Dev == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Dev(childComplexity), true

	case "PrjRequirementTab.dms_flow_state":
		if e.complexity.PrjRequirementTab.DmsFlowState == nil {
			break
		}

		return e.complexity.PrjRequirementTab.DmsFlowState(childComplexity), true

	case "PrjRequirementTab.end_time":
		if e.complexity.PrjRequirementTab.EndTime == nil {
			break
		}

		return e.complexity.PrjRequirementTab.EndTime(childComplexity), true

	case "PrjRequirementTab.expect_live_date":
		if e.complexity.PrjRequirementTab.ExpectLiveDate == nil {
			break
		}

		return e.complexity.PrjRequirementTab.ExpectLiveDate(childComplexity), true

	case "PrjRequirementTab.expect_prd_date":
		if e.complexity.PrjRequirementTab.ExpectPrdDate == nil {
			break
		}

		return e.complexity.PrjRequirementTab.ExpectPrdDate(childComplexity), true

	case "PrjRequirementTab.expect_uat_date":
		if e.complexity.PrjRequirementTab.ExpectUatDate == nil {
			break
		}

		return e.complexity.PrjRequirementTab.ExpectUatDate(childComplexity), true

	case "PrjRequirementTab.fe":
		if e.complexity.PrjRequirementTab.Fe == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Fe(childComplexity), true

	case "PrjRequirementTab.fe_expect_duration":
		if e.complexity.PrjRequirementTab.FeExpectDuration == nil {
			break
		}

		return e.complexity.PrjRequirementTab.FeExpectDuration(childComplexity), true

	case "PrjRequirementTab.fixversions":
		if e.complexity.PrjRequirementTab.Fixversions == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Fixversions(childComplexity), true

	case "PrjRequirementTab.id":
		if e.complexity.PrjRequirementTab.ID == nil {
			break
		}

		return e.complexity.PrjRequirementTab.ID(childComplexity), true

	case "PrjRequirementTab.is_deleted":
		if e.complexity.PrjRequirementTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjRequirementTab.IsDeleted(childComplexity), true

	case "PrjRequirementTab.jira_board":
		if e.complexity.PrjRequirementTab.JiraBoard == nil {
			break
		}

		return e.complexity.PrjRequirementTab.JiraBoard(childComplexity), true

	case "PrjRequirementTab.jira_id":
		if e.complexity.PrjRequirementTab.JiraID == nil {
			break
		}

		return e.complexity.PrjRequirementTab.JiraID(childComplexity), true

	case "PrjRequirementTab.jira_key":
		if e.complexity.PrjRequirementTab.JiraKey == nil {
			break
		}

		return e.complexity.PrjRequirementTab.JiraKey(childComplexity), true

	case "PrjRequirementTab.jira_type":
		if e.complexity.PrjRequirementTab.JiraType == nil {
			break
		}

		return e.complexity.PrjRequirementTab.JiraType(childComplexity), true

	case "PrjRequirementTab.labels":
		if e.complexity.PrjRequirementTab.Labels == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Labels(childComplexity), true

	case "PrjRequirementTab.mtime":
		if e.complexity.PrjRequirementTab.Mtime == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Mtime(childComplexity), true

	case "PrjRequirementTab.other":
		if e.complexity.PrjRequirementTab.Other == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Other(childComplexity), true

	case "PrjRequirementTab.other_expect_duration":
		if e.complexity.PrjRequirementTab.OtherExpectDuration == nil {
			break
		}

		return e.complexity.PrjRequirementTab.OtherExpectDuration(childComplexity), true

	case "PrjRequirementTab.parent_jira_id":
		if e.complexity.PrjRequirementTab.ParentJiraID == nil {
			break
		}

		return e.complexity.PrjRequirementTab.ParentJiraID(childComplexity), true

	case "PrjRequirementTab.parent_jira_key":
		if e.complexity.PrjRequirementTab.ParentJiraKey == nil {
			break
		}

		return e.complexity.PrjRequirementTab.ParentJiraKey(childComplexity), true

	case "PrjRequirementTab.pd":
		if e.complexity.PrjRequirementTab.Pd == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Pd(childComplexity), true

	case "PrjRequirementTab.pd_expect_duration":
		if e.complexity.PrjRequirementTab.PdExpectDuration == nil {
			break
		}

		return e.complexity.PrjRequirementTab.PdExpectDuration(childComplexity), true

	case "PrjRequirementTab.priority":
		if e.complexity.PrjRequirementTab.Priority == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Priority(childComplexity), true

	case "PrjRequirementTab.prj_flow_state":
		if e.complexity.PrjRequirementTab.PrjFlowState == nil {
			break
		}

		return e.complexity.PrjRequirementTab.PrjFlowState(childComplexity), true

	case "PrjRequirementTab.project_id":
		if e.complexity.PrjRequirementTab.ProjectID == nil {
			break
		}

		return e.complexity.PrjRequirementTab.ProjectID(childComplexity), true

	case "PrjRequirementTab.qa":
		if e.complexity.PrjRequirementTab.Qa == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Qa(childComplexity), true

	case "PrjRequirementTab.qa_expect_duration":
		if e.complexity.PrjRequirementTab.QaExpectDuration == nil {
			break
		}

		return e.complexity.PrjRequirementTab.QaExpectDuration(childComplexity), true

	case "PrjRequirementTab.related_person":
		if e.complexity.PrjRequirementTab.RelatedPerson == nil {
			break
		}

		return e.complexity.PrjRequirementTab.RelatedPerson(childComplexity), true

	case "PrjRequirementTab.remark":
		if e.complexity.PrjRequirementTab.Remark == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Remark(childComplexity), true

	case "PrjRequirementTab.reporter":
		if e.complexity.PrjRequirementTab.Reporter == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Reporter(childComplexity), true

	case "PrjRequirementTab.reports":
		if e.complexity.PrjRequirementTab.Reports == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Reports(childComplexity), true

	case "PrjRequirementTab.req_process":
		if e.complexity.PrjRequirementTab.ReqProcess == nil {
			break
		}

		return e.complexity.PrjRequirementTab.ReqProcess(childComplexity), true

	case "PrjRequirementTab.req_type":
		if e.complexity.PrjRequirementTab.ReqType == nil {
			break
		}

		return e.complexity.PrjRequirementTab.ReqType(childComplexity), true

	case "PrjRequirementTab.start_time":
		if e.complexity.PrjRequirementTab.StartTime == nil {
			break
		}

		return e.complexity.PrjRequirementTab.StartTime(childComplexity), true

	case "PrjRequirementTab.status":
		if e.complexity.PrjRequirementTab.Status == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Status(childComplexity), true

	case "PrjRequirementTab.storypoint":
		if e.complexity.PrjRequirementTab.Storypoint == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Storypoint(childComplexity), true

	case "PrjRequirementTab.subtask_type":
		if e.complexity.PrjRequirementTab.SubtaskType == nil {
			break
		}

		return e.complexity.PrjRequirementTab.SubtaskType(childComplexity), true

	case "PrjRequirementTab.sync_jira_time":
		if e.complexity.PrjRequirementTab.SyncJiraTime == nil {
			break
		}

		return e.complexity.PrjRequirementTab.SyncJiraTime(childComplexity), true

	case "PrjRequirementTab.task_parent_jira_id":
		if e.complexity.PrjRequirementTab.TaskParentJiraID == nil {
			break
		}

		return e.complexity.PrjRequirementTab.TaskParentJiraID(childComplexity), true

	case "PrjRequirementTab.task_parent_jira_key":
		if e.complexity.PrjRequirementTab.TaskParentJiraKey == nil {
			break
		}

		return e.complexity.PrjRequirementTab.TaskParentJiraKey(childComplexity), true

	case "PrjRequirementTab.title":
		if e.complexity.PrjRequirementTab.Title == nil {
			break
		}

		return e.complexity.PrjRequirementTab.Title(childComplexity), true

	case "PrjRequirementTab.update_by":
		if e.complexity.PrjRequirementTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjRequirementTab.UpdateBy(childComplexity), true

	case "PrjRequirementTabPagerInfo.items":
		if e.complexity.PrjRequirementTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjRequirementTabPagerInfo.Items(childComplexity), true

	case "PrjRequirementTabPagerInfo.total":
		if e.complexity.PrjRequirementTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjRequirementTabPagerInfo.Total(childComplexity), true

	case "PrjRiskTab.create_by":
		if e.complexity.PrjRiskTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjRiskTab.CreateBy(childComplexity), true

	case "PrjRiskTab.ctime":
		if e.complexity.PrjRiskTab.Ctime == nil {
			break
		}

		return e.complexity.PrjRiskTab.Ctime(childComplexity), true

	case "PrjRiskTab.end_time":
		if e.complexity.PrjRiskTab.EndTime == nil {
			break
		}

		return e.complexity.PrjRiskTab.EndTime(childComplexity), true

	case "PrjRiskTab.id":
		if e.complexity.PrjRiskTab.ID == nil {
			break
		}

		return e.complexity.PrjRiskTab.ID(childComplexity), true

	case "PrjRiskTab.is_deleted":
		if e.complexity.PrjRiskTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjRiskTab.IsDeleted(childComplexity), true

	case "PrjRiskTab.mtime":
		if e.complexity.PrjRiskTab.Mtime == nil {
			break
		}

		return e.complexity.PrjRiskTab.Mtime(childComplexity), true

	case "PrjRiskTab.owner":
		if e.complexity.PrjRiskTab.Owner == nil {
			break
		}

		return e.complexity.PrjRiskTab.Owner(childComplexity), true

	case "PrjRiskTab.pre_risk_id":
		if e.complexity.PrjRiskTab.PreRiskID == nil {
			break
		}

		return e.complexity.PrjRiskTab.PreRiskID(childComplexity), true

	case "PrjRiskTab.project_id":
		if e.complexity.PrjRiskTab.ProjectID == nil {
			break
		}

		return e.complexity.PrjRiskTab.ProjectID(childComplexity), true

	case "PrjRiskTab.remark":
		if e.complexity.PrjRiskTab.Remark == nil {
			break
		}

		return e.complexity.PrjRiskTab.Remark(childComplexity), true

	case "PrjRiskTab.risk_level":
		if e.complexity.PrjRiskTab.RiskLevel == nil {
			break
		}

		return e.complexity.PrjRiskTab.RiskLevel(childComplexity), true

	case "PrjRiskTab.risk_type":
		if e.complexity.PrjRiskTab.RiskType == nil {
			break
		}

		return e.complexity.PrjRiskTab.RiskType(childComplexity), true

	case "PrjRiskTab.solution":
		if e.complexity.PrjRiskTab.Solution == nil {
			break
		}

		return e.complexity.PrjRiskTab.Solution(childComplexity), true

	case "PrjRiskTab.state":
		if e.complexity.PrjRiskTab.State == nil {
			break
		}

		return e.complexity.PrjRiskTab.State(childComplexity), true

	case "PrjRiskTab.title":
		if e.complexity.PrjRiskTab.Title == nil {
			break
		}

		return e.complexity.PrjRiskTab.Title(childComplexity), true

	case "PrjRiskTab.update_by":
		if e.complexity.PrjRiskTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjRiskTab.UpdateBy(childComplexity), true

	case "PrjRiskTabPagerInfo.items":
		if e.complexity.PrjRiskTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjRiskTabPagerInfo.Items(childComplexity), true

	case "PrjRiskTabPagerInfo.total":
		if e.complexity.PrjRiskTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjRiskTabPagerInfo.Total(childComplexity), true

	case "PrjSubtaskInfo.assignee":
		if e.complexity.PrjSubtaskInfo.Assignee == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.Assignee(childComplexity), true

	case "PrjSubtaskInfo.creator":
		if e.complexity.PrjSubtaskInfo.Creator == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.Creator(childComplexity), true

	case "PrjSubtaskInfo.description":
		if e.complexity.PrjSubtaskInfo.Description == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.Description(childComplexity), true

	case "PrjSubtaskInfo.due_date":
		if e.complexity.PrjSubtaskInfo.DueDate == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.DueDate(childComplexity), true

	case "PrjSubtaskInfo.fix_version":
		if e.complexity.PrjSubtaskInfo.FixVersion == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.FixVersion(childComplexity), true

	case "PrjSubtaskInfo.group_key_id":
		if e.complexity.PrjSubtaskInfo.GroupKeyID == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.GroupKeyID(childComplexity), true

	case "PrjSubtaskInfo.id":
		if e.complexity.PrjSubtaskInfo.ID == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.ID(childComplexity), true

	case "PrjSubtaskInfo.jira_id":
		if e.complexity.PrjSubtaskInfo.JiraID == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.JiraID(childComplexity), true

	case "PrjSubtaskInfo.jira_key":
		if e.complexity.PrjSubtaskInfo.JiraKey == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.JiraKey(childComplexity), true

	case "PrjSubtaskInfo.label":
		if e.complexity.PrjSubtaskInfo.Label == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.Label(childComplexity), true

	case "PrjSubtaskInfo.oper_ret":
		if e.complexity.PrjSubtaskInfo.OperRet == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.OperRet(childComplexity), true

	case "PrjSubtaskInfo.parent_jira_id":
		if e.complexity.PrjSubtaskInfo.ParentJiraID == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.ParentJiraID(childComplexity), true

	case "PrjSubtaskInfo.parent_key":
		if e.complexity.PrjSubtaskInfo.ParentKey == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.ParentKey(childComplexity), true

	case "PrjSubtaskInfo.priority":
		if e.complexity.PrjSubtaskInfo.Priority == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.Priority(childComplexity), true

	case "PrjSubtaskInfo.reporter":
		if e.complexity.PrjSubtaskInfo.Reporter == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.Reporter(childComplexity), true

	case "PrjSubtaskInfo.start_date":
		if e.complexity.PrjSubtaskInfo.StartDate == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.StartDate(childComplexity), true

	case "PrjSubtaskInfo.status":
		if e.complexity.PrjSubtaskInfo.Status == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.Status(childComplexity), true

	case "PrjSubtaskInfo.story_points":
		if e.complexity.PrjSubtaskInfo.StoryPoints == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.StoryPoints(childComplexity), true

	case "PrjSubtaskInfo.subtask_type":
		if e.complexity.PrjSubtaskInfo.SubtaskType == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.SubtaskType(childComplexity), true

	case "PrjSubtaskInfo.task_type":
		if e.complexity.PrjSubtaskInfo.TaskType == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.TaskType(childComplexity), true

	case "PrjSubtaskInfo.title":
		if e.complexity.PrjSubtaskInfo.Title == nil {
			break
		}

		return e.complexity.PrjSubtaskInfo.Title(childComplexity), true

	case "PrjUserTaskdetailTemplateTab.conf":
		if e.complexity.PrjUserTaskdetailTemplateTab.Conf == nil {
			break
		}

		return e.complexity.PrjUserTaskdetailTemplateTab.Conf(childComplexity), true

	case "PrjUserTaskdetailTemplateTab.create_by":
		if e.complexity.PrjUserTaskdetailTemplateTab.CreateBy == nil {
			break
		}

		return e.complexity.PrjUserTaskdetailTemplateTab.CreateBy(childComplexity), true

	case "PrjUserTaskdetailTemplateTab.ctime":
		if e.complexity.PrjUserTaskdetailTemplateTab.Ctime == nil {
			break
		}

		return e.complexity.PrjUserTaskdetailTemplateTab.Ctime(childComplexity), true

	case "PrjUserTaskdetailTemplateTab.id":
		if e.complexity.PrjUserTaskdetailTemplateTab.ID == nil {
			break
		}

		return e.complexity.PrjUserTaskdetailTemplateTab.ID(childComplexity), true

	case "PrjUserTaskdetailTemplateTab.is_deleted":
		if e.complexity.PrjUserTaskdetailTemplateTab.IsDeleted == nil {
			break
		}

		return e.complexity.PrjUserTaskdetailTemplateTab.IsDeleted(childComplexity), true

	case "PrjUserTaskdetailTemplateTab.mtime":
		if e.complexity.PrjUserTaskdetailTemplateTab.Mtime == nil {
			break
		}

		return e.complexity.PrjUserTaskdetailTemplateTab.Mtime(childComplexity), true

	case "PrjUserTaskdetailTemplateTab.update_by":
		if e.complexity.PrjUserTaskdetailTemplateTab.UpdateBy == nil {
			break
		}

		return e.complexity.PrjUserTaskdetailTemplateTab.UpdateBy(childComplexity), true

	case "PrjUserTaskdetailTemplateTab.user_email":
		if e.complexity.PrjUserTaskdetailTemplateTab.UserEmail == nil {
			break
		}

		return e.complexity.PrjUserTaskdetailTemplateTab.UserEmail(childComplexity), true

	case "PrjUserTaskdetailTemplateTabPagerInfo.items":
		if e.complexity.PrjUserTaskdetailTemplateTabPagerInfo.Items == nil {
			break
		}

		return e.complexity.PrjUserTaskdetailTemplateTabPagerInfo.Items(childComplexity), true

	case "PrjUserTaskdetailTemplateTabPagerInfo.total":
		if e.complexity.PrjUserTaskdetailTemplateTabPagerInfo.Total == nil {
			break
		}

		return e.complexity.PrjUserTaskdetailTemplateTabPagerInfo.Total(childComplexity), true

	case "ProjectChangeRecord.change_remark":
		if e.complexity.ProjectChangeRecord.ChangeRemark == nil {
			break
		}

		return e.complexity.ProjectChangeRecord.ChangeRemark(childComplexity), true

	case "ProjectChangeRecord.change_time":
		if e.complexity.ProjectChangeRecord.ChangeTime == nil {
			break
		}

		return e.complexity.ProjectChangeRecord.ChangeTime(childComplexity), true

	case "ProjectChangeRecord.new_risk":
		if e.complexity.ProjectChangeRecord.NewRisk == nil {
			break
		}

		return e.complexity.ProjectChangeRecord.NewRisk(childComplexity), true

	case "ProjectChangeRecord.new_state":
		if e.complexity.ProjectChangeRecord.NewState == nil {
			break
		}

		return e.complexity.ProjectChangeRecord.NewState(childComplexity), true

	case "ProjectChangeRecord.new_state_desc":
		if e.complexity.ProjectChangeRecord.NewStateDesc == nil {
			break
		}

		return e.complexity.ProjectChangeRecord.NewStateDesc(childComplexity), true

	case "ProjectChangeRecord.old_risk":
		if e.complexity.ProjectChangeRecord.OldRisk == nil {
			break
		}

		return e.complexity.ProjectChangeRecord.OldRisk(childComplexity), true

	case "ProjectChangeRecord.old_state":
		if e.complexity.ProjectChangeRecord.OldState == nil {
			break
		}

		return e.complexity.ProjectChangeRecord.OldState(childComplexity), true

	case "ProjectChangeRecord.old_state_desc":
		if e.complexity.ProjectChangeRecord.OldStateDesc == nil {
			break
		}

		return e.complexity.ProjectChangeRecord.OldStateDesc(childComplexity), true

	case "ProjectChangeRecord.operator":
		if e.complexity.ProjectChangeRecord.Operator == nil {
			break
		}

		return e.complexity.ProjectChangeRecord.Operator(childComplexity), true

	case "ProjectDetail.department_id":
		if e.complexity.ProjectDetail.DepartmentID == nil {
			break
		}

		return e.complexity.ProjectDetail.DepartmentID(childComplexity), true

	case "ProjectDetail.desc":
		if e.complexity.ProjectDetail.Desc == nil {
			break
		}

		return e.complexity.ProjectDetail.Desc(childComplexity), true

	case "ProjectDetail.group_key_ids":
		if e.complexity.ProjectDetail.GroupKeyIds == nil {
			break
		}

		return e.complexity.ProjectDetail.GroupKeyIds(childComplexity), true

	case "ProjectDetail.id":
		if e.complexity.ProjectDetail.ID == nil {
			break
		}

		return e.complexity.ProjectDetail.ID(childComplexity), true

	case "ProjectDetail.name":
		if e.complexity.ProjectDetail.Name == nil {
			break
		}

		return e.complexity.ProjectDetail.Name(childComplexity), true

	case "ProjectDetail.owner":
		if e.complexity.ProjectDetail.Owner == nil {
			break
		}

		return e.complexity.ProjectDetail.Owner(childComplexity), true

	case "ProjectDetail.plan_end_date":
		if e.complexity.ProjectDetail.PlanEndDate == nil {
			break
		}

		return e.complexity.ProjectDetail.PlanEndDate(childComplexity), true

	case "ProjectDetail.plan_start_date":
		if e.complexity.ProjectDetail.PlanStartDate == nil {
			break
		}

		return e.complexity.ProjectDetail.PlanStartDate(childComplexity), true

	case "ProjectDetail.progress":
		if e.complexity.ProjectDetail.Progress == nil {
			break
		}

		return e.complexity.ProjectDetail.Progress(childComplexity), true

	case "ProjectDetail.risk":
		if e.complexity.ProjectDetail.Risk == nil {
			break
		}

		return e.complexity.ProjectDetail.Risk(childComplexity), true

	case "ProjectDetail.state":
		if e.complexity.ProjectDetail.State == nil {
			break
		}

		return e.complexity.ProjectDetail.State(childComplexity), true

	case "ProjectDetail.state_desc":
		if e.complexity.ProjectDetail.StateDesc == nil {
			break
		}

		return e.complexity.ProjectDetail.StateDesc(childComplexity), true

	case "ProjectDetail.state_history":
		if e.complexity.ProjectDetail.StateHistory == nil {
			break
		}

		return e.complexity.ProjectDetail.StateHistory(childComplexity), true

	case "ProjectDetail.type":
		if e.complexity.ProjectDetail.Type == nil {
			break
		}

		return e.complexity.ProjectDetail.Type(childComplexity), true

	case "ProjectInfo.desc":
		if e.complexity.ProjectInfo.Desc == nil {
			break
		}

		return e.complexity.ProjectInfo.Desc(childComplexity), true

	case "ProjectInfo.id":
		if e.complexity.ProjectInfo.ID == nil {
			break
		}

		return e.complexity.ProjectInfo.ID(childComplexity), true

	case "ProjectInfo.name":
		if e.complexity.ProjectInfo.Name == nil {
			break
		}

		return e.complexity.ProjectInfo.Name(childComplexity), true

	case "ProjectInfo.owner":
		if e.complexity.ProjectInfo.Owner == nil {
			break
		}

		return e.complexity.ProjectInfo.Owner(childComplexity), true

	case "ProjectInfo.plan_end_date":
		if e.complexity.ProjectInfo.PlanEndDate == nil {
			break
		}

		return e.complexity.ProjectInfo.PlanEndDate(childComplexity), true

	case "ProjectInfo.plan_start_date":
		if e.complexity.ProjectInfo.PlanStartDate == nil {
			break
		}

		return e.complexity.ProjectInfo.PlanStartDate(childComplexity), true

	case "ProjectInfo.progress":
		if e.complexity.ProjectInfo.Progress == nil {
			break
		}

		return e.complexity.ProjectInfo.Progress(childComplexity), true

	case "ProjectInfo.risk":
		if e.complexity.ProjectInfo.Risk == nil {
			break
		}

		return e.complexity.ProjectInfo.Risk(childComplexity), true

	case "ProjectInfo.state":
		if e.complexity.ProjectInfo.State == nil {
			break
		}

		return e.complexity.ProjectInfo.State(childComplexity), true

	case "ProjectMemberInfo.product_line":
		if e.complexity.ProjectMemberInfo.ProductLine == nil {
			break
		}

		return e.complexity.ProjectMemberInfo.ProductLine(childComplexity), true

	case "ProjectMemberInfo.project_role":
		if e.complexity.ProjectMemberInfo.ProjectRole == nil {
			break
		}

		return e.complexity.ProjectMemberInfo.ProjectRole(childComplexity), true

	case "ProjectMemberInfo.role":
		if e.complexity.ProjectMemberInfo.Role == nil {
			break
		}

		return e.complexity.ProjectMemberInfo.Role(childComplexity), true

	case "ProjectMemberInfo.team":
		if e.complexity.ProjectMemberInfo.Team == nil {
			break
		}

		return e.complexity.ProjectMemberInfo.Team(childComplexity), true

	case "ProjectMemberInfo.user_email":
		if e.complexity.ProjectMemberInfo.UserEmail == nil {
			break
		}

		return e.complexity.ProjectMemberInfo.UserEmail(childComplexity), true

	case "ProjectMemberInfo.user_name":
		if e.complexity.ProjectMemberInfo.UserName == nil {
			break
		}

		return e.complexity.ProjectMemberInfo.UserName(childComplexity), true

	case "ProjectMemberPagerInfo.Member_list":
		if e.complexity.ProjectMemberPagerInfo.MemberList == nil {
			break
		}

		return e.complexity.ProjectMemberPagerInfo.MemberList(childComplexity), true

	case "ProjectMemberPagerInfo.total":
		if e.complexity.ProjectMemberPagerInfo.Total == nil {
			break
		}

		return e.complexity.ProjectMemberPagerInfo.Total(childComplexity), true

	case "ProjectMenuInfo.Menu_list":
		if e.complexity.ProjectMenuInfo.MenuList == nil {
			break
		}

		return e.complexity.ProjectMenuInfo.MenuList(childComplexity), true

	case "ProjectsPagerInfo.project_list":
		if e.complexity.ProjectsPagerInfo.ProjectList == nil {
			break
		}

		return e.complexity.ProjectsPagerInfo.ProjectList(childComplexity), true

	case "ProjectsPagerInfo.total":
		if e.complexity.ProjectsPagerInfo.Total == nil {
			break
		}

		return e.complexity.ProjectsPagerInfo.Total(childComplexity), true

	case "Query.BizEarmakedGetTaskLit":
		if e.complexity.Query.BizEarmakedGetTaskLit == nil {
			break
		}

		args, err := ec.field_Query_BizEarmakedGetTaskLit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizEarmakedGetTaskLit(childComplexity, args["project_id"].(int)), true

	case "Query.BizGetDmsFlowId":
		if e.complexity.Query.BizGetDmsFlowID == nil {
			break
		}

		args, err := ec.field_Query_BizGetDmsFlowId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetDmsFlowID(childComplexity, args["input"].([]*model.FlowRelationInput)), true

	case "Query.BizGetEnumsList":
		if e.complexity.Query.BizGetEnumsList == nil {
			break
		}

		return e.complexity.Query.BizGetEnumsList(childComplexity), true

	case "Query.BizGetGanttGroup":
		if e.complexity.Query.BizGetGanttGroup == nil {
			break
		}

		args, err := ec.field_Query_BizGetGanttGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetGanttGroup(childComplexity, args["gantt_group_id"].(int)), true

	case "Query.BizGetGanttGroupList":
		if e.complexity.Query.BizGetGanttGroupList == nil {
			break
		}

		args, err := ec.field_Query_BizGetGanttGroupList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetGanttGroupList(childComplexity, args["department_id"].(string), args["pager"].(model.PagerFrontInput)), true

	case "Query.BizGetGanttScheduledSubtaskList":
		if e.complexity.Query.BizGetGanttScheduledSubtaskList == nil {
			break
		}

		args, err := ec.field_Query_BizGetGanttScheduledSubtaskList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetGanttScheduledSubtaskList(childComplexity, args["gantt_group_id"].(int), args["start_time"].(string), args["end_time"].(string)), true

	case "Query.BizGetGanttTaskList":
		if e.complexity.Query.BizGetGanttTaskList == nil {
			break
		}

		args, err := ec.field_Query_BizGetGanttTaskList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetGanttTaskList(childComplexity, args["gantt_group_id"].(int), args["jira_key"].(*string), args["pageno"].(int), args["count"].(int)), true

	case "Query.BizGetGanttUnScheduledSubtaskList":
		if e.complexity.Query.BizGetGanttUnScheduledSubtaskList == nil {
			break
		}

		args, err := ec.field_Query_BizGetGanttUnScheduledSubtaskList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetGanttUnScheduledSubtaskList(childComplexity, args["user_email"].(string)), true

	case "Query.BizGetGanttUnScheduledSubtaskNum":
		if e.complexity.Query.BizGetGanttUnScheduledSubtaskNum == nil {
			break
		}

		args, err := ec.field_Query_BizGetGanttUnScheduledSubtaskNum_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetGanttUnScheduledSubtaskNum(childComplexity, args["gantt_group_id"].(int)), true

	case "Query.BizGetGroupTaskList":
		if e.complexity.Query.BizGetGroupTaskList == nil {
			break
		}

		args, err := ec.field_Query_BizGetGroupTaskList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetGroupTaskList(childComplexity, args["input"].(model.ReqPoolTaskInput)), true

	case "Query.BizGetJiraBoardsTaskList":
		if e.complexity.Query.BizGetJiraBoardsTaskList == nil {
			break
		}

		args, err := ec.field_Query_BizGetJiraBoardsTaskList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetJiraBoardsTaskList(childComplexity, args["input"].(*model.JiraBoardsTaskInput)), true

	case "Query.BizGetKanBoardTaskList":
		if e.complexity.Query.BizGetKanBoardTaskList == nil {
			break
		}

		args, err := ec.field_Query_BizGetKanBoardTaskList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetKanBoardTaskList(childComplexity, args["input"].(model.ReqPoolTasKanBoardInput)), true

	case "Query.BizGetMilestoneChangeHistory":
		if e.complexity.Query.BizGetMilestoneChangeHistory == nil {
			break
		}

		args, err := ec.field_Query_BizGetMilestoneChangeHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetMilestoneChangeHistory(childComplexity, args["project_id"].(int)), true

	case "Query.BizGetMilestoneList":
		if e.complexity.Query.BizGetMilestoneList == nil {
			break
		}

		args, err := ec.field_Query_BizGetMilestoneList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetMilestoneList(childComplexity, args["project_id"].(int)), true

	case "Query.BizGetProjectDetail":
		if e.complexity.Query.BizGetProjectDetail == nil {
			break
		}

		args, err := ec.field_Query_BizGetProjectDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetProjectDetail(childComplexity, args["project_id"].(int)), true

	case "Query.BizGetProjectList":
		if e.complexity.Query.BizGetProjectList == nil {
			break
		}

		args, err := ec.field_Query_BizGetProjectList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetProjectList(childComplexity, args["department_id"].(string), args["query"].(model.QueryProjectInput), args["pager"].(model.PagerFrontInput)), true

	case "Query.BizGetProjectMemberList":
		if e.complexity.Query.BizGetProjectMemberList == nil {
			break
		}

		args, err := ec.field_Query_BizGetProjectMemberList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetProjectMemberList(childComplexity, args["project_id"].(int), args["query"].(model.QueryProjectMemberInput), args["pager"].(model.PagerFrontInput)), true

	case "Query.BizGetProjectMenu":
		if e.complexity.Query.BizGetProjectMenu == nil {
			break
		}

		args, err := ec.field_Query_BizGetProjectMenu_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetProjectMenu(childComplexity, args["project_id"].(int)), true

	case "Query.BizGetRiskList":
		if e.complexity.Query.BizGetRiskList == nil {
			break
		}

		args, err := ec.field_Query_BizGetRiskList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetRiskList(childComplexity, args["project_id"].(int)), true

	case "Query.BizGetVersions":
		if e.complexity.Query.BizGetVersions == nil {
			break
		}

		return e.complexity.Query.BizGetVersions(childComplexity), true

	case "Query.BizGetVersionsByBoards":
		if e.complexity.Query.BizGetVersionsByBoards == nil {
			break
		}

		args, err := ec.field_Query_BizGetVersionsByBoards_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BizGetVersionsByBoards(childComplexity, args["jira_boards"].([]string)), true

	case "Query.getPrjChangeRecordTab":
		if e.complexity.Query.GetPrjChangeRecordTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjChangeRecordTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjChangeRecordTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjChangeRecordTabInput)), true

	case "Query.getPrjChangeRecordTabs":
		if e.complexity.Query.GetPrjChangeRecordTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjChangeRecordTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjChangeRecordTabs(childComplexity, args["query"].(*model.PrjChangeRecordTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjChangeRecordTabsForPager":
		if e.complexity.Query.GetPrjChangeRecordTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjChangeRecordTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjChangeRecordTabsForPager(childComplexity, args["query"].(*model.PrjChangeRecordTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjGanttGroupDepartmentTab":
		if e.complexity.Query.GetPrjGanttGroupDepartmentTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjGanttGroupDepartmentTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjGanttGroupDepartmentTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjGanttGroupDepartmentTabInput)), true

	case "Query.getPrjGanttGroupDepartmentTabs":
		if e.complexity.Query.GetPrjGanttGroupDepartmentTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjGanttGroupDepartmentTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjGanttGroupDepartmentTabs(childComplexity, args["query"].(*model.PrjGanttGroupDepartmentTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjGanttGroupDepartmentTabsForPager":
		if e.complexity.Query.GetPrjGanttGroupDepartmentTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjGanttGroupDepartmentTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjGanttGroupDepartmentTabsForPager(childComplexity, args["query"].(*model.PrjGanttGroupDepartmentTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjGanttGroupMemberTab":
		if e.complexity.Query.GetPrjGanttGroupMemberTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjGanttGroupMemberTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjGanttGroupMemberTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjGanttGroupMemberTabInput)), true

	case "Query.getPrjGanttGroupMemberTabs":
		if e.complexity.Query.GetPrjGanttGroupMemberTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjGanttGroupMemberTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjGanttGroupMemberTabs(childComplexity, args["query"].(*model.PrjGanttGroupMemberTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjGanttGroupMemberTabsForPager":
		if e.complexity.Query.GetPrjGanttGroupMemberTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjGanttGroupMemberTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjGanttGroupMemberTabsForPager(childComplexity, args["query"].(*model.PrjGanttGroupMemberTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjGanttGroupTab":
		if e.complexity.Query.GetPrjGanttGroupTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjGanttGroupTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjGanttGroupTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjGanttGroupTabInput)), true

	case "Query.getPrjGanttGroupTabs":
		if e.complexity.Query.GetPrjGanttGroupTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjGanttGroupTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjGanttGroupTabs(childComplexity, args["query"].(*model.PrjGanttGroupTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjGanttGroupTabsForPager":
		if e.complexity.Query.GetPrjGanttGroupTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjGanttGroupTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjGanttGroupTabsForPager(childComplexity, args["query"].(*model.PrjGanttGroupTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjMilestoneTab":
		if e.complexity.Query.GetPrjMilestoneTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjMilestoneTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjMilestoneTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjMilestoneTabInput)), true

	case "Query.getPrjMilestoneTabs":
		if e.complexity.Query.GetPrjMilestoneTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjMilestoneTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjMilestoneTabs(childComplexity, args["query"].(*model.PrjMilestoneTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjMilestoneTabsForPager":
		if e.complexity.Query.GetPrjMilestoneTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjMilestoneTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjMilestoneTabsForPager(childComplexity, args["query"].(*model.PrjMilestoneTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjProjectDepartmentTab":
		if e.complexity.Query.GetPrjProjectDepartmentTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjProjectDepartmentTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjProjectDepartmentTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjProjectDepartmentTabInput)), true

	case "Query.getPrjProjectDepartmentTabs":
		if e.complexity.Query.GetPrjProjectDepartmentTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjProjectDepartmentTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjProjectDepartmentTabs(childComplexity, args["query"].(*model.PrjProjectDepartmentTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjProjectDepartmentTabsForPager":
		if e.complexity.Query.GetPrjProjectDepartmentTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjProjectDepartmentTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjProjectDepartmentTabsForPager(childComplexity, args["query"].(*model.PrjProjectDepartmentTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjProjectTab":
		if e.complexity.Query.GetPrjProjectTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjProjectTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjProjectTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjProjectTabInput)), true

	case "Query.getPrjProjectTabs":
		if e.complexity.Query.GetPrjProjectTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjProjectTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjProjectTabs(childComplexity, args["query"].(*model.PrjProjectTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjProjectTabsForPager":
		if e.complexity.Query.GetPrjProjectTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjProjectTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjProjectTabsForPager(childComplexity, args["query"].(*model.PrjProjectTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjProjectUserTab":
		if e.complexity.Query.GetPrjProjectUserTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjProjectUserTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjProjectUserTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjProjectUserTabInput)), true

	case "Query.getPrjProjectUserTabs":
		if e.complexity.Query.GetPrjProjectUserTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjProjectUserTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjProjectUserTabs(childComplexity, args["query"].(*model.PrjProjectUserTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjProjectUserTabsForPager":
		if e.complexity.Query.GetPrjProjectUserTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjProjectUserTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjProjectUserTabsForPager(childComplexity, args["query"].(*model.PrjProjectUserTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjReqFlowTab":
		if e.complexity.Query.GetPrjReqFlowTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjReqFlowTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjReqFlowTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjReqFlowTabInput)), true

	case "Query.getPrjReqFlowTabs":
		if e.complexity.Query.GetPrjReqFlowTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjReqFlowTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjReqFlowTabs(childComplexity, args["query"].(*model.PrjReqFlowTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjReqFlowTabsForPager":
		if e.complexity.Query.GetPrjReqFlowTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjReqFlowTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjReqFlowTabsForPager(childComplexity, args["query"].(*model.PrjReqFlowTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjRequirementRelatedTab":
		if e.complexity.Query.GetPrjRequirementRelatedTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjRequirementRelatedTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjRequirementRelatedTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjRequirementRelatedTabInput)), true

	case "Query.getPrjRequirementRelatedTabs":
		if e.complexity.Query.GetPrjRequirementRelatedTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjRequirementRelatedTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjRequirementRelatedTabs(childComplexity, args["query"].(*model.PrjRequirementRelatedTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjRequirementRelatedTabsForPager":
		if e.complexity.Query.GetPrjRequirementRelatedTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjRequirementRelatedTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjRequirementRelatedTabsForPager(childComplexity, args["query"].(*model.PrjRequirementRelatedTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjRequirementTab":
		if e.complexity.Query.GetPrjRequirementTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjRequirementTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjRequirementTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjRequirementTabInput)), true

	case "Query.getPrjRequirementTabs":
		if e.complexity.Query.GetPrjRequirementTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjRequirementTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjRequirementTabs(childComplexity, args["query"].(*model.PrjRequirementTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjRequirementTabsForPager":
		if e.complexity.Query.GetPrjRequirementTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjRequirementTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjRequirementTabsForPager(childComplexity, args["query"].(*model.PrjRequirementTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjRiskTab":
		if e.complexity.Query.GetPrjRiskTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjRiskTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjRiskTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjRiskTabInput)), true

	case "Query.getPrjRiskTabs":
		if e.complexity.Query.GetPrjRiskTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjRiskTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjRiskTabs(childComplexity, args["query"].(*model.PrjRiskTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjRiskTabsForPager":
		if e.complexity.Query.GetPrjRiskTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjRiskTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjRiskTabsForPager(childComplexity, args["query"].(*model.PrjRiskTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjUserTaskdetailTemplateTab":
		if e.complexity.Query.GetPrjUserTaskdetailTemplateTab == nil {
			break
		}

		args, err := ec.field_Query_getPrjUserTaskdetailTemplateTab_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjUserTaskdetailTemplateTab(childComplexity, args["id"].(*int), args["query"].(*model.PrjUserTaskdetailTemplateTabInput)), true

	case "Query.getPrjUserTaskdetailTemplateTabs":
		if e.complexity.Query.GetPrjUserTaskdetailTemplateTabs == nil {
			break
		}

		args, err := ec.field_Query_getPrjUserTaskdetailTemplateTabs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjUserTaskdetailTemplateTabs(childComplexity, args["query"].(*model.PrjUserTaskdetailTemplateTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "Query.getPrjUserTaskdetailTemplateTabsForPager":
		if e.complexity.Query.GetPrjUserTaskdetailTemplateTabsForPager == nil {
			break
		}

		args, err := ec.field_Query_getPrjUserTaskdetailTemplateTabsForPager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPrjUserTaskdetailTemplateTabsForPager(childComplexity, args["query"].(*model.PrjUserTaskdetailTemplateTabInput), args["pager"].(model.PagerInput), args["order"].(*string)), true

	case "ReqPoolTaskData.task_list":
		if e.complexity.ReqPoolTaskData.TaskList == nil {
			break
		}

		return e.complexity.ReqPoolTaskData.TaskList(childComplexity), true

	case "ReqPoolTaskData.total":
		if e.complexity.ReqPoolTaskData.Total == nil {
			break
		}

		return e.complexity.ReqPoolTaskData.Total(childComplexity), true

	case "ReqPoolTaskInfo.assignee":
		if e.complexity.ReqPoolTaskInfo.Assignee == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Assignee(childComplexity), true

	case "ReqPoolTaskInfo.be":
		if e.complexity.ReqPoolTaskInfo.Be == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Be(childComplexity), true

	case "ReqPoolTaskInfo.be_expect_duration":
		if e.complexity.ReqPoolTaskInfo.BeExpectDuration == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.BeExpectDuration(childComplexity), true

	case "ReqPoolTaskInfo.ctime":
		if e.complexity.ReqPoolTaskInfo.Ctime == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Ctime(childComplexity), true

	case "ReqPoolTaskInfo.description":
		if e.complexity.ReqPoolTaskInfo.Description == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Description(childComplexity), true

	case "ReqPoolTaskInfo.due_date":
		if e.complexity.ReqPoolTaskInfo.DueDate == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.DueDate(childComplexity), true

	case "ReqPoolTaskInfo.fe":
		if e.complexity.ReqPoolTaskInfo.Fe == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Fe(childComplexity), true

	case "ReqPoolTaskInfo.fe_expect_duration":
		if e.complexity.ReqPoolTaskInfo.FeExpectDuration == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.FeExpectDuration(childComplexity), true

	case "ReqPoolTaskInfo.fix_version":
		if e.complexity.ReqPoolTaskInfo.FixVersion == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.FixVersion(childComplexity), true

	case "ReqPoolTaskInfo.flow_state":
		if e.complexity.ReqPoolTaskInfo.FlowState == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.FlowState(childComplexity), true

	case "ReqPoolTaskInfo.id":
		if e.complexity.ReqPoolTaskInfo.ID == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.ID(childComplexity), true

	case "ReqPoolTaskInfo.jira_board":
		if e.complexity.ReqPoolTaskInfo.JiraBoard == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.JiraBoard(childComplexity), true

	case "ReqPoolTaskInfo.jira_id":
		if e.complexity.ReqPoolTaskInfo.JiraID == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.JiraID(childComplexity), true

	case "ReqPoolTaskInfo.jira_key":
		if e.complexity.ReqPoolTaskInfo.JiraKey == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.JiraKey(childComplexity), true

	case "ReqPoolTaskInfo.jira_type":
		if e.complexity.ReqPoolTaskInfo.JiraType == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.JiraType(childComplexity), true

	case "ReqPoolTaskInfo.labels":
		if e.complexity.ReqPoolTaskInfo.Labels == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Labels(childComplexity), true

	case "ReqPoolTaskInfo.mtime":
		if e.complexity.ReqPoolTaskInfo.Mtime == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Mtime(childComplexity), true

	case "ReqPoolTaskInfo.other":
		if e.complexity.ReqPoolTaskInfo.Other == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Other(childComplexity), true

	case "ReqPoolTaskInfo.other_expect_duration":
		if e.complexity.ReqPoolTaskInfo.OtherExpectDuration == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.OtherExpectDuration(childComplexity), true

	case "ReqPoolTaskInfo.pd":
		if e.complexity.ReqPoolTaskInfo.Pd == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Pd(childComplexity), true

	case "ReqPoolTaskInfo.pd_expect_duration":
		if e.complexity.ReqPoolTaskInfo.PdExpectDuration == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.PdExpectDuration(childComplexity), true

	case "ReqPoolTaskInfo.priority":
		if e.complexity.ReqPoolTaskInfo.Priority == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Priority(childComplexity), true

	case "ReqPoolTaskInfo.project_id":
		if e.complexity.ReqPoolTaskInfo.ProjectID == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.ProjectID(childComplexity), true

	case "ReqPoolTaskInfo.qa":
		if e.complexity.ReqPoolTaskInfo.Qa == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Qa(childComplexity), true

	case "ReqPoolTaskInfo.qa_expect_duration":
		if e.complexity.ReqPoolTaskInfo.QaExpectDuration == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.QaExpectDuration(childComplexity), true

	case "ReqPoolTaskInfo.related_task":
		if e.complexity.ReqPoolTaskInfo.RelatedTask == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.RelatedTask(childComplexity), true

	case "ReqPoolTaskInfo.remark":
		if e.complexity.ReqPoolTaskInfo.Remark == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Remark(childComplexity), true

	case "ReqPoolTaskInfo.reporter":
		if e.complexity.ReqPoolTaskInfo.Reporter == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Reporter(childComplexity), true

	case "ReqPoolTaskInfo.req_type":
		if e.complexity.ReqPoolTaskInfo.ReqType == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.ReqType(childComplexity), true

	case "ReqPoolTaskInfo.son_task":
		if e.complexity.ReqPoolTaskInfo.SonTask == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.SonTask(childComplexity), true

	case "ReqPoolTaskInfo.start_date":
		if e.complexity.ReqPoolTaskInfo.StartDate == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.StartDate(childComplexity), true

	case "ReqPoolTaskInfo.story_points":
		if e.complexity.ReqPoolTaskInfo.StoryPoints == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.StoryPoints(childComplexity), true

	case "ReqPoolTaskInfo.subtask_storypoints":
		if e.complexity.ReqPoolTaskInfo.SubtaskStorypoints == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.SubtaskStorypoints(childComplexity), true

	case "ReqPoolTaskInfo.summary":
		if e.complexity.ReqPoolTaskInfo.Summary == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.Summary(childComplexity), true

	case "ReqPoolTaskInfo.task_parent_jira_id":
		if e.complexity.ReqPoolTaskInfo.TaskParentJiraID == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.TaskParentJiraID(childComplexity), true

	case "ReqPoolTaskInfo.task_parent_jira_key":
		if e.complexity.ReqPoolTaskInfo.TaskParentJiraKey == nil {
			break
		}

		return e.complexity.ReqPoolTaskInfo.TaskParentJiraKey(childComplexity), true

	case "RiskInfo.end_time":
		if e.complexity.RiskInfo.EndTime == nil {
			break
		}

		return e.complexity.RiskInfo.EndTime(childComplexity), true

	case "RiskInfo.owner":
		if e.complexity.RiskInfo.Owner == nil {
			break
		}

		return e.complexity.RiskInfo.Owner(childComplexity), true

	case "RiskInfo.pre_risk_id":
		if e.complexity.RiskInfo.PreRiskID == nil {
			break
		}

		return e.complexity.RiskInfo.PreRiskID(childComplexity), true

	case "RiskInfo.project_id":
		if e.complexity.RiskInfo.ProjectID == nil {
			break
		}

		return e.complexity.RiskInfo.ProjectID(childComplexity), true

	case "RiskInfo.remark":
		if e.complexity.RiskInfo.Remark == nil {
			break
		}

		return e.complexity.RiskInfo.Remark(childComplexity), true

	case "RiskInfo.risk_level":
		if e.complexity.RiskInfo.RiskLevel == nil {
			break
		}

		return e.complexity.RiskInfo.RiskLevel(childComplexity), true

	case "RiskInfo.risk_type":
		if e.complexity.RiskInfo.RiskType == nil {
			break
		}

		return e.complexity.RiskInfo.RiskType(childComplexity), true

	case "RiskInfo.solution":
		if e.complexity.RiskInfo.Solution == nil {
			break
		}

		return e.complexity.RiskInfo.Solution(childComplexity), true

	case "RiskInfo.state":
		if e.complexity.RiskInfo.State == nil {
			break
		}

		return e.complexity.RiskInfo.State(childComplexity), true

	case "RiskInfo.title":
		if e.complexity.RiskInfo.Title == nil {
			break
		}

		return e.complexity.RiskInfo.Title(childComplexity), true

	case "User.product_line":
		if e.complexity.User.ProductLine == nil {
			break
		}

		return e.complexity.User.ProductLine(childComplexity), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "User.team":
		if e.complexity.User.Team == nil {
			break
		}

		return e.complexity.User.Team(childComplexity), true

	case "User.user_email":
		if e.complexity.User.UserEmail == nil {
			break
		}

		return e.complexity.User.UserEmail(childComplexity), true

	case "User.user_name":
		if e.complexity.User.UserName == nil {
			break
		}

		return e.complexity.User.UserName(childComplexity), true

	case "UserTaskNumInfo.unscheduled_subtasknum":
		if e.complexity.UserTaskNumInfo.UnscheduledSubtasknum == nil {
			break
		}

		return e.complexity.UserTaskNumInfo.UnscheduledSubtasknum(childComplexity), true

	case "UserTaskNumInfo.user_email":
		if e.complexity.UserTaskNumInfo.UserEmail == nil {
			break
		}

		return e.complexity.UserTaskNumInfo.UserEmail(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schema.graphqls", Input: `input PagerFrontInput {
    pageno:Int!
    count:Int!
}

type User {
    user_email:String!
    user_name:String
    """产品线，对应着二级节点名称"""
    product_line:String
    """小组，对应着三级节点名称"""
    team:String
    """角色，比如BE、FE、QA"""
    role:String
}



input UserInput {
    user_email:String!
    user_name:String
    """产品线，对应着二级节点名称"""
    product_line:String
    """小组，对应着三级节点名称"""
    team:String
    """角色，比如BE、FE、QA"""
    role:String
}

type CommonEnum {
    code:Int!
    status_name:String!
}

type EnumsResult {
    """流程状态"""
    prj_flow_status:[CommonEnum!]
    """流程close的原因类型"""
    prj_flow_close_remark:[CommonEnum!]
    """需求的优先级"""
    req_priority:[CommonEnum!]
    """需求的类型"""
    req_type:[CommonEnum!]
    """subtask jira状态"""
    subtask_jira_status:[CommonEnum!]
    """专项进展"""
    prj_progress:[CommonEnum!]
    """专项状态"""
    prj_state:[CommonEnum!]
    """专项风险"""
    prj_risk:[CommonEnum!]
    """专项类型"""
    prj_type:[CommonEnum!]
    """专项成员角色"""
    prj_member_role:[CommonEnum!]
    """里程碑状态"""
    milestone_state:[CommonEnum!]
}

type DataChangeHistory {
    """数据表名"""
    tab_name:String
    """字段名"""
    field_name:String
    """变更的数据记录ID"""
    record_id:Int
    """操作类型，insert/update/delete"""
    oper_type:String
    """旧值"""
    old_value:String
    """新值"""
    new_value:String
    """操作人"""
    create_by:String
    """操作时间"""
    ctime:Int
}

extend type Query {
    BizGetEnumsList:EnumsResult
}
"""创建/修改里程碑入参"""
input MilestoneInput {
    """里程碑排序号"""
    order_num:Int!
    """里程碑名称"""
    name:String
    """里程碑描述"""
    desc:String
    """里程碑状态"""
    state:Int
    """里程碑负责人"""
    owner:[String!]
    """计划完成时间"""
    plan_end_time:Int
    """实际完成时间"""
    real_end_time:Int
}

"""修改里程碑入参"""
input UpdateMilestoneInput {
    """数据表唯一ID"""
    id:Int!
    """专项id"""
    project_id:Int
    """里程碑排序号"""
    order_num:Int
    """里程碑名称"""
    name:String
    """里程碑描述"""
    desc:String
    """里程碑状态"""
    state:Int
    """里程碑负责人"""
    owner:[String!]
    """计划完成时间"""
    plan_end_time: Int
    """实际完成时间"""
    real_end_time: Int
}

type MilestoneInfo {
    """里程碑id"""
    id:Int!
    """专项id"""
    project_id:Int!
    """里程碑排序号"""
    order_num:Int!
    """里程碑名称"""
    name:String!
    """里程碑描述"""
    desc:String
    """里程碑状态"""
    state:Int!
    """里程碑负责人"""
    owner:[String!]
    """计划完成时间"""
    plan_end_time: Int
    """实际完成时间"""
    real_end_time: Int
}

type MilestonePagerInfo {
    """里程碑列表"""
    milestone_list: [MilestoneInfo!]
    """本次查询返回的里程碑数量"""
    total:Int!
}

extend type Query {
    """获取专项里程碑"""
    BizGetMilestoneList(project_id:Int!):MilestonePagerInfo
    """获取专项里程碑变更记录"""
    BizGetMilestoneChangeHistory(project_id:Int!):[DataChangeHistory]
}

extend type Mutation {
    """新建里程碑"""
    BizCreateMilestone(project_id:Int!, input:MilestoneInput!):Boolean
    """更新里程碑"""
    BizUpdateMilestone(milestone_id:Int!, input:UpdateMilestoneInput!):Boolean
    """删除里程碑"""
    BizDeleteMilestone(project_id:Int!, milestone_id:Int!):Boolean
    """项目默认里程碑模版"""
    BizCreateMilestoneTpl(project_id:Int!):Boolean
}
input JiraKeyJiraIdInput {
    jira_key:String
    jira_id:Int
}

type JiraKeyJiraIdInfo {
    jira_key:String
    jira_id:Int
}

extend type Query {
    BizGetVersions:[String!]
    BizGetVersionsByBoards(jira_boards:[String!]):[String!]
}
type PrjChangeRecordTab  {
         
        """"""
        id:Int
        

        """"""
        tab_name:String
        

        """"""
        field_name:String
        

        """"""
        record_id:Int
        

        """"""
        oper_type:String
        

        """"""
        old_value:String
        

        """"""
        new_value:String
        

        """"""
        create_by:String
        

        """"""
        update_by:String
        

        """"""
        ctime:Int
        

        """"""
        mtime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjChangeRecordTabInput {
           
        """"""
        id:Int
        

        """"""
        tab_name:String
        

        """"""
        field_name:String
        

        """"""
        record_id:Int
        

        """"""
        oper_type:String
        

        """"""
        old_value:String
        

        """"""
        new_value:String
        

        """"""
        create_by:String
        

        """"""
        update_by:String
        

        """"""
        ctime:Int
        

        """"""
        mtime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjChangeRecordTabPagerInfo {
            items:[PrjChangeRecordTab!]
            total:Int!
        }

        
type PrjGanttGroupDepartmentTab  {
         
        """"""
        id:Int
        

        """gantt_group_id"""
        gantt_group_id:Int
        

        """department_id"""
        department_id:String
        

        """group_key_id"""
        group_key_id:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjGanttGroupDepartmentTabInput {
           
        """"""
        id:Int
        

        """gantt_group_id"""
        gantt_group_id:Int
        

        """department_id"""
        department_id:String
        

        """group_key_id"""
        group_key_id:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjGanttGroupDepartmentTabPagerInfo {
            items:[PrjGanttGroupDepartmentTab!]
            total:Int!
        }

        
type PrjGanttGroupMemberTab  {
         
        """"""
        id:Int
        

        """"""
        user_email:String
        

        """"""
        gantt_group_id:Int
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjGanttGroupMemberTabInput {
           
        """"""
        id:Int
        

        """"""
        user_email:String
        

        """"""
        gantt_group_id:Int
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjGanttGroupMemberTabPagerInfo {
            items:[PrjGanttGroupMemberTab!]
            total:Int!
        }

        
type PrjGanttGroupTab  {
         
        """"""
        id:Int
        

        """gantt_name"""
        gantt_name:String
        

        """gentt_desc"""
        gentt_desc:String
        

        """owner"""
        owner:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjGanttGroupTabInput {
           
        """"""
        id:Int
        

        """gantt_name"""
        gantt_name:String
        

        """gentt_desc"""
        gentt_desc:String
        

        """owner"""
        owner:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjGanttGroupTabPagerInfo {
            items:[PrjGanttGroupTab!]
            total:Int!
        }

        
type PrjMilestoneTab  {
         
        """"""
        id:Int
        

        """project_id"""
        project_id:Int
        

        """name"""
        name:String
        

        """owner"""
        owner:String
        

        """order_num"""
        order_num:Int
        

        """"""
        state:Int
        

        """"""
        plan_end_time:Int
        

        """"""
        real_end_time:Int
        

        """start_time"""
        start_time:Int
        

        """end_time"""
        end_time:Int
        

        """desc"""
        desc:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjMilestoneTabInput {
           
        """"""
        id:Int
        

        """project_id"""
        project_id:Int
        

        """name"""
        name:String
        

        """owner"""
        owner:String
        

        """order_num"""
        order_num:Int
        

        """"""
        state:Int
        

        """"""
        plan_end_time:Int
        

        """"""
        real_end_time:Int
        

        """start_time"""
        start_time:Int
        

        """end_time"""
        end_time:Int
        

        """desc"""
        desc:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjMilestoneTabPagerInfo {
            items:[PrjMilestoneTab!]
            total:Int!
        }

        
type PrjProjectDepartmentTab  {
         
        """"""
        id:Int
        

        """"""
        project_id:Int
        

        """department_key_id"""
        department_key_id:String
        

        """group_key_id"""
        group_key_id:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjProjectDepartmentTabInput {
           
        """"""
        id:Int
        

        """"""
        project_id:Int
        

        """department_key_id"""
        department_key_id:String
        

        """group_key_id"""
        group_key_id:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjProjectDepartmentTabPagerInfo {
            items:[PrjProjectDepartmentTab!]
            total:Int!
        }

        
type PrjProjectTab  {
         
        """"""
        id:Int
        

        """name"""
        name:String
        

        """description"""
        description:String
        

        """owner"""
        owner:String
        

        """"""
        progress:Int
        

        """"""
        risk:Int
        

        """state"""
        state:Int
        

        """"""
        state_desc:String
        

        """start_time"""
        start_time:Int
        

        """end_time"""
        end_time:Int
        

        """prj_type"""
        prj_type:Int
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjProjectTabInput {
           
        """"""
        id:Int
        

        """name"""
        name:String
        

        """description"""
        description:String
        

        """owner"""
        owner:String
        

        """"""
        progress:Int
        

        """"""
        risk:Int
        

        """state"""
        state:Int
        

        """"""
        state_desc:String
        

        """start_time"""
        start_time:Int
        

        """end_time"""
        end_time:Int
        

        """prj_type"""
        prj_type:Int
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjProjectTabPagerInfo {
            items:[PrjProjectTab!]
            total:Int!
        }

        
type PrjProjectUserTab  {
         
        """"""
        id:Int
        

        """"""
        project_id:Int
        

        """"""
        user_email:String
        

        """project_role"""
        project_role:Int
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjProjectUserTabInput {
           
        """"""
        id:Int
        

        """"""
        project_id:Int
        

        """"""
        user_email:String
        

        """project_role"""
        project_role:Int
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjProjectUserTabPagerInfo {
            items:[PrjProjectUserTab!]
            total:Int!
        }

        
type PrjRequirementRelatedTab  {
         
        """"""
        id:Int
        

        """"""
        req_id:Int
        

        """"""
        jira_id:Int
        

        """"""
        jira_key:String
        

        """"""
        related_req_id:Int
        

        """"""
        related_jira_id:Int
        

        """"""
        related_jira_key:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjRequirementRelatedTabInput {
           
        """"""
        id:Int
        

        """"""
        req_id:Int
        

        """"""
        jira_id:Int
        

        """"""
        jira_key:String
        

        """"""
        related_req_id:Int
        

        """"""
        related_jira_id:Int
        

        """"""
        related_jira_key:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjRequirementRelatedTabPagerInfo {
            items:[PrjRequirementRelatedTab!]
            total:Int!
        }

        
type PrjRequirementTab  {
         
        """"""
        id:Int
        

        """project_id"""
        project_id:Int
        

        """parent_jira_id"""
        parent_jira_id:Int
        

        """"""
        parent_jira_key:String
        

        """"""
        task_parent_jira_id:Int
        

        """task_parent_jira_key"""
        task_parent_jira_key:String
        

        """"""
        jira_id:Int
        

        """"""
        jira_key:String
        

        """jira_type"""
        jira_type:Int
        

        """jira_board"""
        jira_board:String
        

        """title"""
        title:String
        

        """description"""
        description:String
        

        """备注"""
        remark:String
        

        """priority"""
        priority:Int
        

        """creator"""
        creator:String
        

        """start_time"""
        start_time:Int
        

        """end_time"""
        end_time:Int
        

        """req_process"""
        req_process:Int
        

        """storypoint"""
        storypoint:Int
        

        """status"""
        status:Int
        

        """prj_flow_state"""
        prj_flow_state:Int
        

        """dms_flow_state"""
        dms_flow_state:Int
        

        """req_type"""
        req_type:Int
        

        """subtask_type"""
        subtask_type:Int
        

        """"""
        assignee:String
        

        """"""
        reporter:String
        

        """"""
        dev:String
        

        """"""
        qa:String
        

        """"""
        pd:String
        

        """"""
        be:String
        

        """"""
        fe:String
        

        """"""
        other:String
        

        """"""
        fixversions:String
        

        """"""
        labels:String
        

        """related_person"""
        related_person:String
        

        """"""
        expect_prd_date:Int
        

        """"""
        expect_uat_date:Int
        

        """"""
        expect_live_date:Int
        

        """fe_expect_duration"""
        fe_expect_duration:Int
        

        """be_expect_duration"""
        be_expect_duration:Int
        

        """qa_expect_duration"""
        qa_expect_duration:Int
        

        """"""
        pd_expect_duration:Int
        

        """"""
        other_expect_duration:Int
        

        """"""
        checklist:String
        

        """"""
        reports:String
        

        """"""
        sync_jira_time:Int
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjRequirementTabInput {
           
        """"""
        id:Int
        

        """project_id"""
        project_id:Int
        

        """parent_jira_id"""
        parent_jira_id:Int
        

        """"""
        parent_jira_key:String
        

        """"""
        task_parent_jira_id:Int
        

        """task_parent_jira_key"""
        task_parent_jira_key:String
        

        """"""
        jira_id:Int
        

        """"""
        jira_key:String
        

        """jira_type"""
        jira_type:Int
        

        """jira_board"""
        jira_board:String
        

        """title"""
        title:String
        

        """description"""
        description:String
        

        """备注"""
        remark:String
        

        """priority"""
        priority:Int
        

        """creator"""
        creator:String
        

        """start_time"""
        start_time:Int
        

        """end_time"""
        end_time:Int
        

        """req_process"""
        req_process:Int
        

        """storypoint"""
        storypoint:Int
        

        """status"""
        status:Int
        

        """prj_flow_state"""
        prj_flow_state:Int
        

        """dms_flow_state"""
        dms_flow_state:Int
        

        """req_type"""
        req_type:Int
        

        """subtask_type"""
        subtask_type:Int
        

        """"""
        assignee:String
        

        """"""
        reporter:String
        

        """"""
        dev:String
        

        """"""
        qa:String
        

        """"""
        pd:String
        

        """"""
        be:String
        

        """"""
        fe:String
        

        """"""
        other:String
        

        """"""
        fixversions:String
        

        """"""
        labels:String
        

        """related_person"""
        related_person:String
        

        """"""
        expect_prd_date:Int
        

        """"""
        expect_uat_date:Int
        

        """"""
        expect_live_date:Int
        

        """fe_expect_duration"""
        fe_expect_duration:Int
        

        """be_expect_duration"""
        be_expect_duration:Int
        

        """qa_expect_duration"""
        qa_expect_duration:Int
        

        """"""
        pd_expect_duration:Int
        

        """"""
        other_expect_duration:Int
        

        """"""
        checklist:String
        

        """"""
        reports:String
        

        """"""
        sync_jira_time:Int
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjRequirementTabPagerInfo {
            items:[PrjRequirementTab!]
            total:Int!
        }

        
type PrjReqFlowTab  {
         
        """"""
        id:Int
        

        """"""
        jira_id:Int
        

        """"""
        jira_key:String
        

        """"""
        group_id:Int
        

        """"""
        group_key_id:String
        

        """"""
        flow_id:Int
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjReqFlowTabInput {
           
        """"""
        id:Int
        

        """"""
        jira_id:Int
        

        """"""
        jira_key:String
        

        """"""
        group_id:Int
        

        """"""
        group_key_id:String
        

        """"""
        flow_id:Int
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjReqFlowTabPagerInfo {
            items:[PrjReqFlowTab!]
            total:Int!
        }

        
type PrjRiskTab  {
         
        """"""
        id:Int
        

        """"""
        project_id:Int
        

        """"""
        pre_risk_id:Int
        

        """"""
        title:String
        

        """"""
        owner:String
        

        """"""
        state:Int
        

        """"""
        end_time:Int
        

        """"""
        risk_type:Int
        

        """"""
        risk_level:Int
        

        """"""
        solution:String
        

        """"""
        remark:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjRiskTabInput {
           
        """"""
        id:Int
        

        """"""
        project_id:Int
        

        """"""
        pre_risk_id:Int
        

        """"""
        title:String
        

        """"""
        owner:String
        

        """"""
        state:Int
        

        """"""
        end_time:Int
        

        """"""
        risk_type:Int
        

        """"""
        risk_level:Int
        

        """"""
        solution:String
        

        """"""
        remark:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjRiskTabPagerInfo {
            items:[PrjRiskTab!]
            total:Int!
        }

        
type PrjUserTaskdetailTemplateTab  {
         
        """"""
        id:Int
        

        """"""
        user_email:String
        

        """conf"""
        conf:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        

        input PrjUserTaskdetailTemplateTabInput {
           
        """"""
        id:Int
        

        """"""
        user_email:String
        

        """conf"""
        conf:String
        

        """"""
        update_by:String
        

        """"""
        create_by:String
        

        """"""
        mtime:Int
        

        """"""
        ctime:Int
        

        """"""
        is_deleted:Int
        
        }
        type PrjUserTaskdetailTemplateTabPagerInfo {
            items:[PrjUserTaskdetailTemplateTab!]
            total:Int!
        }

        

        
        directive @goModel(
            model: String
            models: [String!]
        ) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
        
        directive @goField(
            forceResolver: Boolean
            name: String
        ) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
        
        directive @goTag(
            key: String!
            value: String
        ) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
        
        type Mutation {
           
        createPrjChangeRecordTab(input:PrjChangeRecordTabInput!):PrjChangeRecordTab!
        updatePrjChangeRecordTab(id:Int!,input:PrjChangeRecordTabInput!):PrjChangeRecordTab!
        #deletePrjChangeRecordTab(id:Int!):Boolean!
        

        createPrjGanttGroupDepartmentTab(input:PrjGanttGroupDepartmentTabInput!):PrjGanttGroupDepartmentTab!
        updatePrjGanttGroupDepartmentTab(id:Int!,input:PrjGanttGroupDepartmentTabInput!):PrjGanttGroupDepartmentTab!
        #deletePrjGanttGroupDepartmentTab(id:Int!):Boolean!
        

        createPrjGanttGroupMemberTab(input:PrjGanttGroupMemberTabInput!):PrjGanttGroupMemberTab!
        updatePrjGanttGroupMemberTab(id:Int!,input:PrjGanttGroupMemberTabInput!):PrjGanttGroupMemberTab!
        #deletePrjGanttGroupMemberTab(id:Int!):Boolean!
        

        createPrjGanttGroupTab(input:PrjGanttGroupTabInput!):PrjGanttGroupTab!
        updatePrjGanttGroupTab(id:Int!,input:PrjGanttGroupTabInput!):PrjGanttGroupTab!
        #deletePrjGanttGroupTab(id:Int!):Boolean!
        

        createPrjMilestoneTab(input:PrjMilestoneTabInput!):PrjMilestoneTab!
        updatePrjMilestoneTab(id:Int!,input:PrjMilestoneTabInput!):PrjMilestoneTab!
        #deletePrjMilestoneTab(id:Int!):Boolean!
        

        createPrjProjectDepartmentTab(input:PrjProjectDepartmentTabInput!):PrjProjectDepartmentTab!
        updatePrjProjectDepartmentTab(id:Int!,input:PrjProjectDepartmentTabInput!):PrjProjectDepartmentTab!
        #deletePrjProjectDepartmentTab(id:Int!):Boolean!
        

        createPrjProjectTab(input:PrjProjectTabInput!):PrjProjectTab!
        updatePrjProjectTab(id:Int!,input:PrjProjectTabInput!):PrjProjectTab!
        #deletePrjProjectTab(id:Int!):Boolean!
        

        createPrjProjectUserTab(input:PrjProjectUserTabInput!):PrjProjectUserTab!
        updatePrjProjectUserTab(id:Int!,input:PrjProjectUserTabInput!):PrjProjectUserTab!
        #deletePrjProjectUserTab(id:Int!):Boolean!
        

        createPrjRequirementRelatedTab(input:PrjRequirementRelatedTabInput!):PrjRequirementRelatedTab!
        updatePrjRequirementRelatedTab(id:Int!,input:PrjRequirementRelatedTabInput!):PrjRequirementRelatedTab!
        #deletePrjRequirementRelatedTab(id:Int!):Boolean!
        

        createPrjRequirementTab(input:PrjRequirementTabInput!):PrjRequirementTab!
        updatePrjRequirementTab(id:Int!,input:PrjRequirementTabInput!):PrjRequirementTab!
        #deletePrjRequirementTab(id:Int!):Boolean!
        

        createPrjReqFlowTab(input:PrjReqFlowTabInput!):PrjReqFlowTab!
        updatePrjReqFlowTab(id:Int!,input:PrjReqFlowTabInput!):PrjReqFlowTab!
        #deletePrjReqFlowTab(id:Int!):Boolean!
        

        createPrjRiskTab(input:PrjRiskTabInput!):PrjRiskTab!
        updatePrjRiskTab(id:Int!,input:PrjRiskTabInput!):PrjRiskTab!
        #deletePrjRiskTab(id:Int!):Boolean!
        

        createPrjUserTaskdetailTemplateTab(input:PrjUserTaskdetailTemplateTabInput!):PrjUserTaskdetailTemplateTab!
        updatePrjUserTaskdetailTemplateTab(id:Int!,input:PrjUserTaskdetailTemplateTabInput!):PrjUserTaskdetailTemplateTab!
        #deletePrjUserTaskdetailTemplateTab(id:Int!):Boolean!
        
        }
        

    input PagerInput {
        limit:Int!
        offset:Int!
    }

    type Query {
        
        getPrjChangeRecordTabsForPager(query:PrjChangeRecordTabInput,pager:PagerInput!,order:String):PrjChangeRecordTabPagerInfo!
        getPrjChangeRecordTabs(query:PrjChangeRecordTabInput,pager:PagerInput!,order:String):[PrjChangeRecordTab]!
        getPrjChangeRecordTab(id:Int,query:PrjChangeRecordTabInput):PrjChangeRecordTab!
    

        getPrjGanttGroupDepartmentTabsForPager(query:PrjGanttGroupDepartmentTabInput,pager:PagerInput!,order:String):PrjGanttGroupDepartmentTabPagerInfo!
        getPrjGanttGroupDepartmentTabs(query:PrjGanttGroupDepartmentTabInput,pager:PagerInput!,order:String):[PrjGanttGroupDepartmentTab]!
        getPrjGanttGroupDepartmentTab(id:Int,query:PrjGanttGroupDepartmentTabInput):PrjGanttGroupDepartmentTab!
    

        getPrjGanttGroupMemberTabsForPager(query:PrjGanttGroupMemberTabInput,pager:PagerInput!,order:String):PrjGanttGroupMemberTabPagerInfo!
        getPrjGanttGroupMemberTabs(query:PrjGanttGroupMemberTabInput,pager:PagerInput!,order:String):[PrjGanttGroupMemberTab]!
        getPrjGanttGroupMemberTab(id:Int,query:PrjGanttGroupMemberTabInput):PrjGanttGroupMemberTab!
    

        getPrjGanttGroupTabsForPager(query:PrjGanttGroupTabInput,pager:PagerInput!,order:String):PrjGanttGroupTabPagerInfo!
        getPrjGanttGroupTabs(query:PrjGanttGroupTabInput,pager:PagerInput!,order:String):[PrjGanttGroupTab]!
        getPrjGanttGroupTab(id:Int,query:PrjGanttGroupTabInput):PrjGanttGroupTab!
    

        getPrjMilestoneTabsForPager(query:PrjMilestoneTabInput,pager:PagerInput!,order:String):PrjMilestoneTabPagerInfo!
        getPrjMilestoneTabs(query:PrjMilestoneTabInput,pager:PagerInput!,order:String):[PrjMilestoneTab]!
        getPrjMilestoneTab(id:Int,query:PrjMilestoneTabInput):PrjMilestoneTab!
    

        getPrjProjectDepartmentTabsForPager(query:PrjProjectDepartmentTabInput,pager:PagerInput!,order:String):PrjProjectDepartmentTabPagerInfo!
        getPrjProjectDepartmentTabs(query:PrjProjectDepartmentTabInput,pager:PagerInput!,order:String):[PrjProjectDepartmentTab]!
        getPrjProjectDepartmentTab(id:Int,query:PrjProjectDepartmentTabInput):PrjProjectDepartmentTab!
    

        getPrjProjectTabsForPager(query:PrjProjectTabInput,pager:PagerInput!,order:String):PrjProjectTabPagerInfo!
        getPrjProjectTabs(query:PrjProjectTabInput,pager:PagerInput!,order:String):[PrjProjectTab]!
        getPrjProjectTab(id:Int,query:PrjProjectTabInput):PrjProjectTab!
    

        getPrjProjectUserTabsForPager(query:PrjProjectUserTabInput,pager:PagerInput!,order:String):PrjProjectUserTabPagerInfo!
        getPrjProjectUserTabs(query:PrjProjectUserTabInput,pager:PagerInput!,order:String):[PrjProjectUserTab]!
        getPrjProjectUserTab(id:Int,query:PrjProjectUserTabInput):PrjProjectUserTab!
    

        getPrjRequirementRelatedTabsForPager(query:PrjRequirementRelatedTabInput,pager:PagerInput!,order:String):PrjRequirementRelatedTabPagerInfo!
        getPrjRequirementRelatedTabs(query:PrjRequirementRelatedTabInput,pager:PagerInput!,order:String):[PrjRequirementRelatedTab]!
        getPrjRequirementRelatedTab(id:Int,query:PrjRequirementRelatedTabInput):PrjRequirementRelatedTab!
    

        getPrjRequirementTabsForPager(query:PrjRequirementTabInput,pager:PagerInput!,order:String):PrjRequirementTabPagerInfo!
        getPrjRequirementTabs(query:PrjRequirementTabInput,pager:PagerInput!,order:String):[PrjRequirementTab]!
        getPrjRequirementTab(id:Int,query:PrjRequirementTabInput):PrjRequirementTab!
    

        getPrjReqFlowTabsForPager(query:PrjReqFlowTabInput,pager:PagerInput!,order:String):PrjReqFlowTabPagerInfo!
        getPrjReqFlowTabs(query:PrjReqFlowTabInput,pager:PagerInput!,order:String):[PrjReqFlowTab]!
        getPrjReqFlowTab(id:Int,query:PrjReqFlowTabInput):PrjReqFlowTab!
    

        getPrjRiskTabsForPager(query:PrjRiskTabInput,pager:PagerInput!,order:String):PrjRiskTabPagerInfo!
        getPrjRiskTabs(query:PrjRiskTabInput,pager:PagerInput!,order:String):[PrjRiskTab]!
        getPrjRiskTab(id:Int,query:PrjRiskTabInput):PrjRiskTab!
    

        getPrjUserTaskdetailTemplateTabsForPager(query:PrjUserTaskdetailTemplateTabInput,pager:PagerInput!,order:String):PrjUserTaskdetailTemplateTabPagerInfo!
        getPrjUserTaskdetailTemplateTabs(query:PrjUserTaskdetailTemplateTabInput,pager:PagerInput!,order:String):[PrjUserTaskdetailTemplateTab]!
        getPrjUserTaskdetailTemplateTab(id:Int,query:PrjUserTaskdetailTemplateTabInput):PrjUserTaskdetailTemplateTab!
    
    }
    
"""需求池task查询入参"""
input ReqPoolTaskInput {
    """项目组uuid"""
    group_key_id:String!
    """开始时间"""
    start_time:Int!
    """结束时间"""
    end_time:Int!
    current:Int!
    size:Int!
    jira_key:String
    jira_board:[String]
    summary:String
    """父task的jira_key"""
    task_parent_jira_key:[String]
    """flow状态"""
    flow_state:[Int]
    """优先级，0-Low 1-Medium 2-High 3-Highest 4-Lowest 5-Minor 6-Blocker"""
    priority:[Int]
    assignee:[String]
    reporter:[String]
    fix_version:[String]
    """需求类型，0-日常、1-专项、2-技术、3-渠道、4-线上问题"""
    req_type:[Int]
    """排序字段及顺序, mtime:更新时间、ctime:创建时间、status、assignee、reporter、priority、task_parent_jira_key"""
    sorts:[SortField]
    """是否需要总记录数"""
    needtotal:Boolean!
}

"""需求池task看板查询入参"""
input ReqPoolTasKanBoardInput {
    """项目组uuid"""
    group_key_id:String!
    """开始时间"""
    start_time:Int!
    """结束时间"""
    end_time:Int!
    current:Int!
    size:Int!
    jira_key:String
    jira_board:[String]
    summary:String
    """父task的jira_key"""
    task_parent_jira_key:[String]
    """flow状态"""
    flow_state:[[Int]]
    """优先级，0-Low 1-Medium 2-High 3-Highest 4-Lowest 5-Minor 6-Blocker"""
    priority:[Int]
    assignee:[String]
    reporter:[String]
    fix_version:[String]
    """需求类型，0-日常、1-专项、2-技术、3-渠道、4-线上问题"""
    req_type:[Int]
    """排序字段及顺序, mtime:更新时间、ctime:创建时间、status、assignee、reporter、priority、task_parent_jira_key"""
    sorts:[SortField]
}

"""排序字段"""
input SortField {
    """字段名"""
    key:String!
    """规则，升序-asc 降序-desc"""
    rule:String!
}

"""需求池task数据"""
type ReqPoolTaskData {
    """记录总条数"""
    total:Int
    """指定查询页和页大小的数据"""
    task_list:[ReqPoolTaskInfo]!
}

"""需求池task详情"""
type ReqPoolTaskInfo {
    """pjm系统中表存储的唯一id"""
    id:Int
    """task的父task的jira_key"""
    task_parent_jira_key:String
    """task的父task的jira_id"""
    task_parent_jira_id:Int
    related_task:[JiraKeyJiraIdInfo]
    son_task:[JiraKeyJiraIdInfo]
    """所属的专项项目id"""
    project_id:Int
    """jira的id"""
    jira_id:Int
    """jira的key"""
    jira_key:String
    """Jira type:1-task，3-subtask，2-bug"""
    jira_type:Int!
    """jira board"""
    jira_board:String
    """需求的类型，0-日常、1-专项、2-技术、3-渠道、4-线上问题"""
    req_type:Int!
    """标题"""
    summary:String!
    """详细说明"""
    description:String
    remark:String
    """开始时间 时间戳表示"""
    start_date:Int
    """结束时间 时间戳表示"""
    due_date:Int
    """创建时间 时间戳表示"""
    ctime:Int!
    """修改时间 时间戳表示"""
    mtime:Int!
    story_points:Float!
    """工时：单位天，所有subtask的工时合计"""
    subtask_storypoints:Float!
    priority:Int!
    """flow状态"""
    flow_state:Int!
    assignee:String!
    reporter:String
    be:[String!]
    fe:[String!]
    qa:[String!]
    pd:[String!]
    other:[String!]
    be_expect_duration:Float!
    fe_expect_duration:Float!
    qa_expect_duration:Float!
    pd_expect_duration:Float!
    other_expect_duration:Float!
    fix_version:[String!]
    labels:[String!]
}

"""新建task入参"""
input ReqPoolTaskAddInput {
    """前端生成的uuid,比如3638097627"""
    uniq_id:String
    """jira board"""
    jira_board:String!
    task_parent_jira_key:String
    task_parent_jira_id:Int
    related_task:[JiraKeyJiraIdInput]
    """专项项目id"""
    project_id:Int
    """标题"""
    summary:String!
    """详细说明"""
    description:String
    remark:String
    """开始时间 时间戳表示"""
    start_date:Int
    """结束时间 时间戳表示"""
    due_date:Int
    assignee:String
    reporter:String
    be:[String!]
    fe:[String!]
    qa:[String!]
    pd:[String!]
    other:[String!]
    be_expect_duration:Float
    fe_expect_duration:Float
    qa_expect_duration:Float
    pd_expect_duration:Float
    other_expect_duration:Float
    fix_version:[String!]
    label:[String!]
    priority: Int
    req_type: Int
    story_points: Float
}

"""编辑task入参"""
input ReqPoolTaskEditInput {
    """数据表中的主键id"""
    id:Int!
    """前端生成的uuid,比如3638097627"""
    uniq_id:String
    task_parent_jira_key:String
    task_parent_jira_id:Int
    related_task:[JiraKeyJiraIdInput]
    """专项项目id"""
    project_id:Int
    """标题"""
    summary:String
    """详细说明"""
    description:String
    remark:String
    """flow状态"""
    flow_state:Int
    """状态变更的理由"""
    state_remark:Int
    """开始时间 时间戳表示"""
    start_date:Int
    """结束时间 时间戳表示"""
    due_date:Int
    assignee:String
    reporter:String
    be:[String!]
    fe:[String!]
    qa:[String!]
    pd:[String!]
    other:[String!]
    be_expect_duration:Float
    fe_expect_duration:Float
    qa_expect_duration:Float
    pd_expect_duration:Float
    other_expect_duration:Float
    fix_version:[String!]
    label:[String!]
    priority: Int
    req_type: Int
    story_points: Float
}

input FlowRelationInput {
    jira_id:Int!
    jira_key:String!
    group_id:Int
}

type FlowRelationInfo {
    jira_id:Int!
    jira_key:String!
    group_id:Int!
    flow_id:Int!
    flow_state:Int!
}

input JiraBoardsTaskInput {
    """指定的jira boards列表"""
    jira_boards:[String!]
    """需要模糊查询的jira_key"""
    jira_key:String
    """当前页"""
    current:Int!
    """每页记录数"""
    size:Int!
}

extend type Query {
    """获取项目组的task列表"""
    BizGetGroupTaskList(input:ReqPoolTaskInput!):ReqPoolTaskData
    """获取需求池看板task"""
    BizGetKanBoardTaskList(input:ReqPoolTasKanBoardInput!):ReqPoolTaskData
    """查询dms中的flow_id"""
    BizGetDmsFlowId(input:[FlowRelationInput]):[FlowRelationInfo]
    """获取jira boards对应的task列表"""
    BizGetJiraBoardsTaskList(input:JiraBoardsTaskInput):[ReqPoolTaskInfo]
}

extend type Mutation {
    """新增一个jira task"""
    BizCreateTask(input:ReqPoolTaskAddInput!):Boolean
    """更新jira task"""
    BizUpdateTask(input:[ReqPoolTaskEditInput!]):Boolean
}
"""创建风险入参"""
input RiskAddInput {
    """专项ID"""
    project_id:Int!
    """排序在前面的risk的id"""
    pre_risk_id:Int!
    """标题"""
    title:String
    """责任人"""
    owner:String
    """状态"""
    state:Int
    """截止时间"""
    end_time:Int
    """风险类型"""
    risk_type:Int
    """风险等级"""
    risk_level:Int
    """应对方案"""
    solution:String
    """备注"""
    remark:String
}

"""更新风险入参"""
input RiskUpdateInput {
    """数据库ID"""
    id:Int!
    """排序在前面的risk的id"""
    pre_risk_id:Int!
    """标题"""
    title:String
    """责任人"""
    owner:String
    """状态"""
    state:Int
    """截止时间"""
    end_time:Int
    """风险类型"""
    risk_type:Int
    """风险等级"""
    risk_level:Int
    """应对方案"""
    solution:String
    """备注"""
    remark:String
}

"""风险信息"""
type RiskInfo {
    """专项ID"""
    project_id:Int!
    """排序在前面的risk的id"""
    pre_risk_id:Int!
    """标题"""
    title:String
    """责任人"""
    owner:String
    """状态"""
    state:Int
    """截止时间"""
    end_time:Int
    """风险类型"""
    risk_type:Int
    """风险等级"""
    risk_level:Int
    """应对方案"""
    solution:String
    """备注"""
    remark:String
}

extend type Query {
    """查看风险列表"""
    BizGetRiskList(project_id:Int!):[RiskInfo]
}

extend type Mutation {
    """新建风险"""
    BizCreateRisk(project_id:Int!, input:RiskAddInput!):Boolean
    """更新风险"""
    BizUpdateRisk(project_id:Int!, input:RiskUpdateInput!):Boolean
}
"""创建专项入参"""
input ProjectInput {
    """专项名称"""
    name:String!
    """专项描述"""
    desc:String
    """专项类型"""
    type:Int!
    """专项进度"""
    progress:Int!
    """专项状态"""
    state:Int
    """专项风险"""
    risk:Int
    """专项负责人"""
    owner:[String]!
    """专项所属部门id"""
    department_id:String!
    """专项所关联的叶子节点id"""
    group_key_ids:[String]!
    """专项计划开始时间"""
    plan_start_date: Int
    """专项计划结束时间"""
    plan_end_date: Int
    """要添加的成员email列表"""
    member_list: [ProjectMemberInput]
}

"""修改专项入参"""
input UpdateProjectInput {
    """专项名称"""
    name:String
    """专项描述"""
    desc:String
    """专项类型"""
    type:Int
    """专项进度"""
    progress:Int
    """专项负责人"""
    owner:[String]
    """专项所属部门id"""
    department_id:String
    """专项所关联的叶子节点id"""
    group_key_ids:[String]
    """专项计划开始时间"""
    plan_start_date: Int
    """专项计划结束时间"""
    plan_end_date: Int
}

input UpdateProjectStateInput {
    """专项状态"""
    state:Int
    """专项状态描述"""
    state_desc:String
    """专项风险"""
    risk:Int
    """备注"""
    remark:String
}

input ProjectMemberInput {
    """用户邮箱"""
    user_email:String!
    """用户角色"""
    project_role:Int!
}

input QueryProjectInput {
    """专项进展"""
    progress:Int
    """专项状态"""
    state:Int
    """专项名称"""
    name:String
    """专项负责人"""
    owner:String
}

type ProjectMemberInfo {
    user_email:String!
    user_name:String
    """产品线，对应着二级节点名称"""
    product_line:String
    """小组，对应着三级节点名称"""
    team:String
    """角色，比如BE、FE、QA"""
    role:String
    """用户在专项中的角色"""
    project_role:Int
}

type ProjectInfo {
    """专项id"""
    id:Int
    """专项名字"""
    name:String
    """专项描述"""
    desc:String
    """专项进度"""
    progress:Int
    """专项状态"""
    state:Int
    """专项风险"""
    risk:Int
    """专项负责人"""
    owner:[String]
    """专项计划开始时间"""
    plan_start_date: Int
    """专项计划结束时间"""
    plan_end_date: Int
}

type ProjectChangeRecord {
    """操作者"""
    operator: String
    """原来的状态"""
    old_state: Int
    """新的状态"""
    new_state: Int
    """原来的状态描述"""
    old_state_desc: String
    """新的状态描述"""
    new_state_desc: String
    """原来的风险等级"""
    old_risk: Int
    """新的风险等级"""
    new_risk: Int
    """"修改时间"""
    change_time: Int
    """"修改备注"""
    change_remark: String
}

type ProjectDetail {
    """专项id"""
    id:Int
    """专项名称"""
    name:String
    """专项描述"""
    desc:String
    """专项类型"""
    type:Int
    """专项进度"""
    progress:Int
    """专项状态"""
    state:Int
    """专项状态描述"""
    state_desc:String
    """专项风险"""
    risk:Int
    """专项负责人"""
    owner:[String]
    """专项所属部门id"""
    department_id:String
    """专项所关联的叶子节点id"""
    group_key_ids:[String]
    """专项计划开始时间"""
    plan_start_date: Int
    """专项计划结束时间"""
    plan_end_date: Int
    """修改记录"""
    state_history: [DataChangeHistory]
}

input AddProjectMemberInput {
    """专项id"""
    project_id:Int!
    """要操作的成员信息列表"""
    member_list:[ProjectMemberInput!]
}

input UpdateProjectMemberInput {
    """专项id"""
    project_id:Int!
    """成员信息"""
    member_info:ProjectMemberInput!
}

input QueryProjectMemberInput {
    """成员邮箱"""
    user_email:String
    """成员角色"""
    project_role:Int
}

input DeleteProjectMemberInput {
    """专项id"""
    project_id:Int!
    """要操作的成员email列表"""
    member_list:[String!]
}

type ProjectsPagerInfo {
    """专项列表"""
    project_list: [ProjectInfo!]
    """本次查询返回的专项数量"""
    total:Int!
}

type ProjectMemberPagerInfo {
    """成员列表"""
    Member_list: [ProjectMemberInfo!]
    """本次查询返回的成员数量"""
    total:Int!
}

type ProjectMenuInfo {
    """菜单列表"""
    Menu_list: [String!]
}

extend type Query {
    """查看专项详情"""
    BizGetProjectDetail(project_id:Int!):ProjectDetail
    """获取当前部门的专项列表"""
    BizGetProjectList(department_id:String!, query:QueryProjectInput!, pager:PagerFrontInput!):ProjectsPagerInfo

    """获取专项成员列表"""
    BizGetProjectMemberList(project_id:Int!, query:QueryProjectMemberInput!, pager:PagerFrontInput!):ProjectMemberPagerInfo

    """获取成员菜单列表"""
    BizGetProjectMenu(project_id:Int!):ProjectMenuInfo
}

extend type Mutation {
    """创建专项"""
    BizCreateProject(input:ProjectInput!):Boolean
    """更新专项"""
    BizUpdateProject(project_id:Int!, input:UpdateProjectInput!):Boolean
    """更新专项状态"""
    BizUpdateProjectState(project_id:Int!, input:UpdateProjectStateInput!):Boolean
    """删除专项"""
    BizDeleteProject(project_id:Int!):Boolean

    """增加专项成员"""
    BizAddProjectMembers(input:AddProjectMemberInput):Boolean
    """修改专项成员信息"""
    BizUpdateProjectMember(input:UpdateProjectMemberInput):Boolean
    """删除专项成员"""
    BizDeleteProjectMembers(input:DeleteProjectMemberInput):Boolean
}
type EarmakedPrjTaskInfo {
    depart_id:String!
    depart_name:String!
    task_list:[EarmakedTaskInfo]
}

type EarmakedTaskInfo {
    """本task的信息"""
    info:ReqPoolTaskInfo
    """本task关联的子task列表"""
    related_task_list:[EarmakedTaskInfo]
    """本task的subtask列表"""
    subtask_list:[PrjSubtaskInfo]
}

extend type Query {
    """获取项目计划任务列表,包含task、subtask"""
    BizEarmakedGetTaskLit(project_id:Int!):[EarmakedPrjTaskInfo]
}

extend type Mutation {
    """导入task列表"""
    BizEarmakedImportTaskList(project_id:Int!, jira_key_list:[String!]!):Boolean
    """手动新增task"""
    BizEarmakedCreateTask(input:ReqPoolTaskAddInput!):Boolean
    """删除task"""
    BizEarmakedDeleteTask(project_id:Int!, jira_key:String!):Boolean
}
"""创建/修改甘特图小组入参"""
input GanttGroupInput {
    """甘特图小组名称"""
    name:String!
    """甘特图小组描述"""
    desc:String
    """甘特图小组负责人"""
    owner:[String]!
    """甘特图小组所属部门id"""
    department_id:String!
    """甘特图小组所关联的叶子节点id"""
    group_key_ids:[String]!
    """要添加的成员email列表"""
    member_list:[String]
}

input GanttGroupMemberInput {
    """甘特图小组id"""
    gantt_group_id:Int!
    """要操作的成员信息列表"""
    member_list:[String!]
}

input DeleteGanttGroupMembersInput {
    """甘特图小组id"""
    gantt_group_id:Int!
    """要操作的成员信息列表"""
    member_list:[String!]
}

type GanttGroupDetail {
    """甘特图小组id"""
    id:Int
    """甘特图小组名字"""
    name:String
    """甘特图小组描述"""
    desc:String
    """甘特图小组负责人"""
    owner:[String]
    """甘特图小组所属部门"""
    department_id:String
    """甘特图小组所关联的叶子结点id"""
    group_key_id:[String]
    """小组成员列表"""
    member_list:[String]
}

type GanttGroupInfo {
    """甘特图小组id"""
    id:Int
    """甘特图小组名字"""
    name:String
    """甘特图小组描述"""
    desc:String
    """甘特图小组负责人"""
    owner:[String]
}

type GanttGroupsPagerInfo {
    """甘特图小组列表"""
    gantt_group_list: [GanttGroupInfo!]
    """本次查询返回的甘特图小组数量"""
    total:Int!
}

type GanttGroupMembersPagerInfo {
    """甘特图小组成员列表"""
    gantt_group_member_list: [PrjGanttGroupMemberTab!]
    """本次查询返回的成员数量"""
    total:Int!
}

extend type Query {
    """查看甘特图小组详情"""
    BizGetGanttGroup(gantt_group_id:Int!):GanttGroupDetail
    """获取当前部门的甘特图小组列表"""
    BizGetGanttGroupList(department_id:String!, pager:PagerFrontInput!):GanttGroupsPagerInfo
}

extend type Mutation {
    """创建甘特图小组"""
    BizCreateGanttGroup(input:GanttGroupInput!):Boolean
    """更新甘特图小组"""
    BizUpdateGanttGroup(gantt_group_id:Int!, input:GanttGroupInput!):GanttGroupDetail
    """删除甘特图小组"""
    BizDeleteGanttGroup(gantt_group_id:Int!):GanttGroupDetail

    """增加甘特图小组成员"""
    BizAddGanttGroupMembers(input:GanttGroupMemberInput):[PrjGanttGroupMemberTab]
    """删除甘特图小组成员"""
    BizDeleteGanttGroupMembers(input:DeleteGanttGroupMembersInput):[String!]!
}
"""甘特图小组subtask列表返回值"""
type GanttGroupTaskInfo {
    """成员列表"""
    member_list:[String!]
    """subtask列表"""
    subtask_list:[PrjSubtaskInfo!]
    """task列表"""
    task_list:[PrjSubtaskInfo!]
}

"""创建子任务入参"""
input PrjSubtaskAddInput {
    """task关联的Org组织系统上的叶子节点的uuid"""
    group_key_id:String
    """subtask的父task的jira_id"""
    parent_jira_id:Int!
    """subtask的父task的jira_key"""
    parent_key:String!
    """Jira type:1-task，3-subtask，2-bug"""
    task_type:Int!
    """subtask类型：1-方案设计，2-程序开发，3-开发联调，4-开发自测，5-测试设计，6-测试执行，7-需求变更"""
    subtask_type:Int!
    """标题"""
    title:String!
    """详细说明"""
    description:String
    """开始时间 如2022-05-10"""
    start_date:String
    """结束时间 如2022-05-11"""
    due_date:String
    """前端生成的uuid,比如3638097627"""
    uniq_id:String!
    """工时：单位小时"""
    story_points:Float
    """任务的状态，比如PRD signoff、Doing、To Do"""
    status:String!
    assignee:String
    """"""
    fix_version:[String!]
    """"""
    label:[String!]
    """干系人列表，以json字符串数组的形式，数组中的每个元素是干系人的配置项对象，如[{“role”:”devPic”, “name”:”zhangsan@shopee.com”}, {“role”:”qaPic”, “name”:”lisi@shopee.com”}]"""
    related_person:String
    """"""
    expect_prd_date:Int
    """"""
    expect_uat_date:Int
    """"""
    expect_live_date:Int
    """Fe工程师人力预估时间"""
    fe_expect_duration:Int
    """BE工程师人力预估时间"""
    be_expect_duration:Int
    """Qa工程师人力预估时间"""
    qa_expect_duration:Int
}

"""修改子任务入参"""
input PrjSubtaskEditInput {
    """pjm系统中表存储的唯一id，更新时要传入"""
    id:Int!
    """subtask类型"""
    subtask_type:Int
    """标题"""
    title:String
    """详细说明"""
    description:String
    """开始时间 如2022-05-10"""
    start_date:String
    """结束时间 如2022-05-11"""
    due_date:String
    """前端生成的uuid,比如3638097627"""
    uniq_id:String!
    """工时：单位小时"""
    story_points:Float
    """任务的状态，比如PRD signoff、Doing、TO DO"""
    status:String
    assignee:String
    reporter:String
    """"""
    fix_version:[String!]
    """"""
    label:[String!]
    """干系人列表，以json字符串数组的形式，数组中的每个元素是干系人的配置项对象，如[{“role”:”devPic”, “name”:”zhangsan@shopee.com”}, {“role”:”qaPic”, “name”:”lisi@shopee.com”}]"""
    related_person:String
    """"""
    expect_prd_date:Int
    """"""
    expect_uat_date:Int
    """"""
    expect_live_date:Int
    """Fe工程师人力预估时间"""
    fe_expect_duration:Int
    """BE工程师人力预估时间"""
    be_expect_duration:Int
    """Qa工程师人力预估时间"""
    qa_expect_duration:Int
}

"""子任务详情"""
type PrjSubtaskInfo {
    """pjm系统中表存储的唯一id"""
    id:Int
    """Org组织系统上的叶子节点的uuid"""
    group_key_id:String!
    """subtask的父task的jira_id"""
    parent_jira_id:Int!
    """subtask的父task的jira_key"""
    parent_key:String!
    """jira的id"""
    jira_id:Int
    """jira的key"""
    jira_key:String
    """Jira type:1-task，3-subtask，2-bug"""
    task_type:Int!
    """subtask类型"""
    subtask_type:Int!
    """标题"""
    title:String!
    """详细说明"""
    description:String
    """优先级"""
    priority:Int
    """负责人"""
    creator:String!
    """开始时间 如2022-05-10"""
    start_date:String
    """结束时间 如2022-05-11"""
    due_date:String
    """工时：单位小时"""
    story_points:Float
    """任务的状态，比如PRD signoff、Doing、TO DO"""
    status:String!
    assignee:String!
    reporter:String
    """"""
    fix_version:[String!]
    """"""
    label:[String!]
    """操作的结果，比如创建和更新，0表示失败，1表示成功"""
    oper_ret:Int!
}

"""用户任务个数详情"""
type UserTaskNumInfo {
    """用户名"""
    user_email:String!
    """未排期的子任务个数"""
    unscheduled_subtasknum:Int
}

extend type Query {
    """获取甘特图小组已排期的subtask列表,入参start_time格式2022-05-10"""
    BizGetGanttScheduledSubtaskList(gantt_group_id:Int!, start_time:String!, end_time:String!):GanttGroupTaskInfo
    """获取特定用户未排期的subtask列表"""
    BizGetGanttUnScheduledSubtaskList(user_email:String!):GanttGroupTaskInfo
    """获取甘特图小组的task列表"""
    BizGetGanttTaskList(gantt_group_id:Int!, jira_key:String, pageno:Int!, count:Int!):[PrjSubtaskInfo]
    """获取甘特图小组所有成员的未排期任务个数"""
    BizGetGanttUnScheduledSubtaskNum(gantt_group_id:Int!):[UserTaskNumInfo]
}

extend type Mutation {
    """新增一个jira subtask"""
    BizCreateSubtask(input:PrjSubtaskAddInput!):PrjSubtaskInfo
    """更新jira subtask列表"""
    BizUpdateSubtask(input:[PrjSubtaskEditInput!]):[PrjSubtaskInfo]
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_BizAddGanttGroupMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GanttGroupMemberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOGanttGroupMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizAddProjectMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AddProjectMemberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOAddProjectMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐAddProjectMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizCreateGanttGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GanttGroupInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGanttGroupInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizCreateMilestoneTpl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizCreateMilestone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	var arg1 model.MilestoneInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNMilestoneInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐMilestoneInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_BizCreateProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ProjectInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNProjectInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizCreateRisk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	var arg1 model.RiskAddInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRiskAddInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐRiskAddInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_BizCreateSubtask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjSubtaskAddInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjSubtaskAddInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskAddInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizCreateTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ReqPoolTaskAddInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNReqPoolTaskAddInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskAddInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizDeleteGanttGroupMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DeleteGanttGroupMembersInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalODeleteGanttGroupMembersInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐDeleteGanttGroupMembersInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizDeleteGanttGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["gantt_group_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gantt_group_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gantt_group_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizDeleteMilestone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["milestone_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestone_id"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["milestone_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_BizDeleteProjectMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DeleteProjectMemberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalODeleteProjectMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐDeleteProjectMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizDeleteProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizEarmakedCreateTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ReqPoolTaskAddInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNReqPoolTaskAddInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskAddInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizEarmakedDeleteTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["jira_key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_key"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jira_key"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_BizEarmakedImportTaskList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["jira_key_list"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_key_list"))
		arg1, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jira_key_list"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_BizUpdateGanttGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["gantt_group_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gantt_group_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gantt_group_id"] = arg0
	var arg1 model.GanttGroupInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNGanttGroupInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_BizUpdateMilestone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["milestone_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestone_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["milestone_id"] = arg0
	var arg1 model.UpdateMilestoneInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateMilestoneInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUpdateMilestoneInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_BizUpdateProjectMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateProjectMemberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUpdateProjectMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUpdateProjectMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizUpdateProjectState_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	var arg1 model.UpdateProjectStateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateProjectStateInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUpdateProjectStateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_BizUpdateProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	var arg1 model.UpdateProjectInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateProjectInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUpdateProjectInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_BizUpdateRisk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	var arg1 model.RiskUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRiskUpdateInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐRiskUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_BizUpdateSubtask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.PrjSubtaskEditInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOPrjSubtaskEditInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskEditInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BizUpdateTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.ReqPoolTaskEditInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOReqPoolTaskEditInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskEditInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjChangeRecordTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjChangeRecordTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjChangeRecordTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjGanttGroupDepartmentTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjGanttGroupDepartmentTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjGanttGroupDepartmentTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjGanttGroupMemberTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjGanttGroupMemberTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjGanttGroupMemberTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjGanttGroupTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjGanttGroupTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjGanttGroupTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjMilestoneTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjMilestoneTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjMilestoneTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjProjectDepartmentTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjProjectDepartmentTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjProjectDepartmentTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjProjectTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjProjectTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjProjectTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjProjectUserTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjProjectUserTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjProjectUserTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjReqFlowTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjReqFlowTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjReqFlowTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjRequirementRelatedTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjRequirementRelatedTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjRequirementRelatedTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjRequirementTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjRequirementTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjRequirementTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjRiskTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjRiskTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjRiskTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPrjUserTaskdetailTemplateTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrjUserTaskdetailTemplateTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPrjUserTaskdetailTemplateTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjChangeRecordTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjChangeRecordTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjChangeRecordTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjGanttGroupDepartmentTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjGanttGroupDepartmentTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjGanttGroupDepartmentTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjGanttGroupMemberTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjGanttGroupMemberTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjGanttGroupMemberTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjGanttGroupTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjGanttGroupTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjGanttGroupTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjMilestoneTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjMilestoneTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjMilestoneTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjProjectDepartmentTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjProjectDepartmentTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjProjectDepartmentTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjProjectTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjProjectTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjProjectTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjProjectUserTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjProjectUserTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjProjectUserTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjReqFlowTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjReqFlowTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjReqFlowTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjRequirementRelatedTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjRequirementRelatedTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjRequirementRelatedTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjRequirementTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjRequirementTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjRequirementTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjRiskTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjRiskTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjRiskTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePrjUserTaskdetailTemplateTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PrjUserTaskdetailTemplateTabInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPrjUserTaskdetailTemplateTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_BizEarmakedGetTaskLit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetDmsFlowId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.FlowRelationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOFlowRelationInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐFlowRelationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetGanttGroupList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["department_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["department_id"] = arg0
	var arg1 model.PagerFrontInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerFrontInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerFrontInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_BizGetGanttGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["gantt_group_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gantt_group_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gantt_group_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetGanttScheduledSubtaskList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["gantt_group_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gantt_group_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gantt_group_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["start_time"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["start_time"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["end_time"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["end_time"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_BizGetGanttTaskList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["gantt_group_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gantt_group_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gantt_group_id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["jira_key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_key"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jira_key"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["pageno"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageno"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageno"] = arg2
	var arg3 int
	if tmp, ok := rawArgs["count"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
		arg3, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["count"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_BizGetGanttUnScheduledSubtaskList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetGanttUnScheduledSubtaskNum_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["gantt_group_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gantt_group_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gantt_group_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetGroupTaskList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ReqPoolTaskInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNReqPoolTaskInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetJiraBoardsTaskList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.JiraBoardsTaskInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOJiraBoardsTaskInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraBoardsTaskInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetKanBoardTaskList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ReqPoolTasKanBoardInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNReqPoolTasKanBoardInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTasKanBoardInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetMilestoneChangeHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetMilestoneList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetProjectDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetProjectList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["department_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["department_id"] = arg0
	var arg1 model.QueryProjectInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalNQueryProjectInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐQueryProjectInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	var arg2 model.PagerFrontInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg2, err = ec.unmarshalNPagerFrontInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerFrontInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_BizGetProjectMemberList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	var arg1 model.QueryProjectMemberInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalNQueryProjectMemberInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐQueryProjectMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	var arg2 model.PagerFrontInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg2, err = ec.unmarshalNPagerFrontInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerFrontInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_BizGetProjectMenu_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetRiskList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["project_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["project_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BizGetVersionsByBoards_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["jira_boards"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_boards"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jira_boards"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPrjChangeRecordTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjChangeRecordTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjChangeRecordTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjChangeRecordTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjChangeRecordTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjChangeRecordTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjChangeRecordTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjChangeRecordTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjChangeRecordTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjGanttGroupDepartmentTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjGanttGroupDepartmentTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjGanttGroupDepartmentTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjGanttGroupDepartmentTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjGanttGroupDepartmentTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjGanttGroupDepartmentTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjGanttGroupDepartmentTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjGanttGroupDepartmentTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjGanttGroupDepartmentTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjGanttGroupMemberTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjGanttGroupMemberTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjGanttGroupMemberTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjGanttGroupMemberTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjGanttGroupMemberTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjGanttGroupMemberTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjGanttGroupMemberTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjGanttGroupMemberTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjGanttGroupMemberTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjGanttGroupTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjGanttGroupTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjGanttGroupTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjGanttGroupTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjGanttGroupTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjGanttGroupTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjGanttGroupTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjGanttGroupTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjGanttGroupTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjMilestoneTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjMilestoneTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjMilestoneTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjMilestoneTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjMilestoneTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjMilestoneTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjMilestoneTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjMilestoneTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjMilestoneTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjProjectDepartmentTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjProjectDepartmentTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjProjectDepartmentTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjProjectDepartmentTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjProjectDepartmentTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjProjectDepartmentTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjProjectDepartmentTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjProjectDepartmentTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjProjectDepartmentTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjProjectTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjProjectTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjProjectTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjProjectTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjProjectTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjProjectTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjProjectTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjProjectTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjProjectTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjProjectUserTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjProjectUserTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjProjectUserTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjProjectUserTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjProjectUserTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjProjectUserTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjProjectUserTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjProjectUserTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjProjectUserTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjReqFlowTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjReqFlowTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjReqFlowTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjReqFlowTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjReqFlowTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjReqFlowTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjReqFlowTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjReqFlowTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjReqFlowTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjRequirementRelatedTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjRequirementRelatedTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjRequirementRelatedTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjRequirementRelatedTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjRequirementRelatedTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjRequirementRelatedTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjRequirementRelatedTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjRequirementRelatedTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjRequirementRelatedTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjRequirementTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjRequirementTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjRequirementTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjRequirementTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjRequirementTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjRequirementTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjRequirementTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjRequirementTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjRequirementTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjRiskTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjRiskTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjRiskTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjRiskTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjRiskTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjRiskTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjRiskTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjRiskTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjRiskTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjUserTaskdetailTemplateTab_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.PrjUserTaskdetailTemplateTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOPrjUserTaskdetailTemplateTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getPrjUserTaskdetailTemplateTabsForPager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjUserTaskdetailTemplateTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjUserTaskdetailTemplateTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPrjUserTaskdetailTemplateTabs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PrjUserTaskdetailTemplateTabInput
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPrjUserTaskdetailTemplateTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 model.PagerInput
	if tmp, ok := rawArgs["pager"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pager"))
		arg1, err = ec.unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pager"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CommonEnum_code(ctx context.Context, field graphql.CollectedField, obj *model.CommonEnum) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonEnum",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonEnum_status_name(ctx context.Context, field graphql.CollectedField, obj *model.CommonEnum) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonEnum",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataChangeHistory_tab_name(ctx context.Context, field graphql.CollectedField, obj *model.DataChangeHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataChangeHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TabName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataChangeHistory_field_name(ctx context.Context, field graphql.CollectedField, obj *model.DataChangeHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataChangeHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataChangeHistory_record_id(ctx context.Context, field graphql.CollectedField, obj *model.DataChangeHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataChangeHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataChangeHistory_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.DataChangeHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataChangeHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataChangeHistory_old_value(ctx context.Context, field graphql.CollectedField, obj *model.DataChangeHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataChangeHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataChangeHistory_new_value(ctx context.Context, field graphql.CollectedField, obj *model.DataChangeHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataChangeHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataChangeHistory_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DataChangeHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataChangeHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataChangeHistory_ctime(ctx context.Context, field graphql.CollectedField, obj *model.DataChangeHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataChangeHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EarmakedPrjTaskInfo_depart_id(ctx context.Context, field graphql.CollectedField, obj *model.EarmakedPrjTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EarmakedPrjTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EarmakedPrjTaskInfo_depart_name(ctx context.Context, field graphql.CollectedField, obj *model.EarmakedPrjTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EarmakedPrjTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EarmakedPrjTaskInfo_task_list(ctx context.Context, field graphql.CollectedField, obj *model.EarmakedPrjTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EarmakedPrjTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EarmakedTaskInfo)
	fc.Result = res
	return ec.marshalOEarmakedTaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐEarmakedTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _EarmakedTaskInfo_info(ctx context.Context, field graphql.CollectedField, obj *model.EarmakedTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EarmakedTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Info, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ReqPoolTaskInfo)
	fc.Result = res
	return ec.marshalOReqPoolTaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _EarmakedTaskInfo_related_task_list(ctx context.Context, field graphql.CollectedField, obj *model.EarmakedTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EarmakedTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelatedTaskList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EarmakedTaskInfo)
	fc.Result = res
	return ec.marshalOEarmakedTaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐEarmakedTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _EarmakedTaskInfo_subtask_list(ctx context.Context, field graphql.CollectedField, obj *model.EarmakedTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EarmakedTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtaskList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjSubtaskInfo)
	fc.Result = res
	return ec.marshalOPrjSubtaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _EnumsResult_prj_flow_status(ctx context.Context, field graphql.CollectedField, obj *model.EnumsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnumsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrjFlowStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonEnum)
	fc.Result = res
	return ec.marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnumsResult_prj_flow_close_remark(ctx context.Context, field graphql.CollectedField, obj *model.EnumsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnumsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrjFlowCloseRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonEnum)
	fc.Result = res
	return ec.marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnumsResult_req_priority(ctx context.Context, field graphql.CollectedField, obj *model.EnumsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnumsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqPriority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonEnum)
	fc.Result = res
	return ec.marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnumsResult_req_type(ctx context.Context, field graphql.CollectedField, obj *model.EnumsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnumsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonEnum)
	fc.Result = res
	return ec.marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnumsResult_subtask_jira_status(ctx context.Context, field graphql.CollectedField, obj *model.EnumsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnumsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtaskJiraStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonEnum)
	fc.Result = res
	return ec.marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnumsResult_prj_progress(ctx context.Context, field graphql.CollectedField, obj *model.EnumsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnumsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrjProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonEnum)
	fc.Result = res
	return ec.marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnumsResult_prj_state(ctx context.Context, field graphql.CollectedField, obj *model.EnumsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnumsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrjState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonEnum)
	fc.Result = res
	return ec.marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnumsResult_prj_risk(ctx context.Context, field graphql.CollectedField, obj *model.EnumsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnumsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrjRisk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonEnum)
	fc.Result = res
	return ec.marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnumsResult_prj_type(ctx context.Context, field graphql.CollectedField, obj *model.EnumsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnumsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrjType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonEnum)
	fc.Result = res
	return ec.marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnumsResult_prj_member_role(ctx context.Context, field graphql.CollectedField, obj *model.EnumsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnumsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrjMemberRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonEnum)
	fc.Result = res
	return ec.marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnumsResult_milestone_state(ctx context.Context, field graphql.CollectedField, obj *model.EnumsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnumsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MilestoneState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonEnum)
	fc.Result = res
	return ec.marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FlowRelationInfo_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.FlowRelationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FlowRelationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FlowRelationInfo_jira_key(ctx context.Context, field graphql.CollectedField, obj *model.FlowRelationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FlowRelationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FlowRelationInfo_group_id(ctx context.Context, field graphql.CollectedField, obj *model.FlowRelationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FlowRelationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FlowRelationInfo_flow_id(ctx context.Context, field graphql.CollectedField, obj *model.FlowRelationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FlowRelationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FlowID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FlowRelationInfo_flow_state(ctx context.Context, field graphql.CollectedField, obj *model.FlowRelationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FlowRelationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FlowState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupDetail_id(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupDetail_name(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupDetail_desc(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupDetail_owner(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupDetail_department_id(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupDetail_group_key_id(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupKeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupDetail_member_list(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupInfo_desc(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupInfo_owner(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupMembersPagerInfo_gantt_group_member_list(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupMembersPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupMembersPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GanttGroupMemberList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjGanttGroupMemberTab)
	fc.Result = res
	return ec.marshalOPrjGanttGroupMemberTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupMembersPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupMembersPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupMembersPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupTaskInfo_member_list(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupTaskInfo_subtask_list(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtaskList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjSubtaskInfo)
	fc.Result = res
	return ec.marshalOPrjSubtaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupTaskInfo_task_list(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjSubtaskInfo)
	fc.Result = res
	return ec.marshalOPrjSubtaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupsPagerInfo_gantt_group_list(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupsPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupsPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GanttGroupList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GanttGroupInfo)
	fc.Result = res
	return ec.marshalOGanttGroupInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GanttGroupsPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.GanttGroupsPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GanttGroupsPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _JiraKeyJiraIdInfo_jira_key(ctx context.Context, field graphql.CollectedField, obj *model.JiraKeyJiraIDInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JiraKeyJiraIdInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JiraKeyJiraIdInfo_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.JiraKeyJiraIDInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JiraKeyJiraIdInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MilestoneInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.MilestoneInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MilestoneInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MilestoneInfo_project_id(ctx context.Context, field graphql.CollectedField, obj *model.MilestoneInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MilestoneInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MilestoneInfo_order_num(ctx context.Context, field graphql.CollectedField, obj *model.MilestoneInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MilestoneInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MilestoneInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.MilestoneInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MilestoneInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MilestoneInfo_desc(ctx context.Context, field graphql.CollectedField, obj *model.MilestoneInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MilestoneInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MilestoneInfo_state(ctx context.Context, field graphql.CollectedField, obj *model.MilestoneInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MilestoneInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MilestoneInfo_owner(ctx context.Context, field graphql.CollectedField, obj *model.MilestoneInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MilestoneInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MilestoneInfo_plan_end_time(ctx context.Context, field graphql.CollectedField, obj *model.MilestoneInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MilestoneInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MilestoneInfo_real_end_time(ctx context.Context, field graphql.CollectedField, obj *model.MilestoneInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MilestoneInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RealEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MilestonePagerInfo_milestone_list(ctx context.Context, field graphql.CollectedField, obj *model.MilestonePagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MilestonePagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MilestoneList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MilestoneInfo)
	fc.Result = res
	return ec.marshalOMilestoneInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐMilestoneInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MilestonePagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.MilestonePagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MilestonePagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjChangeRecordTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjChangeRecordTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjChangeRecordTab(rctx, args["input"].(model.PrjChangeRecordTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjChangeRecordTab)
	fc.Result = res
	return ec.marshalNPrjChangeRecordTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjChangeRecordTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjChangeRecordTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjChangeRecordTab(rctx, args["id"].(int), args["input"].(model.PrjChangeRecordTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjChangeRecordTab)
	fc.Result = res
	return ec.marshalNPrjChangeRecordTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjGanttGroupDepartmentTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjGanttGroupDepartmentTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjGanttGroupDepartmentTab(rctx, args["input"].(model.PrjGanttGroupDepartmentTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupDepartmentTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjGanttGroupDepartmentTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjGanttGroupDepartmentTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjGanttGroupDepartmentTab(rctx, args["id"].(int), args["input"].(model.PrjGanttGroupDepartmentTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupDepartmentTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjGanttGroupMemberTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjGanttGroupMemberTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjGanttGroupMemberTab(rctx, args["input"].(model.PrjGanttGroupMemberTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupMemberTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupMemberTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjGanttGroupMemberTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjGanttGroupMemberTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjGanttGroupMemberTab(rctx, args["id"].(int), args["input"].(model.PrjGanttGroupMemberTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupMemberTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupMemberTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjGanttGroupTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjGanttGroupTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjGanttGroupTab(rctx, args["input"].(model.PrjGanttGroupTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjGanttGroupTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjGanttGroupTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjGanttGroupTab(rctx, args["id"].(int), args["input"].(model.PrjGanttGroupTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjMilestoneTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjMilestoneTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjMilestoneTab(rctx, args["input"].(model.PrjMilestoneTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjMilestoneTab)
	fc.Result = res
	return ec.marshalNPrjMilestoneTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjMilestoneTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjMilestoneTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjMilestoneTab(rctx, args["id"].(int), args["input"].(model.PrjMilestoneTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjMilestoneTab)
	fc.Result = res
	return ec.marshalNPrjMilestoneTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjProjectDepartmentTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjProjectDepartmentTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjProjectDepartmentTab(rctx, args["input"].(model.PrjProjectDepartmentTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectDepartmentTab)
	fc.Result = res
	return ec.marshalNPrjProjectDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjProjectDepartmentTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjProjectDepartmentTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjProjectDepartmentTab(rctx, args["id"].(int), args["input"].(model.PrjProjectDepartmentTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectDepartmentTab)
	fc.Result = res
	return ec.marshalNPrjProjectDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjProjectTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjProjectTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjProjectTab(rctx, args["input"].(model.PrjProjectTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectTab)
	fc.Result = res
	return ec.marshalNPrjProjectTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjProjectTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjProjectTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjProjectTab(rctx, args["id"].(int), args["input"].(model.PrjProjectTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectTab)
	fc.Result = res
	return ec.marshalNPrjProjectTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjProjectUserTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjProjectUserTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjProjectUserTab(rctx, args["input"].(model.PrjProjectUserTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectUserTab)
	fc.Result = res
	return ec.marshalNPrjProjectUserTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjProjectUserTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjProjectUserTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjProjectUserTab(rctx, args["id"].(int), args["input"].(model.PrjProjectUserTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectUserTab)
	fc.Result = res
	return ec.marshalNPrjProjectUserTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjRequirementRelatedTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjRequirementRelatedTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjRequirementRelatedTab(rctx, args["input"].(model.PrjRequirementRelatedTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRequirementRelatedTab)
	fc.Result = res
	return ec.marshalNPrjRequirementRelatedTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjRequirementRelatedTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjRequirementRelatedTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjRequirementRelatedTab(rctx, args["id"].(int), args["input"].(model.PrjRequirementRelatedTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRequirementRelatedTab)
	fc.Result = res
	return ec.marshalNPrjRequirementRelatedTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjRequirementTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjRequirementTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjRequirementTab(rctx, args["input"].(model.PrjRequirementTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRequirementTab)
	fc.Result = res
	return ec.marshalNPrjRequirementTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjRequirementTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjRequirementTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjRequirementTab(rctx, args["id"].(int), args["input"].(model.PrjRequirementTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRequirementTab)
	fc.Result = res
	return ec.marshalNPrjRequirementTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjReqFlowTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjReqFlowTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjReqFlowTab(rctx, args["input"].(model.PrjReqFlowTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjReqFlowTab)
	fc.Result = res
	return ec.marshalNPrjReqFlowTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjReqFlowTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjReqFlowTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjReqFlowTab(rctx, args["id"].(int), args["input"].(model.PrjReqFlowTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjReqFlowTab)
	fc.Result = res
	return ec.marshalNPrjReqFlowTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjRiskTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjRiskTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjRiskTab(rctx, args["input"].(model.PrjRiskTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRiskTab)
	fc.Result = res
	return ec.marshalNPrjRiskTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjRiskTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjRiskTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjRiskTab(rctx, args["id"].(int), args["input"].(model.PrjRiskTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRiskTab)
	fc.Result = res
	return ec.marshalNPrjRiskTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPrjUserTaskdetailTemplateTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPrjUserTaskdetailTemplateTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePrjUserTaskdetailTemplateTab(rctx, args["input"].(model.PrjUserTaskdetailTemplateTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjUserTaskdetailTemplateTab)
	fc.Result = res
	return ec.marshalNPrjUserTaskdetailTemplateTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePrjUserTaskdetailTemplateTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePrjUserTaskdetailTemplateTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePrjUserTaskdetailTemplateTab(rctx, args["id"].(int), args["input"].(model.PrjUserTaskdetailTemplateTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjUserTaskdetailTemplateTab)
	fc.Result = res
	return ec.marshalNPrjUserTaskdetailTemplateTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizCreateMilestone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizCreateMilestone_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizCreateMilestone(rctx, args["project_id"].(int), args["input"].(model.MilestoneInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizUpdateMilestone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizUpdateMilestone_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizUpdateMilestone(rctx, args["milestone_id"].(int), args["input"].(model.UpdateMilestoneInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizDeleteMilestone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizDeleteMilestone_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizDeleteMilestone(rctx, args["project_id"].(int), args["milestone_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizCreateMilestoneTpl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizCreateMilestoneTpl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizCreateMilestoneTpl(rctx, args["project_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizCreateTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizCreateTask_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizCreateTask(rctx, args["input"].(model.ReqPoolTaskAddInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizUpdateTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizUpdateTask_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizUpdateTask(rctx, args["input"].([]*model.ReqPoolTaskEditInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizCreateRisk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizCreateRisk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizCreateRisk(rctx, args["project_id"].(int), args["input"].(model.RiskAddInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizUpdateRisk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizUpdateRisk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizUpdateRisk(rctx, args["project_id"].(int), args["input"].(model.RiskUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizCreateProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizCreateProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizCreateProject(rctx, args["input"].(model.ProjectInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizUpdateProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizUpdateProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizUpdateProject(rctx, args["project_id"].(int), args["input"].(model.UpdateProjectInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizUpdateProjectState(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizUpdateProjectState_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizUpdateProjectState(rctx, args["project_id"].(int), args["input"].(model.UpdateProjectStateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizDeleteProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizDeleteProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizDeleteProject(rctx, args["project_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizAddProjectMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizAddProjectMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizAddProjectMembers(rctx, args["input"].(*model.AddProjectMemberInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizUpdateProjectMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizUpdateProjectMember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizUpdateProjectMember(rctx, args["input"].(*model.UpdateProjectMemberInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizDeleteProjectMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizDeleteProjectMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizDeleteProjectMembers(rctx, args["input"].(*model.DeleteProjectMemberInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizEarmakedImportTaskList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizEarmakedImportTaskList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizEarmakedImportTaskList(rctx, args["project_id"].(int), args["jira_key_list"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizEarmakedCreateTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizEarmakedCreateTask_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizEarmakedCreateTask(rctx, args["input"].(model.ReqPoolTaskAddInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizEarmakedDeleteTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizEarmakedDeleteTask_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizEarmakedDeleteTask(rctx, args["project_id"].(int), args["jira_key"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizCreateGanttGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizCreateGanttGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizCreateGanttGroup(rctx, args["input"].(model.GanttGroupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizUpdateGanttGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizUpdateGanttGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizUpdateGanttGroup(rctx, args["gantt_group_id"].(int), args["input"].(model.GanttGroupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GanttGroupDetail)
	fc.Result = res
	return ec.marshalOGanttGroupDetail2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizDeleteGanttGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizDeleteGanttGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizDeleteGanttGroup(rctx, args["gantt_group_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GanttGroupDetail)
	fc.Result = res
	return ec.marshalOGanttGroupDetail2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizAddGanttGroupMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizAddGanttGroupMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizAddGanttGroupMembers(rctx, args["input"].(*model.GanttGroupMemberInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjGanttGroupMemberTab)
	fc.Result = res
	return ec.marshalOPrjGanttGroupMemberTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizDeleteGanttGroupMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizDeleteGanttGroupMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizDeleteGanttGroupMembers(rctx, args["input"].(*model.DeleteGanttGroupMembersInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizCreateSubtask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizCreateSubtask_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizCreateSubtask(rctx, args["input"].(model.PrjSubtaskAddInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PrjSubtaskInfo)
	fc.Result = res
	return ec.marshalOPrjSubtaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BizUpdateSubtask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BizUpdateSubtask_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BizUpdateSubtask(rctx, args["input"].([]*model.PrjSubtaskEditInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjSubtaskInfo)
	fc.Result = res
	return ec.marshalOPrjSubtaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_tab_name(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TabName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_field_name(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_record_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_old_value(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_new_value(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjChangeRecordTab)
	fc.Result = res
	return ec.marshalOPrjChangeRecordTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjChangeRecordTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjChangeRecordTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjChangeRecordTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupDepartmentTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupDepartmentTab_gantt_group_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GanttGroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupDepartmentTab_department_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupDepartmentTab_group_key_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupKeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupDepartmentTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupDepartmentTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupDepartmentTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupDepartmentTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupDepartmentTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupDepartmentTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupDepartmentTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupDepartmentTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjGanttGroupDepartmentTab)
	fc.Result = res
	return ec.marshalOPrjGanttGroupDepartmentTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupDepartmentTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupDepartmentTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupDepartmentTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupMemberTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupMemberTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupMemberTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupMemberTab_user_email(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupMemberTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupMemberTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupMemberTab_gantt_group_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupMemberTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupMemberTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GanttGroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupMemberTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupMemberTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupMemberTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupMemberTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupMemberTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupMemberTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupMemberTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupMemberTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupMemberTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupMemberTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupMemberTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupMemberTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupMemberTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupMemberTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupMemberTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupMemberTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupMemberTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupMemberTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjGanttGroupMemberTab)
	fc.Result = res
	return ec.marshalOPrjGanttGroupMemberTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupMemberTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupMemberTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupMemberTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupTab_gantt_name(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GanttName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupTab_gentt_desc(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GenttDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupTab_owner(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjGanttGroupTab)
	fc.Result = res
	return ec.marshalOPrjGanttGroupTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjGanttGroupTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjGanttGroupTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjGanttGroupTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_project_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_name(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_owner(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_order_num(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_state(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_plan_end_time(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_real_end_time(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RealEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_start_time(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_end_time(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_desc(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjMilestoneTab)
	fc.Result = res
	return ec.marshalOPrjMilestoneTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjMilestoneTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjMilestoneTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjMilestoneTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectDepartmentTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectDepartmentTab_project_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectDepartmentTab_department_key_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentKeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectDepartmentTab_group_key_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupKeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectDepartmentTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectDepartmentTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectDepartmentTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectDepartmentTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectDepartmentTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectDepartmentTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectDepartmentTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectDepartmentTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectDepartmentTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectDepartmentTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjProjectDepartmentTab)
	fc.Result = res
	return ec.marshalOPrjProjectDepartmentTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectDepartmentTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectDepartmentTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectDepartmentTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_name(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_description(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_owner(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_progress(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_risk(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Risk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_state(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_state_desc(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StateDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_start_time(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_end_time(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_prj_type(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrjType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjProjectTab)
	fc.Result = res
	return ec.marshalOPrjProjectTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectUserTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectUserTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectUserTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectUserTab_project_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectUserTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectUserTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectUserTab_user_email(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectUserTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectUserTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectUserTab_project_role(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectUserTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectUserTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectUserTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectUserTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectUserTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectUserTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectUserTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectUserTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectUserTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectUserTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectUserTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectUserTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectUserTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectUserTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectUserTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectUserTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectUserTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectUserTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectUserTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectUserTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjProjectUserTab)
	fc.Result = res
	return ec.marshalOPrjProjectUserTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjProjectUserTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjProjectUserTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjProjectUserTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTab_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTab_jira_key(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTab_group_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTab_group_key_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupKeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTab_flow_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FlowID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjReqFlowTab)
	fc.Result = res
	return ec.marshalOPrjReqFlowTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjReqFlowTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjReqFlowTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjReqFlowTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_req_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_jira_key(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_related_req_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelatedReqID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_related_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelatedJiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_related_jira_key(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelatedJiraKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjRequirementRelatedTab)
	fc.Result = res
	return ec.marshalOPrjRequirementRelatedTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementRelatedTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementRelatedTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementRelatedTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_project_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_parent_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentJiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_parent_jira_key(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentJiraKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_task_parent_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskParentJiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_task_parent_jira_key(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskParentJiraKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_jira_key(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_jira_type(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_jira_board(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraBoard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_title(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_description(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_remark(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_priority(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_creator(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_start_time(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_end_time(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_req_process(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqProcess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_storypoint(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Storypoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_status(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_prj_flow_state(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrjFlowState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_dms_flow_state(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DmsFlowState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_req_type(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_subtask_type(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtaskType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_assignee(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_reporter(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reporter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_dev(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_qa(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qa, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_pd(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_be(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Be, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_fe(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_other(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Other, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_fixversions(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fixversions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_labels(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_related_person(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelatedPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_expect_prd_date(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectPrdDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_expect_uat_date(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectUatDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_expect_live_date(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectLiveDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_fe_expect_duration(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeExpectDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_be_expect_duration(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeExpectDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_qa_expect_duration(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QaExpectDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_pd_expect_duration(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PdExpectDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_other_expect_duration(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherExpectDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_checklist(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checklist, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_reports(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reports, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_sync_jira_time(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SyncJiraTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjRequirementTab)
	fc.Result = res
	return ec.marshalOPrjRequirementTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRequirementTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjRequirementTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRequirementTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_project_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_pre_risk_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreRiskID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_title(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_owner(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_state(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_end_time(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_risk_type(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_risk_level(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_solution(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Solution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_remark(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjRiskTab)
	fc.Result = res
	return ec.marshalOPrjRiskTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjRiskTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjRiskTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjRiskTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_group_key_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupKeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_parent_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentJiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_parent_key(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_jira_key(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_task_type(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_subtask_type(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtaskType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_title(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_priority(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_creator(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_start_date(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_due_date(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_story_points(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_status(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_assignee(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_reporter(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reporter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_fix_version(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FixVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_label(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjSubtaskInfo_oper_ret(ctx context.Context, field graphql.CollectedField, obj *model.PrjSubtaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjSubtaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperRet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjUserTaskdetailTemplateTab_id(ctx context.Context, field graphql.CollectedField, obj *model.PrjUserTaskdetailTemplateTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjUserTaskdetailTemplateTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjUserTaskdetailTemplateTab_user_email(ctx context.Context, field graphql.CollectedField, obj *model.PrjUserTaskdetailTemplateTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjUserTaskdetailTemplateTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjUserTaskdetailTemplateTab_conf(ctx context.Context, field graphql.CollectedField, obj *model.PrjUserTaskdetailTemplateTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjUserTaskdetailTemplateTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conf, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjUserTaskdetailTemplateTab_update_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjUserTaskdetailTemplateTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjUserTaskdetailTemplateTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjUserTaskdetailTemplateTab_create_by(ctx context.Context, field graphql.CollectedField, obj *model.PrjUserTaskdetailTemplateTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjUserTaskdetailTemplateTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjUserTaskdetailTemplateTab_mtime(ctx context.Context, field graphql.CollectedField, obj *model.PrjUserTaskdetailTemplateTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjUserTaskdetailTemplateTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjUserTaskdetailTemplateTab_ctime(ctx context.Context, field graphql.CollectedField, obj *model.PrjUserTaskdetailTemplateTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjUserTaskdetailTemplateTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjUserTaskdetailTemplateTab_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.PrjUserTaskdetailTemplateTab) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjUserTaskdetailTemplateTab",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjUserTaskdetailTemplateTabPagerInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.PrjUserTaskdetailTemplateTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjUserTaskdetailTemplateTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjUserTaskdetailTemplateTab)
	fc.Result = res
	return ec.marshalOPrjUserTaskdetailTemplateTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PrjUserTaskdetailTemplateTabPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PrjUserTaskdetailTemplateTabPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PrjUserTaskdetailTemplateTabPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectChangeRecord_operator(ctx context.Context, field graphql.CollectedField, obj *model.ProjectChangeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectChangeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectChangeRecord_old_state(ctx context.Context, field graphql.CollectedField, obj *model.ProjectChangeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectChangeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectChangeRecord_new_state(ctx context.Context, field graphql.CollectedField, obj *model.ProjectChangeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectChangeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectChangeRecord_old_state_desc(ctx context.Context, field graphql.CollectedField, obj *model.ProjectChangeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectChangeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldStateDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectChangeRecord_new_state_desc(ctx context.Context, field graphql.CollectedField, obj *model.ProjectChangeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectChangeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewStateDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectChangeRecord_old_risk(ctx context.Context, field graphql.CollectedField, obj *model.ProjectChangeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectChangeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldRisk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectChangeRecord_new_risk(ctx context.Context, field graphql.CollectedField, obj *model.ProjectChangeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectChangeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewRisk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectChangeRecord_change_time(ctx context.Context, field graphql.CollectedField, obj *model.ProjectChangeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectChangeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectChangeRecord_change_remark(ctx context.Context, field graphql.CollectedField, obj *model.ProjectChangeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectChangeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_id(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_name(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_desc(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_type(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_progress(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_state(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_state_desc(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StateDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_risk(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Risk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_owner(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_department_id(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_group_key_ids(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupKeyIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_plan_start_date(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_plan_end_date(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_state_history(ctx context.Context, field graphql.CollectedField, obj *model.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StateHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DataChangeHistory)
	fc.Result = res
	return ec.marshalODataChangeHistory2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐDataChangeHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_desc(ctx context.Context, field graphql.CollectedField, obj *model.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_progress(ctx context.Context, field graphql.CollectedField, obj *model.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_state(ctx context.Context, field graphql.CollectedField, obj *model.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_risk(ctx context.Context, field graphql.CollectedField, obj *model.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Risk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_owner(ctx context.Context, field graphql.CollectedField, obj *model.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_plan_start_date(ctx context.Context, field graphql.CollectedField, obj *model.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_plan_end_date(ctx context.Context, field graphql.CollectedField, obj *model.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectMemberInfo_user_email(ctx context.Context, field graphql.CollectedField, obj *model.ProjectMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectMemberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectMemberInfo_user_name(ctx context.Context, field graphql.CollectedField, obj *model.ProjectMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectMemberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectMemberInfo_product_line(ctx context.Context, field graphql.CollectedField, obj *model.ProjectMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectMemberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductLine, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectMemberInfo_team(ctx context.Context, field graphql.CollectedField, obj *model.ProjectMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectMemberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Team, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectMemberInfo_role(ctx context.Context, field graphql.CollectedField, obj *model.ProjectMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectMemberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectMemberInfo_project_role(ctx context.Context, field graphql.CollectedField, obj *model.ProjectMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectMemberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectMemberPagerInfo_Member_list(ctx context.Context, field graphql.CollectedField, obj *model.ProjectMemberPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectMemberPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectMemberInfo)
	fc.Result = res
	return ec.marshalOProjectMemberInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectMemberPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.ProjectMemberPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectMemberPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectMenuInfo_Menu_list(ctx context.Context, field graphql.CollectedField, obj *model.ProjectMenuInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectMenuInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MenuList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectsPagerInfo_project_list(ctx context.Context, field graphql.CollectedField, obj *model.ProjectsPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectsPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectInfo)
	fc.Result = res
	return ec.marshalOProjectInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectsPagerInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.ProjectsPagerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectsPagerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjChangeRecordTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjChangeRecordTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjChangeRecordTabsForPager(rctx, args["query"].(*model.PrjChangeRecordTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjChangeRecordTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjChangeRecordTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjChangeRecordTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjChangeRecordTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjChangeRecordTabs(rctx, args["query"].(*model.PrjChangeRecordTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjChangeRecordTab)
	fc.Result = res
	return ec.marshalNPrjChangeRecordTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjChangeRecordTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjChangeRecordTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjChangeRecordTab(rctx, args["id"].(*int), args["query"].(*model.PrjChangeRecordTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjChangeRecordTab)
	fc.Result = res
	return ec.marshalNPrjChangeRecordTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjGanttGroupDepartmentTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjGanttGroupDepartmentTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjGanttGroupDepartmentTabsForPager(rctx, args["query"].(*model.PrjGanttGroupDepartmentTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupDepartmentTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjGanttGroupDepartmentTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjGanttGroupDepartmentTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjGanttGroupDepartmentTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjGanttGroupDepartmentTabs(rctx, args["query"].(*model.PrjGanttGroupDepartmentTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjGanttGroupDepartmentTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupDepartmentTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjGanttGroupDepartmentTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjGanttGroupDepartmentTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjGanttGroupDepartmentTab(rctx, args["id"].(*int), args["query"].(*model.PrjGanttGroupDepartmentTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupDepartmentTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjGanttGroupMemberTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjGanttGroupMemberTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjGanttGroupMemberTabsForPager(rctx, args["query"].(*model.PrjGanttGroupMemberTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupMemberTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjGanttGroupMemberTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjGanttGroupMemberTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjGanttGroupMemberTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjGanttGroupMemberTabs(rctx, args["query"].(*model.PrjGanttGroupMemberTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjGanttGroupMemberTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupMemberTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjGanttGroupMemberTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjGanttGroupMemberTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjGanttGroupMemberTab(rctx, args["id"].(*int), args["query"].(*model.PrjGanttGroupMemberTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupMemberTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupMemberTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjGanttGroupTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjGanttGroupTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjGanttGroupTabsForPager(rctx, args["query"].(*model.PrjGanttGroupTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjGanttGroupTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjGanttGroupTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjGanttGroupTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjGanttGroupTabs(rctx, args["query"].(*model.PrjGanttGroupTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjGanttGroupTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjGanttGroupTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjGanttGroupTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjGanttGroupTab(rctx, args["id"].(*int), args["query"].(*model.PrjGanttGroupTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjGanttGroupTab)
	fc.Result = res
	return ec.marshalNPrjGanttGroupTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjMilestoneTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjMilestoneTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjMilestoneTabsForPager(rctx, args["query"].(*model.PrjMilestoneTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjMilestoneTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjMilestoneTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjMilestoneTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjMilestoneTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjMilestoneTabs(rctx, args["query"].(*model.PrjMilestoneTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjMilestoneTab)
	fc.Result = res
	return ec.marshalNPrjMilestoneTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjMilestoneTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjMilestoneTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjMilestoneTab(rctx, args["id"].(*int), args["query"].(*model.PrjMilestoneTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjMilestoneTab)
	fc.Result = res
	return ec.marshalNPrjMilestoneTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjProjectDepartmentTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjProjectDepartmentTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjProjectDepartmentTabsForPager(rctx, args["query"].(*model.PrjProjectDepartmentTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectDepartmentTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjProjectDepartmentTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjProjectDepartmentTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjProjectDepartmentTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjProjectDepartmentTabs(rctx, args["query"].(*model.PrjProjectDepartmentTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjProjectDepartmentTab)
	fc.Result = res
	return ec.marshalNPrjProjectDepartmentTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjProjectDepartmentTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjProjectDepartmentTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjProjectDepartmentTab(rctx, args["id"].(*int), args["query"].(*model.PrjProjectDepartmentTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectDepartmentTab)
	fc.Result = res
	return ec.marshalNPrjProjectDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjProjectTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjProjectTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjProjectTabsForPager(rctx, args["query"].(*model.PrjProjectTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjProjectTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjProjectTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjProjectTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjProjectTabs(rctx, args["query"].(*model.PrjProjectTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjProjectTab)
	fc.Result = res
	return ec.marshalNPrjProjectTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjProjectTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjProjectTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjProjectTab(rctx, args["id"].(*int), args["query"].(*model.PrjProjectTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectTab)
	fc.Result = res
	return ec.marshalNPrjProjectTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjProjectUserTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjProjectUserTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjProjectUserTabsForPager(rctx, args["query"].(*model.PrjProjectUserTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectUserTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjProjectUserTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjProjectUserTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjProjectUserTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjProjectUserTabs(rctx, args["query"].(*model.PrjProjectUserTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjProjectUserTab)
	fc.Result = res
	return ec.marshalNPrjProjectUserTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjProjectUserTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjProjectUserTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjProjectUserTab(rctx, args["id"].(*int), args["query"].(*model.PrjProjectUserTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjProjectUserTab)
	fc.Result = res
	return ec.marshalNPrjProjectUserTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjRequirementRelatedTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjRequirementRelatedTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjRequirementRelatedTabsForPager(rctx, args["query"].(*model.PrjRequirementRelatedTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRequirementRelatedTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjRequirementRelatedTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjRequirementRelatedTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjRequirementRelatedTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjRequirementRelatedTabs(rctx, args["query"].(*model.PrjRequirementRelatedTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjRequirementRelatedTab)
	fc.Result = res
	return ec.marshalNPrjRequirementRelatedTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjRequirementRelatedTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjRequirementRelatedTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjRequirementRelatedTab(rctx, args["id"].(*int), args["query"].(*model.PrjRequirementRelatedTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRequirementRelatedTab)
	fc.Result = res
	return ec.marshalNPrjRequirementRelatedTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjRequirementTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjRequirementTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjRequirementTabsForPager(rctx, args["query"].(*model.PrjRequirementTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRequirementTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjRequirementTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjRequirementTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjRequirementTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjRequirementTabs(rctx, args["query"].(*model.PrjRequirementTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjRequirementTab)
	fc.Result = res
	return ec.marshalNPrjRequirementTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjRequirementTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjRequirementTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjRequirementTab(rctx, args["id"].(*int), args["query"].(*model.PrjRequirementTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRequirementTab)
	fc.Result = res
	return ec.marshalNPrjRequirementTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjReqFlowTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjReqFlowTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjReqFlowTabsForPager(rctx, args["query"].(*model.PrjReqFlowTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjReqFlowTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjReqFlowTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjReqFlowTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjReqFlowTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjReqFlowTabs(rctx, args["query"].(*model.PrjReqFlowTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjReqFlowTab)
	fc.Result = res
	return ec.marshalNPrjReqFlowTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjReqFlowTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjReqFlowTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjReqFlowTab(rctx, args["id"].(*int), args["query"].(*model.PrjReqFlowTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjReqFlowTab)
	fc.Result = res
	return ec.marshalNPrjReqFlowTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjRiskTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjRiskTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjRiskTabsForPager(rctx, args["query"].(*model.PrjRiskTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRiskTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjRiskTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjRiskTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjRiskTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjRiskTabs(rctx, args["query"].(*model.PrjRiskTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjRiskTab)
	fc.Result = res
	return ec.marshalNPrjRiskTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjRiskTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjRiskTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjRiskTab(rctx, args["id"].(*int), args["query"].(*model.PrjRiskTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjRiskTab)
	fc.Result = res
	return ec.marshalNPrjRiskTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjUserTaskdetailTemplateTabsForPager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjUserTaskdetailTemplateTabsForPager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjUserTaskdetailTemplateTabsForPager(rctx, args["query"].(*model.PrjUserTaskdetailTemplateTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjUserTaskdetailTemplateTabPagerInfo)
	fc.Result = res
	return ec.marshalNPrjUserTaskdetailTemplateTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjUserTaskdetailTemplateTabs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjUserTaskdetailTemplateTabs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjUserTaskdetailTemplateTabs(rctx, args["query"].(*model.PrjUserTaskdetailTemplateTabInput), args["pager"].(model.PagerInput), args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrjUserTaskdetailTemplateTab)
	fc.Result = res
	return ec.marshalNPrjUserTaskdetailTemplateTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrjUserTaskdetailTemplateTab(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPrjUserTaskdetailTemplateTab_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrjUserTaskdetailTemplateTab(rctx, args["id"].(*int), args["query"].(*model.PrjUserTaskdetailTemplateTabInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrjUserTaskdetailTemplateTab)
	fc.Result = res
	return ec.marshalNPrjUserTaskdetailTemplateTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTab(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetEnumsList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetEnumsList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnumsResult)
	fc.Result = res
	return ec.marshalOEnumsResult2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐEnumsResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetMilestoneList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetMilestoneList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetMilestoneList(rctx, args["project_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MilestonePagerInfo)
	fc.Result = res
	return ec.marshalOMilestonePagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐMilestonePagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetMilestoneChangeHistory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetMilestoneChangeHistory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetMilestoneChangeHistory(rctx, args["project_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DataChangeHistory)
	fc.Result = res
	return ec.marshalODataChangeHistory2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐDataChangeHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetVersions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetVersions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetVersionsByBoards(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetVersionsByBoards_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetVersionsByBoards(rctx, args["jira_boards"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetGroupTaskList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetGroupTaskList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetGroupTaskList(rctx, args["input"].(model.ReqPoolTaskInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ReqPoolTaskData)
	fc.Result = res
	return ec.marshalOReqPoolTaskData2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskData(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetKanBoardTaskList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetKanBoardTaskList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetKanBoardTaskList(rctx, args["input"].(model.ReqPoolTasKanBoardInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ReqPoolTaskData)
	fc.Result = res
	return ec.marshalOReqPoolTaskData2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskData(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetDmsFlowId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetDmsFlowId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetDmsFlowID(rctx, args["input"].([]*model.FlowRelationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FlowRelationInfo)
	fc.Result = res
	return ec.marshalOFlowRelationInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐFlowRelationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetJiraBoardsTaskList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetJiraBoardsTaskList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetJiraBoardsTaskList(rctx, args["input"].(*model.JiraBoardsTaskInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ReqPoolTaskInfo)
	fc.Result = res
	return ec.marshalOReqPoolTaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetRiskList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetRiskList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetRiskList(rctx, args["project_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RiskInfo)
	fc.Result = res
	return ec.marshalORiskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐRiskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetProjectDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetProjectDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetProjectDetail(rctx, args["project_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectDetail)
	fc.Result = res
	return ec.marshalOProjectDetail2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetProjectList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetProjectList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetProjectList(rctx, args["department_id"].(string), args["query"].(model.QueryProjectInput), args["pager"].(model.PagerFrontInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectsPagerInfo)
	fc.Result = res
	return ec.marshalOProjectsPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectsPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetProjectMemberList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetProjectMemberList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetProjectMemberList(rctx, args["project_id"].(int), args["query"].(model.QueryProjectMemberInput), args["pager"].(model.PagerFrontInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectMemberPagerInfo)
	fc.Result = res
	return ec.marshalOProjectMemberPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetProjectMenu(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetProjectMenu_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetProjectMenu(rctx, args["project_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectMenuInfo)
	fc.Result = res
	return ec.marshalOProjectMenuInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMenuInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizEarmakedGetTaskLit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizEarmakedGetTaskLit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizEarmakedGetTaskLit(rctx, args["project_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EarmakedPrjTaskInfo)
	fc.Result = res
	return ec.marshalOEarmakedPrjTaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐEarmakedPrjTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetGanttGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetGanttGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetGanttGroup(rctx, args["gantt_group_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GanttGroupDetail)
	fc.Result = res
	return ec.marshalOGanttGroupDetail2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetGanttGroupList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetGanttGroupList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetGanttGroupList(rctx, args["department_id"].(string), args["pager"].(model.PagerFrontInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GanttGroupsPagerInfo)
	fc.Result = res
	return ec.marshalOGanttGroupsPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupsPagerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetGanttScheduledSubtaskList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetGanttScheduledSubtaskList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetGanttScheduledSubtaskList(rctx, args["gantt_group_id"].(int), args["start_time"].(string), args["end_time"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GanttGroupTaskInfo)
	fc.Result = res
	return ec.marshalOGanttGroupTaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetGanttUnScheduledSubtaskList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetGanttUnScheduledSubtaskList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetGanttUnScheduledSubtaskList(rctx, args["user_email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GanttGroupTaskInfo)
	fc.Result = res
	return ec.marshalOGanttGroupTaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetGanttTaskList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetGanttTaskList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetGanttTaskList(rctx, args["gantt_group_id"].(int), args["jira_key"].(*string), args["pageno"].(int), args["count"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PrjSubtaskInfo)
	fc.Result = res
	return ec.marshalOPrjSubtaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BizGetGanttUnScheduledSubtaskNum(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BizGetGanttUnScheduledSubtaskNum_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BizGetGanttUnScheduledSubtaskNum(rctx, args["gantt_group_id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserTaskNumInfo)
	fc.Result = res
	return ec.marshalOUserTaskNumInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUserTaskNumInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskData_total(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskData_task_list(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReqPoolTaskInfo)
	fc.Result = res
	return ec.marshalNReqPoolTaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_task_parent_jira_key(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskParentJiraKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_task_parent_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskParentJiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_related_task(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelatedTask, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JiraKeyJiraIDInfo)
	fc.Result = res
	return ec.marshalOJiraKeyJiraIdInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraKeyJiraIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_son_task(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SonTask, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JiraKeyJiraIDInfo)
	fc.Result = res
	return ec.marshalOJiraKeyJiraIdInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraKeyJiraIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_project_id(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_jira_id(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_jira_key(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_jira_type(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_jira_board(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JiraBoard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_req_type(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_summary(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Summary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_remark(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_start_date(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_due_date(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_ctime(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ctime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_mtime(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_story_points(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_subtask_storypoints(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtaskStorypoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_priority(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_flow_state(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FlowState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_assignee(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_reporter(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reporter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_be(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Be, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_fe(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_qa(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qa, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_pd(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_other(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Other, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_be_expect_duration(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeExpectDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_fe_expect_duration(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeExpectDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_qa_expect_duration(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QaExpectDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_pd_expect_duration(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PdExpectDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_other_expect_duration(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherExpectDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_fix_version(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FixVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ReqPoolTaskInfo_labels(ctx context.Context, field graphql.CollectedField, obj *model.ReqPoolTaskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReqPoolTaskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RiskInfo_project_id(ctx context.Context, field graphql.CollectedField, obj *model.RiskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RiskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RiskInfo_pre_risk_id(ctx context.Context, field graphql.CollectedField, obj *model.RiskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RiskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreRiskID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RiskInfo_title(ctx context.Context, field graphql.CollectedField, obj *model.RiskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RiskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RiskInfo_owner(ctx context.Context, field graphql.CollectedField, obj *model.RiskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RiskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RiskInfo_state(ctx context.Context, field graphql.CollectedField, obj *model.RiskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RiskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RiskInfo_end_time(ctx context.Context, field graphql.CollectedField, obj *model.RiskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RiskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RiskInfo_risk_type(ctx context.Context, field graphql.CollectedField, obj *model.RiskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RiskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RiskInfo_risk_level(ctx context.Context, field graphql.CollectedField, obj *model.RiskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RiskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RiskInfo_solution(ctx context.Context, field graphql.CollectedField, obj *model.RiskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RiskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Solution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RiskInfo_remark(ctx context.Context, field graphql.CollectedField, obj *model.RiskInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RiskInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_user_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_user_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_product_line(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductLine, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_team(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Team, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_role(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTaskNumInfo_user_email(ctx context.Context, field graphql.CollectedField, obj *model.UserTaskNumInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTaskNumInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTaskNumInfo_unscheduled_subtasknum(ctx context.Context, field graphql.CollectedField, obj *model.UserTaskNumInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTaskNumInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnscheduledSubtasknum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddProjectMemberInput(ctx context.Context, obj interface{}) (model.AddProjectMemberInput, error) {
	var it model.AddProjectMemberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "member_list":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member_list"))
			it.MemberList, err = ec.unmarshalOProjectMemberInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteGanttGroupMembersInput(ctx context.Context, obj interface{}) (model.DeleteGanttGroupMembersInput, error) {
	var it model.DeleteGanttGroupMembersInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "gantt_group_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gantt_group_id"))
			it.GanttGroupID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "member_list":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member_list"))
			it.MemberList, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectMemberInput(ctx context.Context, obj interface{}) (model.DeleteProjectMemberInput, error) {
	var it model.DeleteProjectMemberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "member_list":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member_list"))
			it.MemberList, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFlowRelationInput(ctx context.Context, obj interface{}) (model.FlowRelationInput, error) {
	var it model.FlowRelationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "jira_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_id"))
			it.JiraID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_key"))
			it.JiraKey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "group_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group_id"))
			it.GroupID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGanttGroupInput(ctx context.Context, obj interface{}) (model.GanttGroupInput, error) {
	var it model.GanttGroupInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalNString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "group_key_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group_key_ids"))
			it.GroupKeyIds, err = ec.unmarshalNString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "member_list":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member_list"))
			it.MemberList, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGanttGroupMemberInput(ctx context.Context, obj interface{}) (model.GanttGroupMemberInput, error) {
	var it model.GanttGroupMemberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "gantt_group_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gantt_group_id"))
			it.GanttGroupID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "member_list":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member_list"))
			it.MemberList, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJiraBoardsTaskInput(ctx context.Context, obj interface{}) (model.JiraBoardsTaskInput, error) {
	var it model.JiraBoardsTaskInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "jira_boards":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_boards"))
			it.JiraBoards, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_key"))
			it.JiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "current":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current"))
			it.Current, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJiraKeyJiraIdInput(ctx context.Context, obj interface{}) (model.JiraKeyJiraIDInput, error) {
	var it model.JiraKeyJiraIDInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_key"))
			it.JiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_id"))
			it.JiraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMilestoneInput(ctx context.Context, obj interface{}) (model.MilestoneInput, error) {
	var it model.MilestoneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "order_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_num"))
			it.OrderNum, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_time"))
			it.PlanEndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "real_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("real_end_time"))
			it.RealEndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPagerFrontInput(ctx context.Context, obj interface{}) (model.PagerFrontInput, error) {
	var it model.PagerFrontInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "pageno":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageno"))
			it.Pageno, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPagerInput(ctx context.Context, obj interface{}) (model.PagerInput, error) {
	var it model.PagerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjChangeRecordTabInput(ctx context.Context, obj interface{}) (model.PrjChangeRecordTabInput, error) {
	var it model.PrjChangeRecordTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tab_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tab_name"))
			it.TabName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "field_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field_name"))
			it.FieldName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
			it.RecordID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oper_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oper_type"))
			it.OperType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "old_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("old_value"))
			it.OldValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_value"))
			it.NewValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjGanttGroupDepartmentTabInput(ctx context.Context, obj interface{}) (model.PrjGanttGroupDepartmentTabInput, error) {
	var it model.PrjGanttGroupDepartmentTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "gantt_group_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gantt_group_id"))
			it.GanttGroupID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "group_key_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group_key_id"))
			it.GroupKeyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjGanttGroupMemberTabInput(ctx context.Context, obj interface{}) (model.PrjGanttGroupMemberTabInput, error) {
	var it model.PrjGanttGroupMemberTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_email"))
			it.UserEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gantt_group_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gantt_group_id"))
			it.GanttGroupID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjGanttGroupTabInput(ctx context.Context, obj interface{}) (model.PrjGanttGroupTabInput, error) {
	var it model.PrjGanttGroupTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "gantt_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gantt_name"))
			it.GanttName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gentt_desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gentt_desc"))
			it.GenttDesc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjMilestoneTabInput(ctx context.Context, obj interface{}) (model.PrjMilestoneTabInput, error) {
	var it model.PrjMilestoneTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "order_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_num"))
			it.OrderNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_time"))
			it.PlanEndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "real_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("real_end_time"))
			it.RealEndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjProjectDepartmentTabInput(ctx context.Context, obj interface{}) (model.PrjProjectDepartmentTabInput, error) {
	var it model.PrjProjectDepartmentTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_key_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_key_id"))
			it.DepartmentKeyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "group_key_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group_key_id"))
			it.GroupKeyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjProjectTabInput(ctx context.Context, obj interface{}) (model.PrjProjectTabInput, error) {
	var it model.PrjProjectTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			it.Progress, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "risk":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("risk"))
			it.Risk, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_desc"))
			it.StateDesc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "prj_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prj_type"))
			it.PrjType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjProjectUserTabInput(ctx context.Context, obj interface{}) (model.PrjProjectUserTabInput, error) {
	var it model.PrjProjectUserTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_email"))
			it.UserEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_role"))
			it.ProjectRole, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjReqFlowTabInput(ctx context.Context, obj interface{}) (model.PrjReqFlowTabInput, error) {
	var it model.PrjReqFlowTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_id"))
			it.JiraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_key"))
			it.JiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "group_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group_id"))
			it.GroupID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "group_key_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group_key_id"))
			it.GroupKeyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "flow_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flow_id"))
			it.FlowID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjRequirementRelatedTabInput(ctx context.Context, obj interface{}) (model.PrjRequirementRelatedTabInput, error) {
	var it model.PrjRequirementRelatedTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "req_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req_id"))
			it.ReqID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_id"))
			it.JiraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_key"))
			it.JiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_req_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_req_id"))
			it.RelatedReqID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_jira_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_jira_id"))
			it.RelatedJiraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_jira_key"))
			it.RelatedJiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjRequirementTabInput(ctx context.Context, obj interface{}) (model.PrjRequirementTabInput, error) {
	var it model.PrjRequirementTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_jira_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_jira_id"))
			it.ParentJiraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_jira_key"))
			it.ParentJiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "task_parent_jira_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("task_parent_jira_id"))
			it.TaskParentJiraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "task_parent_jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("task_parent_jira_key"))
			it.TaskParentJiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_id"))
			it.JiraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_key"))
			it.JiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_type"))
			it.JiraType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_board":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_board"))
			it.JiraBoard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			it.Priority, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creator"))
			it.Creator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "req_process":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req_process"))
			it.ReqProcess, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "storypoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storypoint"))
			it.Storypoint, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "prj_flow_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prj_flow_state"))
			it.PrjFlowState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "dms_flow_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dms_flow_state"))
			it.DmsFlowState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "req_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req_type"))
			it.ReqType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "subtask_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subtask_type"))
			it.SubtaskType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reporter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reporter"))
			it.Reporter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dev"))
			it.Dev, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "qa":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qa"))
			it.Qa, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pd":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pd"))
			it.Pd, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "be":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("be"))
			it.Be, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fe"))
			it.Fe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "other":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other"))
			it.Other, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fixversions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fixversions"))
			it.Fixversions, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			it.Labels, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_person"))
			it.RelatedPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expect_prd_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expect_prd_date"))
			it.ExpectPrdDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expect_uat_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expect_uat_date"))
			it.ExpectUatDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expect_live_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expect_live_date"))
			it.ExpectLiveDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fe_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fe_expect_duration"))
			it.FeExpectDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "be_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("be_expect_duration"))
			it.BeExpectDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "qa_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qa_expect_duration"))
			it.QaExpectDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pd_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pd_expect_duration"))
			it.PdExpectDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_expect_duration"))
			it.OtherExpectDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "checklist":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checklist"))
			it.Checklist, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reports":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reports"))
			it.Reports, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sync_jira_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sync_jira_time"))
			it.SyncJiraTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjRiskTabInput(ctx context.Context, obj interface{}) (model.PrjRiskTabInput, error) {
	var it model.PrjRiskTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pre_risk_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pre_risk_id"))
			it.PreRiskID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "risk_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("risk_type"))
			it.RiskType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "risk_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("risk_level"))
			it.RiskLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "solution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("solution"))
			it.Solution, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjSubtaskAddInput(ctx context.Context, obj interface{}) (model.PrjSubtaskAddInput, error) {
	var it model.PrjSubtaskAddInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "group_key_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group_key_id"))
			it.GroupKeyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_jira_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_jira_id"))
			it.ParentJiraID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_key"))
			it.ParentKey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "task_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("task_type"))
			it.TaskType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "subtask_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subtask_type"))
			it.SubtaskType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "due_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("due_date"))
			it.DueDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "uniq_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uniq_id"))
			it.UniqID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "story_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("story_points"))
			it.StoryPoints, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fix_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fix_version"))
			it.FixVersion, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			it.Label, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_person"))
			it.RelatedPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expect_prd_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expect_prd_date"))
			it.ExpectPrdDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expect_uat_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expect_uat_date"))
			it.ExpectUatDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expect_live_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expect_live_date"))
			it.ExpectLiveDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fe_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fe_expect_duration"))
			it.FeExpectDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "be_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("be_expect_duration"))
			it.BeExpectDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "qa_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qa_expect_duration"))
			it.QaExpectDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjSubtaskEditInput(ctx context.Context, obj interface{}) (model.PrjSubtaskEditInput, error) {
	var it model.PrjSubtaskEditInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "subtask_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subtask_type"))
			it.SubtaskType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "due_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("due_date"))
			it.DueDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "uniq_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uniq_id"))
			it.UniqID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "story_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("story_points"))
			it.StoryPoints, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reporter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reporter"))
			it.Reporter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fix_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fix_version"))
			it.FixVersion, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			it.Label, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_person"))
			it.RelatedPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expect_prd_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expect_prd_date"))
			it.ExpectPrdDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expect_uat_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expect_uat_date"))
			it.ExpectUatDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expect_live_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expect_live_date"))
			it.ExpectLiveDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fe_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fe_expect_duration"))
			it.FeExpectDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "be_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("be_expect_duration"))
			it.BeExpectDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "qa_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qa_expect_duration"))
			it.QaExpectDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrjUserTaskdetailTemplateTabInput(ctx context.Context, obj interface{}) (model.PrjUserTaskdetailTemplateTabInput, error) {
	var it model.PrjUserTaskdetailTemplateTabInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_email"))
			it.UserEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conf":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conf"))
			it.Conf, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mtime"))
			it.Mtime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ctime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctime"))
			it.Ctime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectInput(ctx context.Context, obj interface{}) (model.ProjectInput, error) {
	var it model.ProjectInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			it.Progress, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "risk":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("risk"))
			it.Risk, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalNString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "group_key_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group_key_ids"))
			it.GroupKeyIds, err = ec.unmarshalNString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_start_date"))
			it.PlanStartDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_date"))
			it.PlanEndDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "member_list":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member_list"))
			it.MemberList, err = ec.unmarshalOProjectMemberInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectMemberInput(ctx context.Context, obj interface{}) (model.ProjectMemberInput, error) {
	var it model.ProjectMemberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "user_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_email"))
			it.UserEmail, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_role"))
			it.ProjectRole, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQueryProjectInput(ctx context.Context, obj interface{}) (model.QueryProjectInput, error) {
	var it model.QueryProjectInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			it.Progress, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQueryProjectMemberInput(ctx context.Context, obj interface{}) (model.QueryProjectMemberInput, error) {
	var it model.QueryProjectMemberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "user_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_email"))
			it.UserEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_role"))
			it.ProjectRole, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReqPoolTasKanBoardInput(ctx context.Context, obj interface{}) (model.ReqPoolTasKanBoardInput, error) {
	var it model.ReqPoolTasKanBoardInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "group_key_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group_key_id"))
			it.GroupKeyID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "current":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current"))
			it.Current, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_key"))
			it.JiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_board":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_board"))
			it.JiraBoard, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summary"))
			it.Summary, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "task_parent_jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("task_parent_jira_key"))
			it.TaskParentJiraKey, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "flow_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flow_state"))
			it.FlowState, err = ec.unmarshalOInt2ᚕᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			it.Priority, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reporter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reporter"))
			it.Reporter, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fix_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fix_version"))
			it.FixVersion, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "req_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req_type"))
			it.ReqType, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
			it.Sorts, err = ec.unmarshalOSortField2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐSortField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReqPoolTaskAddInput(ctx context.Context, obj interface{}) (model.ReqPoolTaskAddInput, error) {
	var it model.ReqPoolTaskAddInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "uniq_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uniq_id"))
			it.UniqID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_board":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_board"))
			it.JiraBoard, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "task_parent_jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("task_parent_jira_key"))
			it.TaskParentJiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "task_parent_jira_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("task_parent_jira_id"))
			it.TaskParentJiraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_task":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_task"))
			it.RelatedTask, err = ec.unmarshalOJiraKeyJiraIdInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraKeyJiraIDInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "summary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summary"))
			it.Summary, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "due_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("due_date"))
			it.DueDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reporter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reporter"))
			it.Reporter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "be":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("be"))
			it.Be, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "fe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fe"))
			it.Fe, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "qa":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qa"))
			it.Qa, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "pd":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pd"))
			it.Pd, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "other":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other"))
			it.Other, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "be_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("be_expect_duration"))
			it.BeExpectDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fe_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fe_expect_duration"))
			it.FeExpectDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "qa_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qa_expect_duration"))
			it.QaExpectDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "pd_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pd_expect_duration"))
			it.PdExpectDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_expect_duration"))
			it.OtherExpectDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fix_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fix_version"))
			it.FixVersion, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			it.Label, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			it.Priority, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "req_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req_type"))
			it.ReqType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "story_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("story_points"))
			it.StoryPoints, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReqPoolTaskEditInput(ctx context.Context, obj interface{}) (model.ReqPoolTaskEditInput, error) {
	var it model.ReqPoolTaskEditInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "uniq_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uniq_id"))
			it.UniqID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "task_parent_jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("task_parent_jira_key"))
			it.TaskParentJiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "task_parent_jira_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("task_parent_jira_id"))
			it.TaskParentJiraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_task":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_task"))
			it.RelatedTask, err = ec.unmarshalOJiraKeyJiraIdInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraKeyJiraIDInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "summary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summary"))
			it.Summary, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "flow_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flow_state"))
			it.FlowState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_remark"))
			it.StateRemark, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "due_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("due_date"))
			it.DueDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reporter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reporter"))
			it.Reporter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "be":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("be"))
			it.Be, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "fe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fe"))
			it.Fe, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "qa":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qa"))
			it.Qa, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "pd":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pd"))
			it.Pd, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "other":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other"))
			it.Other, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "be_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("be_expect_duration"))
			it.BeExpectDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fe_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fe_expect_duration"))
			it.FeExpectDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "qa_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qa_expect_duration"))
			it.QaExpectDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "pd_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pd_expect_duration"))
			it.PdExpectDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_expect_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_expect_duration"))
			it.OtherExpectDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fix_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fix_version"))
			it.FixVersion, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			it.Label, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			it.Priority, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "req_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req_type"))
			it.ReqType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "story_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("story_points"))
			it.StoryPoints, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReqPoolTaskInput(ctx context.Context, obj interface{}) (model.ReqPoolTaskInput, error) {
	var it model.ReqPoolTaskInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "group_key_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group_key_id"))
			it.GroupKeyID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "current":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current"))
			it.Current, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_key"))
			it.JiraKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira_board":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jira_board"))
			it.JiraBoard, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summary"))
			it.Summary, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "task_parent_jira_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("task_parent_jira_key"))
			it.TaskParentJiraKey, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "flow_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flow_state"))
			it.FlowState, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			it.Priority, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reporter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reporter"))
			it.Reporter, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fix_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fix_version"))
			it.FixVersion, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "req_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req_type"))
			it.ReqType, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
			it.Sorts, err = ec.unmarshalOSortField2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐSortField(ctx, v)
			if err != nil {
				return it, err
			}
		case "needtotal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("needtotal"))
			it.Needtotal, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRiskAddInput(ctx context.Context, obj interface{}) (model.RiskAddInput, error) {
	var it model.RiskAddInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "pre_risk_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pre_risk_id"))
			it.PreRiskID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "risk_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("risk_type"))
			it.RiskType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "risk_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("risk_level"))
			it.RiskLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "solution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("solution"))
			it.Solution, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRiskUpdateInput(ctx context.Context, obj interface{}) (model.RiskUpdateInput, error) {
	var it model.RiskUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "pre_risk_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pre_risk_id"))
			it.PreRiskID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "risk_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("risk_type"))
			it.RiskType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "risk_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("risk_level"))
			it.RiskLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "solution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("solution"))
			it.Solution, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSortField(ctx context.Context, obj interface{}) (model.SortField, error) {
	var it model.SortField
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			it.Key, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule"))
			it.Rule, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMilestoneInput(ctx context.Context, obj interface{}) (model.UpdateMilestoneInput, error) {
	var it model.UpdateMilestoneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "order_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_num"))
			it.OrderNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_time"))
			it.PlanEndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "real_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("real_end_time"))
			it.RealEndTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectInput(ctx context.Context, obj interface{}) (model.UpdateProjectInput, error) {
	var it model.UpdateProjectInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			it.Progress, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "group_key_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group_key_ids"))
			it.GroupKeyIds, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_start_date"))
			it.PlanStartDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_date"))
			it.PlanEndDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectMemberInput(ctx context.Context, obj interface{}) (model.UpdateProjectMemberInput, error) {
	var it model.UpdateProjectMemberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "member_info":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member_info"))
			it.MemberInfo, err = ec.unmarshalNProjectMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectStateInput(ctx context.Context, obj interface{}) (model.UpdateProjectStateInput, error) {
	var it model.UpdateProjectStateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_desc"))
			it.StateDesc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "risk":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("risk"))
			it.Risk, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserInput(ctx context.Context, obj interface{}) (model.UserInput, error) {
	var it model.UserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "user_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_email"))
			it.UserEmail, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_name"))
			it.UserName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_line":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_line"))
			it.ProductLine, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "team":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("team"))
			it.Team, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var commonEnumImplementors = []string{"CommonEnum"}

func (ec *executionContext) _CommonEnum(ctx context.Context, sel ast.SelectionSet, obj *model.CommonEnum) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commonEnumImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommonEnum")
		case "code":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CommonEnum_code(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CommonEnum_status_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataChangeHistoryImplementors = []string{"DataChangeHistory"}

func (ec *executionContext) _DataChangeHistory(ctx context.Context, sel ast.SelectionSet, obj *model.DataChangeHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataChangeHistoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataChangeHistory")
		case "tab_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataChangeHistory_tab_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "field_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataChangeHistory_field_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "record_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataChangeHistory_record_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "oper_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataChangeHistory_oper_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "old_value":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataChangeHistory_old_value(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "new_value":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataChangeHistory_new_value(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataChangeHistory_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataChangeHistory_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var earmakedPrjTaskInfoImplementors = []string{"EarmakedPrjTaskInfo"}

func (ec *executionContext) _EarmakedPrjTaskInfo(ctx context.Context, sel ast.SelectionSet, obj *model.EarmakedPrjTaskInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, earmakedPrjTaskInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EarmakedPrjTaskInfo")
		case "depart_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EarmakedPrjTaskInfo_depart_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "depart_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EarmakedPrjTaskInfo_depart_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "task_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EarmakedPrjTaskInfo_task_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var earmakedTaskInfoImplementors = []string{"EarmakedTaskInfo"}

func (ec *executionContext) _EarmakedTaskInfo(ctx context.Context, sel ast.SelectionSet, obj *model.EarmakedTaskInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, earmakedTaskInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EarmakedTaskInfo")
		case "info":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EarmakedTaskInfo_info(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "related_task_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EarmakedTaskInfo_related_task_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "subtask_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EarmakedTaskInfo_subtask_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enumsResultImplementors = []string{"EnumsResult"}

func (ec *executionContext) _EnumsResult(ctx context.Context, sel ast.SelectionSet, obj *model.EnumsResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enumsResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnumsResult")
		case "prj_flow_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EnumsResult_prj_flow_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "prj_flow_close_remark":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EnumsResult_prj_flow_close_remark(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "req_priority":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EnumsResult_req_priority(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "req_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EnumsResult_req_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "subtask_jira_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EnumsResult_subtask_jira_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "prj_progress":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EnumsResult_prj_progress(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "prj_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EnumsResult_prj_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "prj_risk":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EnumsResult_prj_risk(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "prj_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EnumsResult_prj_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "prj_member_role":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EnumsResult_prj_member_role(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "milestone_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EnumsResult_milestone_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var flowRelationInfoImplementors = []string{"FlowRelationInfo"}

func (ec *executionContext) _FlowRelationInfo(ctx context.Context, sel ast.SelectionSet, obj *model.FlowRelationInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, flowRelationInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FlowRelationInfo")
		case "jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FlowRelationInfo_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "jira_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FlowRelationInfo_jira_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "group_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FlowRelationInfo_group_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "flow_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FlowRelationInfo_flow_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "flow_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FlowRelationInfo_flow_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ganttGroupDetailImplementors = []string{"GanttGroupDetail"}

func (ec *executionContext) _GanttGroupDetail(ctx context.Context, sel ast.SelectionSet, obj *model.GanttGroupDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ganttGroupDetailImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GanttGroupDetail")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupDetail_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupDetail_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "desc":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupDetail_desc(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "owner":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupDetail_owner(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "department_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupDetail_department_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "group_key_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupDetail_group_key_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "member_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupDetail_member_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ganttGroupInfoImplementors = []string{"GanttGroupInfo"}

func (ec *executionContext) _GanttGroupInfo(ctx context.Context, sel ast.SelectionSet, obj *model.GanttGroupInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ganttGroupInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GanttGroupInfo")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupInfo_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupInfo_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "desc":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupInfo_desc(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "owner":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupInfo_owner(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ganttGroupMembersPagerInfoImplementors = []string{"GanttGroupMembersPagerInfo"}

func (ec *executionContext) _GanttGroupMembersPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.GanttGroupMembersPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ganttGroupMembersPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GanttGroupMembersPagerInfo")
		case "gantt_group_member_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupMembersPagerInfo_gantt_group_member_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupMembersPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ganttGroupTaskInfoImplementors = []string{"GanttGroupTaskInfo"}

func (ec *executionContext) _GanttGroupTaskInfo(ctx context.Context, sel ast.SelectionSet, obj *model.GanttGroupTaskInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ganttGroupTaskInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GanttGroupTaskInfo")
		case "member_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupTaskInfo_member_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "subtask_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupTaskInfo_subtask_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "task_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupTaskInfo_task_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ganttGroupsPagerInfoImplementors = []string{"GanttGroupsPagerInfo"}

func (ec *executionContext) _GanttGroupsPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.GanttGroupsPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ganttGroupsPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GanttGroupsPagerInfo")
		case "gantt_group_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupsPagerInfo_gantt_group_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GanttGroupsPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jiraKeyJiraIdInfoImplementors = []string{"JiraKeyJiraIdInfo"}

func (ec *executionContext) _JiraKeyJiraIdInfo(ctx context.Context, sel ast.SelectionSet, obj *model.JiraKeyJiraIDInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jiraKeyJiraIdInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JiraKeyJiraIdInfo")
		case "jira_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._JiraKeyJiraIdInfo_jira_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._JiraKeyJiraIdInfo_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var milestoneInfoImplementors = []string{"MilestoneInfo"}

func (ec *executionContext) _MilestoneInfo(ctx context.Context, sel ast.SelectionSet, obj *model.MilestoneInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, milestoneInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MilestoneInfo")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MilestoneInfo_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "project_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MilestoneInfo_project_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "order_num":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MilestoneInfo_order_num(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MilestoneInfo_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "desc":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MilestoneInfo_desc(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MilestoneInfo_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MilestoneInfo_owner(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "plan_end_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MilestoneInfo_plan_end_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "real_end_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MilestoneInfo_real_end_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var milestonePagerInfoImplementors = []string{"MilestonePagerInfo"}

func (ec *executionContext) _MilestonePagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.MilestonePagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, milestonePagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MilestonePagerInfo")
		case "milestone_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MilestonePagerInfo_milestone_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MilestonePagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createPrjChangeRecordTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjChangeRecordTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjChangeRecordTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjChangeRecordTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjGanttGroupDepartmentTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjGanttGroupDepartmentTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjGanttGroupDepartmentTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjGanttGroupDepartmentTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjGanttGroupMemberTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjGanttGroupMemberTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjGanttGroupMemberTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjGanttGroupMemberTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjGanttGroupTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjGanttGroupTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjGanttGroupTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjGanttGroupTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjMilestoneTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjMilestoneTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjMilestoneTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjMilestoneTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjProjectDepartmentTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjProjectDepartmentTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjProjectDepartmentTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjProjectDepartmentTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjProjectTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjProjectTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjProjectTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjProjectTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjProjectUserTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjProjectUserTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjProjectUserTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjProjectUserTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjRequirementRelatedTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjRequirementRelatedTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjRequirementRelatedTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjRequirementRelatedTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjRequirementTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjRequirementTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjRequirementTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjRequirementTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjReqFlowTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjReqFlowTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjReqFlowTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjReqFlowTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjRiskTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjRiskTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjRiskTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjRiskTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPrjUserTaskdetailTemplateTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPrjUserTaskdetailTemplateTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePrjUserTaskdetailTemplateTab":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePrjUserTaskdetailTemplateTab(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "BizCreateMilestone":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizCreateMilestone(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizUpdateMilestone":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizUpdateMilestone(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizDeleteMilestone":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizDeleteMilestone(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizCreateMilestoneTpl":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizCreateMilestoneTpl(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizCreateTask":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizCreateTask(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizUpdateTask":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizUpdateTask(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizCreateRisk":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizCreateRisk(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizUpdateRisk":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizUpdateRisk(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizCreateProject":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizCreateProject(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizUpdateProject":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizUpdateProject(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizUpdateProjectState":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizUpdateProjectState(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizDeleteProject":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizDeleteProject(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizAddProjectMembers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizAddProjectMembers(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizUpdateProjectMember":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizUpdateProjectMember(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizDeleteProjectMembers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizDeleteProjectMembers(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizEarmakedImportTaskList":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizEarmakedImportTaskList(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizEarmakedCreateTask":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizEarmakedCreateTask(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizEarmakedDeleteTask":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizEarmakedDeleteTask(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizCreateGanttGroup":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizCreateGanttGroup(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizUpdateGanttGroup":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizUpdateGanttGroup(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizDeleteGanttGroup":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizDeleteGanttGroup(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizAddGanttGroupMembers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizAddGanttGroupMembers(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizDeleteGanttGroupMembers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizDeleteGanttGroupMembers(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "BizCreateSubtask":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizCreateSubtask(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "BizUpdateSubtask":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_BizUpdateSubtask(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjChangeRecordTabImplementors = []string{"PrjChangeRecordTab"}

func (ec *executionContext) _PrjChangeRecordTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjChangeRecordTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjChangeRecordTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjChangeRecordTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tab_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_tab_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "field_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_field_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "record_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_record_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "oper_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_oper_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "old_value":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_old_value(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "new_value":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_new_value(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjChangeRecordTabPagerInfoImplementors = []string{"PrjChangeRecordTabPagerInfo"}

func (ec *executionContext) _PrjChangeRecordTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjChangeRecordTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjChangeRecordTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjChangeRecordTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjChangeRecordTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjGanttGroupDepartmentTabImplementors = []string{"PrjGanttGroupDepartmentTab"}

func (ec *executionContext) _PrjGanttGroupDepartmentTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjGanttGroupDepartmentTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjGanttGroupDepartmentTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjGanttGroupDepartmentTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupDepartmentTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "gantt_group_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupDepartmentTab_gantt_group_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "department_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupDepartmentTab_department_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "group_key_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupDepartmentTab_group_key_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupDepartmentTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupDepartmentTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupDepartmentTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupDepartmentTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupDepartmentTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjGanttGroupDepartmentTabPagerInfoImplementors = []string{"PrjGanttGroupDepartmentTabPagerInfo"}

func (ec *executionContext) _PrjGanttGroupDepartmentTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjGanttGroupDepartmentTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjGanttGroupDepartmentTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjGanttGroupDepartmentTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupDepartmentTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupDepartmentTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjGanttGroupMemberTabImplementors = []string{"PrjGanttGroupMemberTab"}

func (ec *executionContext) _PrjGanttGroupMemberTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjGanttGroupMemberTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjGanttGroupMemberTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjGanttGroupMemberTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupMemberTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "user_email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupMemberTab_user_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "gantt_group_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupMemberTab_gantt_group_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupMemberTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupMemberTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupMemberTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupMemberTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupMemberTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjGanttGroupMemberTabPagerInfoImplementors = []string{"PrjGanttGroupMemberTabPagerInfo"}

func (ec *executionContext) _PrjGanttGroupMemberTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjGanttGroupMemberTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjGanttGroupMemberTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjGanttGroupMemberTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupMemberTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupMemberTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjGanttGroupTabImplementors = []string{"PrjGanttGroupTab"}

func (ec *executionContext) _PrjGanttGroupTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjGanttGroupTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjGanttGroupTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjGanttGroupTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "gantt_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupTab_gantt_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "gentt_desc":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupTab_gentt_desc(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "owner":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupTab_owner(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjGanttGroupTabPagerInfoImplementors = []string{"PrjGanttGroupTabPagerInfo"}

func (ec *executionContext) _PrjGanttGroupTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjGanttGroupTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjGanttGroupTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjGanttGroupTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjGanttGroupTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjMilestoneTabImplementors = []string{"PrjMilestoneTab"}

func (ec *executionContext) _PrjMilestoneTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjMilestoneTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjMilestoneTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjMilestoneTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "project_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_project_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "owner":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_owner(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "order_num":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_order_num(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "plan_end_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_plan_end_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "real_end_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_real_end_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "start_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_start_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "end_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_end_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "desc":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_desc(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjMilestoneTabPagerInfoImplementors = []string{"PrjMilestoneTabPagerInfo"}

func (ec *executionContext) _PrjMilestoneTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjMilestoneTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjMilestoneTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjMilestoneTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjMilestoneTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjProjectDepartmentTabImplementors = []string{"PrjProjectDepartmentTab"}

func (ec *executionContext) _PrjProjectDepartmentTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjProjectDepartmentTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjProjectDepartmentTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjProjectDepartmentTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectDepartmentTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "project_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectDepartmentTab_project_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "department_key_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectDepartmentTab_department_key_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "group_key_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectDepartmentTab_group_key_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectDepartmentTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectDepartmentTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectDepartmentTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectDepartmentTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectDepartmentTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjProjectDepartmentTabPagerInfoImplementors = []string{"PrjProjectDepartmentTabPagerInfo"}

func (ec *executionContext) _PrjProjectDepartmentTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjProjectDepartmentTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjProjectDepartmentTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjProjectDepartmentTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectDepartmentTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectDepartmentTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjProjectTabImplementors = []string{"PrjProjectTab"}

func (ec *executionContext) _PrjProjectTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjProjectTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjProjectTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjProjectTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "owner":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_owner(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "progress":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_progress(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "risk":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_risk(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "state_desc":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_state_desc(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "start_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_start_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "end_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_end_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "prj_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_prj_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjProjectTabPagerInfoImplementors = []string{"PrjProjectTabPagerInfo"}

func (ec *executionContext) _PrjProjectTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjProjectTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjProjectTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjProjectTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjProjectUserTabImplementors = []string{"PrjProjectUserTab"}

func (ec *executionContext) _PrjProjectUserTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjProjectUserTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjProjectUserTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjProjectUserTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectUserTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "project_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectUserTab_project_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "user_email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectUserTab_user_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "project_role":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectUserTab_project_role(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectUserTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectUserTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectUserTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectUserTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectUserTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjProjectUserTabPagerInfoImplementors = []string{"PrjProjectUserTabPagerInfo"}

func (ec *executionContext) _PrjProjectUserTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjProjectUserTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjProjectUserTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjProjectUserTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectUserTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjProjectUserTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjReqFlowTabImplementors = []string{"PrjReqFlowTab"}

func (ec *executionContext) _PrjReqFlowTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjReqFlowTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjReqFlowTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjReqFlowTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTab_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTab_jira_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "group_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTab_group_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "group_key_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTab_group_key_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "flow_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTab_flow_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjReqFlowTabPagerInfoImplementors = []string{"PrjReqFlowTabPagerInfo"}

func (ec *executionContext) _PrjReqFlowTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjReqFlowTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjReqFlowTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjReqFlowTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjReqFlowTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjRequirementRelatedTabImplementors = []string{"PrjRequirementRelatedTab"}

func (ec *executionContext) _PrjRequirementRelatedTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjRequirementRelatedTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjRequirementRelatedTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjRequirementRelatedTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "req_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_req_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_jira_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "related_req_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_related_req_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "related_jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_related_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "related_jira_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_related_jira_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjRequirementRelatedTabPagerInfoImplementors = []string{"PrjRequirementRelatedTabPagerInfo"}

func (ec *executionContext) _PrjRequirementRelatedTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjRequirementRelatedTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjRequirementRelatedTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjRequirementRelatedTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementRelatedTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjRequirementTabImplementors = []string{"PrjRequirementTab"}

func (ec *executionContext) _PrjRequirementTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjRequirementTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjRequirementTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjRequirementTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "project_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_project_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "parent_jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_parent_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "parent_jira_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_parent_jira_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "task_parent_jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_task_parent_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "task_parent_jira_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_task_parent_jira_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_jira_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_jira_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_board":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_jira_board(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "remark":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_remark(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "priority":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_priority(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creator":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_creator(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "start_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_start_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "end_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_end_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "req_process":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_req_process(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "storypoint":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_storypoint(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "prj_flow_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_prj_flow_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "dms_flow_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_dms_flow_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "req_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_req_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "subtask_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_subtask_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "assignee":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_assignee(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "reporter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_reporter(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "dev":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_dev(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "qa":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_qa(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pd":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_pd(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "be":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_be(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fe":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_fe(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "other":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_other(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fixversions":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_fixversions(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "labels":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_labels(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "related_person":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_related_person(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "expect_prd_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_expect_prd_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "expect_uat_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_expect_uat_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "expect_live_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_expect_live_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fe_expect_duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_fe_expect_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "be_expect_duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_be_expect_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "qa_expect_duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_qa_expect_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pd_expect_duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_pd_expect_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "other_expect_duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_other_expect_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "checklist":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_checklist(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "reports":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_reports(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "sync_jira_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_sync_jira_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjRequirementTabPagerInfoImplementors = []string{"PrjRequirementTabPagerInfo"}

func (ec *executionContext) _PrjRequirementTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjRequirementTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjRequirementTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjRequirementTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRequirementTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjRiskTabImplementors = []string{"PrjRiskTab"}

func (ec *executionContext) _PrjRiskTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjRiskTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjRiskTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjRiskTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "project_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_project_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pre_risk_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_pre_risk_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "owner":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_owner(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "end_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_end_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "risk_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_risk_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "risk_level":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_risk_level(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "solution":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_solution(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "remark":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_remark(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjRiskTabPagerInfoImplementors = []string{"PrjRiskTabPagerInfo"}

func (ec *executionContext) _PrjRiskTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjRiskTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjRiskTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjRiskTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjRiskTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjSubtaskInfoImplementors = []string{"PrjSubtaskInfo"}

func (ec *executionContext) _PrjSubtaskInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjSubtaskInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjSubtaskInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjSubtaskInfo")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "group_key_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_group_key_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_parent_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_parent_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_jira_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "task_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_task_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subtask_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_subtask_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "priority":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_priority(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creator":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_creator(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "start_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_start_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "due_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_due_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "story_points":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_story_points(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "assignee":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_assignee(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reporter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_reporter(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fix_version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_fix_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "label":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_label(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "oper_ret":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjSubtaskInfo_oper_ret(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjUserTaskdetailTemplateTabImplementors = []string{"PrjUserTaskdetailTemplateTab"}

func (ec *executionContext) _PrjUserTaskdetailTemplateTab(ctx context.Context, sel ast.SelectionSet, obj *model.PrjUserTaskdetailTemplateTab) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjUserTaskdetailTemplateTabImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjUserTaskdetailTemplateTab")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjUserTaskdetailTemplateTab_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "user_email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjUserTaskdetailTemplateTab_user_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "conf":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjUserTaskdetailTemplateTab_conf(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "update_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjUserTaskdetailTemplateTab_update_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "create_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjUserTaskdetailTemplateTab_create_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjUserTaskdetailTemplateTab_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjUserTaskdetailTemplateTab_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjUserTaskdetailTemplateTab_is_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prjUserTaskdetailTemplateTabPagerInfoImplementors = []string{"PrjUserTaskdetailTemplateTabPagerInfo"}

func (ec *executionContext) _PrjUserTaskdetailTemplateTabPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PrjUserTaskdetailTemplateTabPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prjUserTaskdetailTemplateTabPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrjUserTaskdetailTemplateTabPagerInfo")
		case "items":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjUserTaskdetailTemplateTabPagerInfo_items(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PrjUserTaskdetailTemplateTabPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectChangeRecordImplementors = []string{"ProjectChangeRecord"}

func (ec *executionContext) _ProjectChangeRecord(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectChangeRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectChangeRecordImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectChangeRecord")
		case "operator":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectChangeRecord_operator(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "old_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectChangeRecord_old_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "new_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectChangeRecord_new_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "old_state_desc":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectChangeRecord_old_state_desc(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "new_state_desc":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectChangeRecord_new_state_desc(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "old_risk":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectChangeRecord_old_risk(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "new_risk":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectChangeRecord_new_risk(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "change_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectChangeRecord_change_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "change_remark":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectChangeRecord_change_remark(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectDetailImplementors = []string{"ProjectDetail"}

func (ec *executionContext) _ProjectDetail(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectDetailImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectDetail")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "desc":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_desc(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "progress":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_progress(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "state_desc":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_state_desc(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "risk":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_risk(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "owner":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_owner(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "department_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_department_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "group_key_ids":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_group_key_ids(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "plan_start_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_plan_start_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "plan_end_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_plan_end_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "state_history":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectDetail_state_history(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectInfoImplementors = []string{"ProjectInfo"}

func (ec *executionContext) _ProjectInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectInfo")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectInfo_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectInfo_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "desc":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectInfo_desc(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "progress":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectInfo_progress(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectInfo_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "risk":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectInfo_risk(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "owner":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectInfo_owner(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "plan_start_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectInfo_plan_start_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "plan_end_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectInfo_plan_end_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectMemberInfoImplementors = []string{"ProjectMemberInfo"}

func (ec *executionContext) _ProjectMemberInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectMemberInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectMemberInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectMemberInfo")
		case "user_email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectMemberInfo_user_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectMemberInfo_user_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "product_line":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectMemberInfo_product_line(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "team":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectMemberInfo_team(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "role":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectMemberInfo_role(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "project_role":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectMemberInfo_project_role(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectMemberPagerInfoImplementors = []string{"ProjectMemberPagerInfo"}

func (ec *executionContext) _ProjectMemberPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectMemberPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectMemberPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectMemberPagerInfo")
		case "Member_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectMemberPagerInfo_Member_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectMemberPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectMenuInfoImplementors = []string{"ProjectMenuInfo"}

func (ec *executionContext) _ProjectMenuInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectMenuInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectMenuInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectMenuInfo")
		case "Menu_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectMenuInfo_Menu_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectsPagerInfoImplementors = []string{"ProjectsPagerInfo"}

func (ec *executionContext) _ProjectsPagerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectsPagerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectsPagerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectsPagerInfo")
		case "project_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectsPagerInfo_project_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProjectsPagerInfo_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getPrjChangeRecordTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjChangeRecordTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjChangeRecordTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjChangeRecordTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjChangeRecordTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjChangeRecordTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjGanttGroupDepartmentTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjGanttGroupDepartmentTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjGanttGroupDepartmentTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjGanttGroupDepartmentTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjGanttGroupDepartmentTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjGanttGroupDepartmentTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjGanttGroupMemberTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjGanttGroupMemberTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjGanttGroupMemberTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjGanttGroupMemberTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjGanttGroupMemberTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjGanttGroupMemberTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjGanttGroupTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjGanttGroupTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjGanttGroupTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjGanttGroupTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjGanttGroupTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjGanttGroupTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjMilestoneTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjMilestoneTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjMilestoneTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjMilestoneTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjMilestoneTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjMilestoneTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjProjectDepartmentTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjProjectDepartmentTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjProjectDepartmentTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjProjectDepartmentTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjProjectDepartmentTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjProjectDepartmentTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjProjectTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjProjectTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjProjectTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjProjectTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjProjectTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjProjectTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjProjectUserTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjProjectUserTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjProjectUserTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjProjectUserTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjProjectUserTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjProjectUserTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjRequirementRelatedTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjRequirementRelatedTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjRequirementRelatedTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjRequirementRelatedTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjRequirementRelatedTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjRequirementRelatedTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjRequirementTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjRequirementTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjRequirementTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjRequirementTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjRequirementTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjRequirementTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjReqFlowTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjReqFlowTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjReqFlowTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjReqFlowTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjReqFlowTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjReqFlowTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjRiskTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjRiskTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjRiskTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjRiskTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjRiskTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjRiskTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjUserTaskdetailTemplateTabsForPager":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjUserTaskdetailTemplateTabsForPager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjUserTaskdetailTemplateTabs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjUserTaskdetailTemplateTabs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPrjUserTaskdetailTemplateTab":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrjUserTaskdetailTemplateTab(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetEnumsList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetEnumsList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetMilestoneList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetMilestoneList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetMilestoneChangeHistory":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetMilestoneChangeHistory(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetVersions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetVersions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetVersionsByBoards":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetVersionsByBoards(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetGroupTaskList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetGroupTaskList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetKanBoardTaskList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetKanBoardTaskList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetDmsFlowId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetDmsFlowId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetJiraBoardsTaskList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetJiraBoardsTaskList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetRiskList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetRiskList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetProjectDetail":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetProjectDetail(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetProjectList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetProjectList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetProjectMemberList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetProjectMemberList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetProjectMenu":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetProjectMenu(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizEarmakedGetTaskLit":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizEarmakedGetTaskLit(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetGanttGroup":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetGanttGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetGanttGroupList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetGanttGroupList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetGanttScheduledSubtaskList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetGanttScheduledSubtaskList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetGanttUnScheduledSubtaskList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetGanttUnScheduledSubtaskList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetGanttTaskList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetGanttTaskList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "BizGetGanttUnScheduledSubtaskNum":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BizGetGanttUnScheduledSubtaskNum(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "__schema":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reqPoolTaskDataImplementors = []string{"ReqPoolTaskData"}

func (ec *executionContext) _ReqPoolTaskData(ctx context.Context, sel ast.SelectionSet, obj *model.ReqPoolTaskData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reqPoolTaskDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReqPoolTaskData")
		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskData_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "task_list":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskData_task_list(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reqPoolTaskInfoImplementors = []string{"ReqPoolTaskInfo"}

func (ec *executionContext) _ReqPoolTaskInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ReqPoolTaskInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reqPoolTaskInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReqPoolTaskInfo")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "task_parent_jira_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_task_parent_jira_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "task_parent_jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_task_parent_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "related_task":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_related_task(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "son_task":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_son_task(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "project_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_project_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_jira_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_jira_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "jira_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_jira_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "jira_board":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_jira_board(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "req_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_req_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "summary":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_summary(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "remark":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_remark(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "start_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_start_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "due_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_due_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ctime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_ctime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mtime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_mtime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "story_points":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_story_points(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subtask_storypoints":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_subtask_storypoints(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priority":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_priority(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "flow_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_flow_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "assignee":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_assignee(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reporter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_reporter(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "be":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_be(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fe":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_fe(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "qa":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_qa(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pd":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_pd(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "other":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_other(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "be_expect_duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_be_expect_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fe_expect_duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_fe_expect_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "qa_expect_duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_qa_expect_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pd_expect_duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_pd_expect_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "other_expect_duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_other_expect_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fix_version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_fix_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "labels":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ReqPoolTaskInfo_labels(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var riskInfoImplementors = []string{"RiskInfo"}

func (ec *executionContext) _RiskInfo(ctx context.Context, sel ast.SelectionSet, obj *model.RiskInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, riskInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RiskInfo")
		case "project_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RiskInfo_project_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pre_risk_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RiskInfo_pre_risk_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RiskInfo_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "owner":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RiskInfo_owner(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RiskInfo_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "end_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RiskInfo_end_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "risk_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RiskInfo_risk_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "risk_level":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RiskInfo_risk_level(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "solution":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RiskInfo_solution(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "remark":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RiskInfo_remark(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "user_email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_user_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_user_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "product_line":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_product_line(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "team":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_team(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "role":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_role(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userTaskNumInfoImplementors = []string{"UserTaskNumInfo"}

func (ec *executionContext) _UserTaskNumInfo(ctx context.Context, sel ast.SelectionSet, obj *model.UserTaskNumInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userTaskNumInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserTaskNumInfo")
		case "user_email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._UserTaskNumInfo_user_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unscheduled_subtasknum":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._UserTaskNumInfo_unscheduled_subtasknum(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "locations":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_locations(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_isRepeatable(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_defaultValue(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "types":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_types(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_queryType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_mutationType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "subscriptionType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_subscriptionType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "directives":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_directives(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_kind(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_fields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "interfaces":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_interfaces(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "possibleTypes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_possibleTypes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "enumValues":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_enumValues(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "inputFields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_inputFields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ofType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_ofType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "specifiedByURL":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_specifiedByURL(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCommonEnum2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnum(ctx context.Context, sel ast.SelectionSet, v *model.CommonEnum) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommonEnum(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalNGanttGroupInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupInfo(ctx context.Context, sel ast.SelectionSet, v *model.GanttGroupInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GanttGroupInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGanttGroupInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupInput(ctx context.Context, v interface{}) (model.GanttGroupInput, error) {
	res, err := ec.unmarshalInputGanttGroupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNMilestoneInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐMilestoneInfo(ctx context.Context, sel ast.SelectionSet, v *model.MilestoneInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MilestoneInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMilestoneInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐMilestoneInput(ctx context.Context, v interface{}) (model.MilestoneInput, error) {
	res, err := ec.unmarshalInputMilestoneInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPagerFrontInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerFrontInput(ctx context.Context, v interface{}) (model.PagerFrontInput, error) {
	res, err := ec.unmarshalInputPagerFrontInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPagerInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPagerInput(ctx context.Context, v interface{}) (model.PagerInput, error) {
	res, err := ec.unmarshalInputPagerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjChangeRecordTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTab(ctx context.Context, sel ast.SelectionSet, v model.PrjChangeRecordTab) graphql.Marshaler {
	return ec._PrjChangeRecordTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjChangeRecordTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjChangeRecordTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjChangeRecordTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjChangeRecordTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjChangeRecordTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjChangeRecordTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjChangeRecordTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabInput(ctx context.Context, v interface{}) (model.PrjChangeRecordTabInput, error) {
	res, err := ec.unmarshalInputPrjChangeRecordTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjChangeRecordTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjChangeRecordTabPagerInfo) graphql.Marshaler {
	return ec._PrjChangeRecordTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjChangeRecordTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjChangeRecordTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjChangeRecordTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjGanttGroupDepartmentTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTab(ctx context.Context, sel ast.SelectionSet, v model.PrjGanttGroupDepartmentTab) graphql.Marshaler {
	return ec._PrjGanttGroupDepartmentTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjGanttGroupDepartmentTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjGanttGroupDepartmentTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjGanttGroupDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjGanttGroupDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjGanttGroupDepartmentTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjGanttGroupDepartmentTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjGanttGroupDepartmentTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabInput(ctx context.Context, v interface{}) (model.PrjGanttGroupDepartmentTabInput, error) {
	res, err := ec.unmarshalInputPrjGanttGroupDepartmentTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjGanttGroupDepartmentTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjGanttGroupDepartmentTabPagerInfo) graphql.Marshaler {
	return ec._PrjGanttGroupDepartmentTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjGanttGroupDepartmentTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjGanttGroupDepartmentTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjGanttGroupDepartmentTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjGanttGroupMemberTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx context.Context, sel ast.SelectionSet, v model.PrjGanttGroupMemberTab) graphql.Marshaler {
	return ec._PrjGanttGroupMemberTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjGanttGroupMemberTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjGanttGroupMemberTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjGanttGroupMemberTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjGanttGroupMemberTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjGanttGroupMemberTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjGanttGroupMemberTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjGanttGroupMemberTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabInput(ctx context.Context, v interface{}) (model.PrjGanttGroupMemberTabInput, error) {
	res, err := ec.unmarshalInputPrjGanttGroupMemberTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjGanttGroupMemberTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjGanttGroupMemberTabPagerInfo) graphql.Marshaler {
	return ec._PrjGanttGroupMemberTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjGanttGroupMemberTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjGanttGroupMemberTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjGanttGroupMemberTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjGanttGroupTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTab(ctx context.Context, sel ast.SelectionSet, v model.PrjGanttGroupTab) graphql.Marshaler {
	return ec._PrjGanttGroupTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjGanttGroupTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjGanttGroupTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjGanttGroupTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjGanttGroupTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjGanttGroupTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjGanttGroupTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjGanttGroupTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabInput(ctx context.Context, v interface{}) (model.PrjGanttGroupTabInput, error) {
	res, err := ec.unmarshalInputPrjGanttGroupTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjGanttGroupTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjGanttGroupTabPagerInfo) graphql.Marshaler {
	return ec._PrjGanttGroupTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjGanttGroupTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjGanttGroupTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjGanttGroupTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjMilestoneTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTab(ctx context.Context, sel ast.SelectionSet, v model.PrjMilestoneTab) graphql.Marshaler {
	return ec._PrjMilestoneTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjMilestoneTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjMilestoneTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjMilestoneTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjMilestoneTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjMilestoneTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjMilestoneTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjMilestoneTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabInput(ctx context.Context, v interface{}) (model.PrjMilestoneTabInput, error) {
	res, err := ec.unmarshalInputPrjMilestoneTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjMilestoneTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjMilestoneTabPagerInfo) graphql.Marshaler {
	return ec._PrjMilestoneTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjMilestoneTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjMilestoneTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjMilestoneTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjProjectDepartmentTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTab(ctx context.Context, sel ast.SelectionSet, v model.PrjProjectDepartmentTab) graphql.Marshaler {
	return ec._PrjProjectDepartmentTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjProjectDepartmentTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjProjectDepartmentTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjProjectDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjProjectDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjProjectDepartmentTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjProjectDepartmentTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjProjectDepartmentTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabInput(ctx context.Context, v interface{}) (model.PrjProjectDepartmentTabInput, error) {
	res, err := ec.unmarshalInputPrjProjectDepartmentTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjProjectDepartmentTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjProjectDepartmentTabPagerInfo) graphql.Marshaler {
	return ec._PrjProjectDepartmentTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjProjectDepartmentTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjProjectDepartmentTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjProjectDepartmentTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjProjectTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTab(ctx context.Context, sel ast.SelectionSet, v model.PrjProjectTab) graphql.Marshaler {
	return ec._PrjProjectTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjProjectTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjProjectTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjProjectTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjProjectTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjProjectTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjProjectTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjProjectTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabInput(ctx context.Context, v interface{}) (model.PrjProjectTabInput, error) {
	res, err := ec.unmarshalInputPrjProjectTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjProjectTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjProjectTabPagerInfo) graphql.Marshaler {
	return ec._PrjProjectTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjProjectTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjProjectTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjProjectTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjProjectUserTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTab(ctx context.Context, sel ast.SelectionSet, v model.PrjProjectUserTab) graphql.Marshaler {
	return ec._PrjProjectUserTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjProjectUserTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjProjectUserTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjProjectUserTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjProjectUserTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjProjectUserTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjProjectUserTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjProjectUserTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabInput(ctx context.Context, v interface{}) (model.PrjProjectUserTabInput, error) {
	res, err := ec.unmarshalInputPrjProjectUserTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjProjectUserTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjProjectUserTabPagerInfo) graphql.Marshaler {
	return ec._PrjProjectUserTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjProjectUserTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjProjectUserTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjProjectUserTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjReqFlowTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTab(ctx context.Context, sel ast.SelectionSet, v model.PrjReqFlowTab) graphql.Marshaler {
	return ec._PrjReqFlowTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjReqFlowTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjReqFlowTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjReqFlowTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjReqFlowTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjReqFlowTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjReqFlowTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjReqFlowTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabInput(ctx context.Context, v interface{}) (model.PrjReqFlowTabInput, error) {
	res, err := ec.unmarshalInputPrjReqFlowTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjReqFlowTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjReqFlowTabPagerInfo) graphql.Marshaler {
	return ec._PrjReqFlowTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjReqFlowTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjReqFlowTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjReqFlowTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjRequirementRelatedTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTab(ctx context.Context, sel ast.SelectionSet, v model.PrjRequirementRelatedTab) graphql.Marshaler {
	return ec._PrjRequirementRelatedTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjRequirementRelatedTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjRequirementRelatedTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjRequirementRelatedTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjRequirementRelatedTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjRequirementRelatedTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjRequirementRelatedTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjRequirementRelatedTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabInput(ctx context.Context, v interface{}) (model.PrjRequirementRelatedTabInput, error) {
	res, err := ec.unmarshalInputPrjRequirementRelatedTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjRequirementRelatedTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjRequirementRelatedTabPagerInfo) graphql.Marshaler {
	return ec._PrjRequirementRelatedTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjRequirementRelatedTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjRequirementRelatedTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjRequirementRelatedTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjRequirementTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTab(ctx context.Context, sel ast.SelectionSet, v model.PrjRequirementTab) graphql.Marshaler {
	return ec._PrjRequirementTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjRequirementTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjRequirementTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjRequirementTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjRequirementTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjRequirementTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjRequirementTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjRequirementTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabInput(ctx context.Context, v interface{}) (model.PrjRequirementTabInput, error) {
	res, err := ec.unmarshalInputPrjRequirementTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjRequirementTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjRequirementTabPagerInfo) graphql.Marshaler {
	return ec._PrjRequirementTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjRequirementTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjRequirementTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjRequirementTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjRiskTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTab(ctx context.Context, sel ast.SelectionSet, v model.PrjRiskTab) graphql.Marshaler {
	return ec._PrjRiskTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjRiskTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjRiskTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjRiskTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjRiskTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjRiskTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjRiskTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjRiskTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabInput(ctx context.Context, v interface{}) (model.PrjRiskTabInput, error) {
	res, err := ec.unmarshalInputPrjRiskTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjRiskTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjRiskTabPagerInfo) graphql.Marshaler {
	return ec._PrjRiskTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjRiskTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjRiskTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjRiskTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjSubtaskAddInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskAddInput(ctx context.Context, v interface{}) (model.PrjSubtaskAddInput, error) {
	res, err := ec.unmarshalInputPrjSubtaskAddInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPrjSubtaskEditInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskEditInput(ctx context.Context, v interface{}) (*model.PrjSubtaskEditInput, error) {
	res, err := ec.unmarshalInputPrjSubtaskEditInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjSubtaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjSubtaskInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjSubtaskInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPrjUserTaskdetailTemplateTab2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTab(ctx context.Context, sel ast.SelectionSet, v model.PrjUserTaskdetailTemplateTab) graphql.Marshaler {
	return ec._PrjUserTaskdetailTemplateTab(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjUserTaskdetailTemplateTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjUserTaskdetailTemplateTab) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjUserTaskdetailTemplateTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPrjUserTaskdetailTemplateTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjUserTaskdetailTemplateTab) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjUserTaskdetailTemplateTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrjUserTaskdetailTemplateTabInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabInput(ctx context.Context, v interface{}) (model.PrjUserTaskdetailTemplateTabInput, error) {
	res, err := ec.unmarshalInputPrjUserTaskdetailTemplateTabInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrjUserTaskdetailTemplateTabPagerInfo2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v model.PrjUserTaskdetailTemplateTabPagerInfo) graphql.Marshaler {
	return ec._PrjUserTaskdetailTemplateTabPagerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrjUserTaskdetailTemplateTabPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjUserTaskdetailTemplateTabPagerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrjUserTaskdetailTemplateTabPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectInfo(ctx context.Context, sel ast.SelectionSet, v *model.ProjectInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectInput(ctx context.Context, v interface{}) (model.ProjectInput, error) {
	res, err := ec.unmarshalInputProjectInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectMemberInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInfo(ctx context.Context, sel ast.SelectionSet, v *model.ProjectMemberInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectMemberInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInput(ctx context.Context, v interface{}) (*model.ProjectMemberInput, error) {
	res, err := ec.unmarshalInputProjectMemberInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNQueryProjectInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐQueryProjectInput(ctx context.Context, v interface{}) (model.QueryProjectInput, error) {
	res, err := ec.unmarshalInputQueryProjectInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNQueryProjectMemberInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐQueryProjectMemberInput(ctx context.Context, v interface{}) (model.QueryProjectMemberInput, error) {
	res, err := ec.unmarshalInputQueryProjectMemberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReqPoolTasKanBoardInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTasKanBoardInput(ctx context.Context, v interface{}) (model.ReqPoolTasKanBoardInput, error) {
	res, err := ec.unmarshalInputReqPoolTasKanBoardInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReqPoolTaskAddInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskAddInput(ctx context.Context, v interface{}) (model.ReqPoolTaskAddInput, error) {
	res, err := ec.unmarshalInputReqPoolTaskAddInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReqPoolTaskEditInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskEditInput(ctx context.Context, v interface{}) (*model.ReqPoolTaskEditInput, error) {
	res, err := ec.unmarshalInputReqPoolTaskEditInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReqPoolTaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskInfo(ctx context.Context, sel ast.SelectionSet, v []*model.ReqPoolTaskInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReqPoolTaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNReqPoolTaskInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskInput(ctx context.Context, v interface{}) (model.ReqPoolTaskInput, error) {
	res, err := ec.unmarshalInputReqPoolTaskInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRiskAddInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐRiskAddInput(ctx context.Context, v interface{}) (model.RiskAddInput, error) {
	res, err := ec.unmarshalInputRiskAddInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRiskUpdateInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐRiskUpdateInput(ctx context.Context, v interface{}) (model.RiskUpdateInput, error) {
	res, err := ec.unmarshalInputRiskUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNUpdateMilestoneInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUpdateMilestoneInput(ctx context.Context, v interface{}) (model.UpdateMilestoneInput, error) {
	res, err := ec.unmarshalInputUpdateMilestoneInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUpdateProjectInput(ctx context.Context, v interface{}) (model.UpdateProjectInput, error) {
	res, err := ec.unmarshalInputUpdateProjectInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectStateInput2githubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUpdateProjectStateInput(ctx context.Context, v interface{}) (model.UpdateProjectStateInput, error) {
	res, err := ec.unmarshalInputUpdateProjectStateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAddProjectMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐAddProjectMemberInput(ctx context.Context, v interface{}) (*model.AddProjectMemberInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAddProjectMemberInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCommonEnum2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnumᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CommonEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommonEnum2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐCommonEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODataChangeHistory2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐDataChangeHistory(ctx context.Context, sel ast.SelectionSet, v []*model.DataChangeHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODataChangeHistory2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐDataChangeHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODataChangeHistory2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐDataChangeHistory(ctx context.Context, sel ast.SelectionSet, v *model.DataChangeHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataChangeHistory(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeleteGanttGroupMembersInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐDeleteGanttGroupMembersInput(ctx context.Context, v interface{}) (*model.DeleteGanttGroupMembersInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeleteGanttGroupMembersInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODeleteProjectMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐDeleteProjectMemberInput(ctx context.Context, v interface{}) (*model.DeleteProjectMemberInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeleteProjectMemberInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEarmakedPrjTaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐEarmakedPrjTaskInfo(ctx context.Context, sel ast.SelectionSet, v []*model.EarmakedPrjTaskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEarmakedPrjTaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐEarmakedPrjTaskInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEarmakedPrjTaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐEarmakedPrjTaskInfo(ctx context.Context, sel ast.SelectionSet, v *model.EarmakedPrjTaskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EarmakedPrjTaskInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOEarmakedTaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐEarmakedTaskInfo(ctx context.Context, sel ast.SelectionSet, v []*model.EarmakedTaskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEarmakedTaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐEarmakedTaskInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEarmakedTaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐEarmakedTaskInfo(ctx context.Context, sel ast.SelectionSet, v *model.EarmakedTaskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EarmakedTaskInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOEnumsResult2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐEnumsResult(ctx context.Context, sel ast.SelectionSet, v *model.EnumsResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnumsResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOFlowRelationInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐFlowRelationInfo(ctx context.Context, sel ast.SelectionSet, v []*model.FlowRelationInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFlowRelationInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐFlowRelationInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFlowRelationInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐFlowRelationInfo(ctx context.Context, sel ast.SelectionSet, v *model.FlowRelationInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FlowRelationInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFlowRelationInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐFlowRelationInput(ctx context.Context, v interface{}) ([]*model.FlowRelationInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.FlowRelationInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFlowRelationInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐFlowRelationInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFlowRelationInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐFlowRelationInput(ctx context.Context, v interface{}) (*model.FlowRelationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFlowRelationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGanttGroupDetail2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupDetail(ctx context.Context, sel ast.SelectionSet, v *model.GanttGroupDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GanttGroupDetail(ctx, sel, v)
}

func (ec *executionContext) marshalOGanttGroupInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GanttGroupInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGanttGroupInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGanttGroupMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupMemberInput(ctx context.Context, v interface{}) (*model.GanttGroupMemberInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGanttGroupMemberInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGanttGroupTaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupTaskInfo(ctx context.Context, sel ast.SelectionSet, v *model.GanttGroupTaskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GanttGroupTaskInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOGanttGroupsPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐGanttGroupsPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.GanttGroupsPagerInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GanttGroupsPagerInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚕᚕᚖint(ctx context.Context, v interface{}) ([][]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([][]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚕᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚕᚖint(ctx context.Context, sel ast.SelectionSet, v [][]*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚕᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOJiraBoardsTaskInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraBoardsTaskInput(ctx context.Context, v interface{}) (*model.JiraBoardsTaskInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJiraBoardsTaskInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJiraKeyJiraIdInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraKeyJiraIDInfo(ctx context.Context, sel ast.SelectionSet, v []*model.JiraKeyJiraIDInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJiraKeyJiraIdInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraKeyJiraIDInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJiraKeyJiraIdInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraKeyJiraIDInfo(ctx context.Context, sel ast.SelectionSet, v *model.JiraKeyJiraIDInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JiraKeyJiraIdInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJiraKeyJiraIdInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraKeyJiraIDInput(ctx context.Context, v interface{}) ([]*model.JiraKeyJiraIDInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.JiraKeyJiraIDInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOJiraKeyJiraIdInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraKeyJiraIDInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOJiraKeyJiraIdInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐJiraKeyJiraIDInput(ctx context.Context, v interface{}) (*model.JiraKeyJiraIDInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJiraKeyJiraIdInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMilestoneInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐMilestoneInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MilestoneInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMilestoneInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐMilestoneInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMilestonePagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐMilestonePagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.MilestonePagerInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MilestonePagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOPrjChangeRecordTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjChangeRecordTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjChangeRecordTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjChangeRecordTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjChangeRecordTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjChangeRecordTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjChangeRecordTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjChangeRecordTabInput(ctx context.Context, v interface{}) (*model.PrjChangeRecordTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjChangeRecordTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrjGanttGroupDepartmentTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjGanttGroupDepartmentTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjGanttGroupDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjGanttGroupDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjGanttGroupDepartmentTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjGanttGroupDepartmentTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjGanttGroupDepartmentTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupDepartmentTabInput(ctx context.Context, v interface{}) (*model.PrjGanttGroupDepartmentTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjGanttGroupDepartmentTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrjGanttGroupMemberTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx context.Context, sel ast.SelectionSet, v []*model.PrjGanttGroupMemberTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjGanttGroupMemberTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPrjGanttGroupMemberTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjGanttGroupMemberTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjGanttGroupMemberTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjGanttGroupMemberTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjGanttGroupMemberTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjGanttGroupMemberTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjGanttGroupMemberTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupMemberTabInput(ctx context.Context, v interface{}) (*model.PrjGanttGroupMemberTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjGanttGroupMemberTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrjGanttGroupTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjGanttGroupTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjGanttGroupTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjGanttGroupTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjGanttGroupTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjGanttGroupTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjGanttGroupTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjGanttGroupTabInput(ctx context.Context, v interface{}) (*model.PrjGanttGroupTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjGanttGroupTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrjMilestoneTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjMilestoneTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjMilestoneTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjMilestoneTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjMilestoneTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjMilestoneTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjMilestoneTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjMilestoneTabInput(ctx context.Context, v interface{}) (*model.PrjMilestoneTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjMilestoneTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrjProjectDepartmentTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjProjectDepartmentTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjProjectDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjProjectDepartmentTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjProjectDepartmentTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjProjectDepartmentTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjProjectDepartmentTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectDepartmentTabInput(ctx context.Context, v interface{}) (*model.PrjProjectDepartmentTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjProjectDepartmentTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrjProjectTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjProjectTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjProjectTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjProjectTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjProjectTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjProjectTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjProjectTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectTabInput(ctx context.Context, v interface{}) (*model.PrjProjectTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjProjectTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrjProjectUserTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjProjectUserTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjProjectUserTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjProjectUserTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjProjectUserTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjProjectUserTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjProjectUserTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjProjectUserTabInput(ctx context.Context, v interface{}) (*model.PrjProjectUserTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjProjectUserTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrjReqFlowTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjReqFlowTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjReqFlowTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjReqFlowTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjReqFlowTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjReqFlowTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjReqFlowTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjReqFlowTabInput(ctx context.Context, v interface{}) (*model.PrjReqFlowTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjReqFlowTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrjRequirementRelatedTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjRequirementRelatedTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjRequirementRelatedTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjRequirementRelatedTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjRequirementRelatedTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjRequirementRelatedTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjRequirementRelatedTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementRelatedTabInput(ctx context.Context, v interface{}) (*model.PrjRequirementRelatedTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjRequirementRelatedTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrjRequirementTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjRequirementTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjRequirementTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjRequirementTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjRequirementTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjRequirementTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjRequirementTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRequirementTabInput(ctx context.Context, v interface{}) (*model.PrjRequirementTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjRequirementTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPrjRiskTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjRiskTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjRiskTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjRiskTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjRiskTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjRiskTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjRiskTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjRiskTabInput(ctx context.Context, v interface{}) (*model.PrjRiskTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjRiskTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPrjSubtaskEditInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskEditInputᚄ(ctx context.Context, v interface{}) ([]*model.PrjSubtaskEditInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.PrjSubtaskEditInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPrjSubtaskEditInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskEditInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPrjSubtaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfo(ctx context.Context, sel ast.SelectionSet, v []*model.PrjSubtaskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPrjSubtaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPrjSubtaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjSubtaskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjSubtaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjSubtaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjSubtaskInfo(ctx context.Context, sel ast.SelectionSet, v *model.PrjSubtaskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjSubtaskInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOPrjUserTaskdetailTemplateTab2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PrjUserTaskdetailTemplateTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrjUserTaskdetailTemplateTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTab(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPrjUserTaskdetailTemplateTab2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTab(ctx context.Context, sel ast.SelectionSet, v *model.PrjUserTaskdetailTemplateTab) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PrjUserTaskdetailTemplateTab(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPrjUserTaskdetailTemplateTabInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐPrjUserTaskdetailTemplateTabInput(ctx context.Context, v interface{}) (*model.PrjUserTaskdetailTemplateTabInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPrjUserTaskdetailTemplateTabInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectDetail2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectDetail(ctx context.Context, sel ast.SelectionSet, v *model.ProjectDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectDetail(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProjectInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProjectMemberInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProjectMemberInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectMemberInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOProjectMemberInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInput(ctx context.Context, v interface{}) ([]*model.ProjectMemberInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectMemberInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProjectMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectMemberInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInputᚄ(ctx context.Context, v interface{}) ([]*model.ProjectMemberInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectMemberInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberInput(ctx context.Context, v interface{}) (*model.ProjectMemberInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectMemberInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectMemberPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMemberPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.ProjectMemberPagerInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectMemberPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectMenuInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectMenuInfo(ctx context.Context, sel ast.SelectionSet, v *model.ProjectMenuInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectMenuInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectsPagerInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐProjectsPagerInfo(ctx context.Context, sel ast.SelectionSet, v *model.ProjectsPagerInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectsPagerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOReqPoolTaskData2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskData(ctx context.Context, sel ast.SelectionSet, v *model.ReqPoolTaskData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReqPoolTaskData(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReqPoolTaskEditInput2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskEditInputᚄ(ctx context.Context, v interface{}) ([]*model.ReqPoolTaskEditInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ReqPoolTaskEditInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReqPoolTaskEditInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskEditInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReqPoolTaskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskInfo(ctx context.Context, sel ast.SelectionSet, v []*model.ReqPoolTaskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReqPoolTaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReqPoolTaskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐReqPoolTaskInfo(ctx context.Context, sel ast.SelectionSet, v *model.ReqPoolTaskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReqPoolTaskInfo(ctx, sel, v)
}

func (ec *executionContext) marshalORiskInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐRiskInfo(ctx context.Context, sel ast.SelectionSet, v []*model.RiskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORiskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐRiskInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORiskInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐRiskInfo(ctx context.Context, sel ast.SelectionSet, v *model.RiskInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RiskInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSortField2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐSortField(ctx context.Context, v interface{}) ([]*model.SortField, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SortField, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSortField2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐSortField(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSortField2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐSortField(ctx context.Context, v interface{}) (*model.SortField, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSortField(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOUpdateProjectMemberInput2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUpdateProjectMemberInput(ctx context.Context, v interface{}) (*model.UpdateProjectMemberInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateProjectMemberInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserTaskNumInfo2ᚕᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUserTaskNumInfo(ctx context.Context, sel ast.SelectionSet, v []*model.UserTaskNumInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserTaskNumInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUserTaskNumInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserTaskNumInfo2ᚖgithubᚗcomᚋsjqzhangᚋgqlmockᚋgraphᚋmodelᚐUserTaskNumInfo(ctx context.Context, sel ast.SelectionSet, v *model.UserTaskNumInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserTaskNumInfo(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
